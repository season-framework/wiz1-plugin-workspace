[{"dic":{"default":{}},"id":"core.workspace.apps.editor","name":"/apps/editor","compile_html":"on","compile_css":"off","compile_js":"on","controller":"import season\nimport time\nwiz = framework.model(\"wiz\")\nconfig = wiz.config.load(\"wiz\")\n\nWIZ_CONTROLLER = '### get request query\\n### wiz.request.query(<KEY>, <DEFAULT_VALUE>)\\n# data = wiz.request.query() # get all queries as dict type\\n# value = wiz.request.query(\"key\", \"test\") # get `key` value, if not exist in query, return default value\\n# value = wiz.request.query(\"key\", True) # if default value is True, this key required\\n\\n### load text from dictionary\\n# hello = dic(\"hello\")\\n# title = dic(\"title.text\")\\n\\n### use selected controller\\n# controller.custom_function()\\n\\n### use segments\\n### Route: /board/<category>/list\\n### View URI: /board/notice/list\\n# segment = framework.request.segment\\n\\n### Build view variables, you can use\\n# kwargs[\\'message\\'] = \"Hello, World!\"\\n'\nWIZ_JS = 'let wiz_controller = async ($sce, $scope, $timeout) => {\\n    // call wiz api\\n    let status = await wiz.API.async(\\'status\\', {});\\n    console.log(status);\\n\\n    /*\\n    // WIZ JS API Variables\\n    wiz.id // random generated wiz workspace app id\\n    wiz.namespace // defined namespace at view\\n    wiz.app_namespace // defined namespace at wiz workspace \\n    wiz.render_id // random generated view instance id\\n    */\\n\\n    /*\\n    // bind event. allow access form another wiz\\n    wiz.bind(\"modal-show\", (data) => {\\n        $scope.data = data;\\n        $(\\'#\\' + wiz.render_id).modal(\"show\");\\n        $timeout();\\n    });\\n\\n    // response to caller, when event end.\\n    $scope.event = {};\\n    $scope.event.submit = async () => {\\n        $(\\'#\\' + wiz.render_id).modal(\"hide\");\\n        let resp = true;\\n        wiz.response(\"modal-show\", resp);\\n    }\\n\\n    $scope.event.close = async () => {\\n        $(\\'#\\' + wiz.render_id).modal(\"hide\");\\n        let resp = false;\\n        wiz.response(\"modal-show\", resp);\\n    }\\n    */\\n\\n    // call another wiz\\'s event.\\n    /*\\n    $scope.call_view = async () => {\\n        let resp = await wiz.connect(\"view namespace\")\\n            .data({\\n                title: \"Confirm\",\\n                message: \"Are you sure?\",\\n                btn_close: \"Cancel\",\\n                btn_action: \"Confirm\",\\n                btn_class: \"btn-success\"\\n            })\\n            .event(\"modal-show\");\\n\\n        console.log(\"[response]\", resp);\\n    }\\n    */\\n\\n    /*\\n    let socket = wiz.socket.get();\\n    // let socket = wiz.socket.get(\\'app_namespace\\');\\n    \\n    socket.on(\"connect\", function (data) {\\n        socket.emit(\"response\", \"hello\");\\n    });\\n\\n    socket.on(\"disconnect\", function (data) {\\n    });\\n\\n    socket.on(\"response\", function (data) {\\n        console.log(\"response\", data);\\n    });\\n    */\\n}\\n'\nWIZ_API = \"def __startup__(framework):\\n    # TODO: Setup Access Level, etc.\\n    pass\\n\\ndef status(framework):\\n    # build response\\n    framework.response.status(200, 'hello')\\n    # framework.response.status(200, hello='hello', world='world')\\n\"\nWIZ_PUG = '.container\\n    h3= message\\n    // {$ wiz.render(\"app-namespace-1\", \"view-instance-namespace\") $}\\n    // {$ wiz.render(\"app-namespace-2\", data=\\'hello\\') $}\\n'\nWIZ_SOCKET = '# import datetime\\n\\n# class Controller:\\n#     def __init__(self, wiz):\\n#         print(\"master\")\\n#         self.cache = wiz.cache\\n#         self.room = \"public\"\\n        \\n#     def join(self, wiz, data):\\n#         wiz.flask_socketio.join_room(self.room, namespace=wiz.socket.namespace)\\n#         msg = dict()\\n#         msg[\"type\"] = \"init\"\\n#         msg[\"data\"] = self.cache.get(\"message\", [])\\n#         wiz.socket.emit(\"message\", msg, to=self.room, broadcast=True)\\n\\n#     def message(self, wiz, data):\\n#         message = data[\"message\"]\\n#         user_id = wiz.lib.util.randomstring(6)\\n#         msg = dict()\\n#         msg[\"type\"] = \"message\"\\n#         msg[\"user\"] = user_id\\n#         msg[\"message\"] = message\\n#         msg[\"time\"] = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\\n#         with self.cache.open(\"message\", []) as cache:\\n#             try:\\n#                 cache[\\'message\\'].append(msg)\\n#                 cache[\\'message\\'] = cache[\\'message\\'][-100:]\\n#             except:\\n#                 cache[\\'message\\'] = []\\n#                 cache[\\'message\\'].append(msg)\\n#                 cache[\\'message\\'] = cache[\\'message\\'][-100:]\\n\\n#         wiz.socket.emit(\"message\", msg, to=self.room)\\n    \\n#     def connect(self, wiz, data):\\n#         pass\\n\\n#     def disconnect(self, wiz, data):            \\n#         msg = dict()\\n#         msg[\"type\"] = \"users\"\\n#         wiz.socket.emit(\"message\", msg, to=self.room, broadcast=True)\\n'\n\napp_id = framework.request.segment.app_id\nif app_id is None:\n    framework.response.redirect(\"apps/list\")\n\nif app_id == 'new':\n    pkg = dict()\n    pkg[\"id\"] = framework.lib.util.randomstring(12) + str(int(time.time()))\n    pkg[\"title\"] = \"New App\"\n    pkg[\"namespace\"] = pkg[\"id\"]\n    pkg[\"properties\"] = {\"html\": \"pug\", \"js\": \"javascript\", \"css\": \"scss\"}\n    pkg[\"viewuri\"] = \"\"\n\n    info = dict()\n    info[\"package\"] = pkg\n    info[\"controller\"] = WIZ_CONTROLLER\n    info[\"api\"] = WIZ_API\n    info[\"socketio\"] = WIZ_SOCKET\n    info[\"html\"] = WIZ_PUG\n    info[\"js\"] = WIZ_JS\n    info[\"css\"] = \"\"\n    info[\"dic\"] = dict()\n    info[\"dic\"][\"default\"] = dict()\n    info[\"dic\"][\"default\"][\"hello\"] = \"hello\"\n    info[\"dic\"][\"ko\"] = dict()\n    info[\"dic\"][\"ko\"][\"hello\"] = \"안녕하세요\"\n\n    wiz.data.update(info, mode='app')\n    framework.response.redirect(\"apps/editor/\" + pkg[\"id\"])\n\ninfo = wiz.data.get(app_id, mode='app')\nif info is None:\n    framework.response.redirect(\"list\")\n\nkwargs['IS_DEV'] = wiz.is_dev()\nkwargs['BRANCH'] = wiz.workspace.branch()\nkwargs['BRANCHES'] = wiz.workspace.branches()\nkwargs['CTRLS'] = wiz.controllers()\nkwargs['THEMES'] = wiz.themes()\nkwargs['CATEGORIES'] = config.get(\"category\")\nkwargs['APPID'] = app_id","html":"div(style=\"width: 100%; height: 100%;\")\n    mixin editor_fastmenu()\n        input.form-control.mr-2.text-white.if-desktop(type=\"text\" ng-model=\"app.data.package.title\" style=\"width: 160px; display: inline-block;\" autocomplete='off')\n        input.form-control.mr-2.text-white.if-desktop(type=\"text\" ng-model=\"app.data.package.namespace\" style=\"width: 240px; display: inline-block;\" autocomplete='off')\n\n    mixin editor_tab_app()\n        .card.card-sm.mb-3\n            .card-body\n                label.form-label(style=\"font-family: 'MAIN-EB'\") Title\n                input.form-control(type='text' placeholder='App Title' ng-model=\"app.data.package.title\" autocomplete='off')\n\n        .card.card-sm.mb-3\n            .card-body\n                label.form-label(style=\"font-family: 'MAIN-EB'\") Namespace\n                input.form-control(type='text' placeholder='App Title' ng-model=\"app.data.package.namespace\" autocomplete='off')\n\n        .card.card-sm.mb-3\n            .card-body\n                label.form-label(style=\"font-family: 'MAIN-EB'\") Category\n                select.form-select(ng-model=\"app.data.package.category\")\n                    option(value=\"{{c.id}}\" ng-repeat=\"c in extdata.categories\") {{c.title}}\n\n        .card.card-sm.mb-3\n            .card-body\n                label.form-label(style=\"font-family: 'MAIN-EB'\") Base Controller\n                select.form-select(ng-model=\"app.data.package.controller\")\n                    option(value=\"\") No Controller\n                    option(value=\"{{c}}\" ng-repeat=\"c in extdata.controller\") {{c}}\n            \n        .card.card-sm.mb-3\n            .card-body\n                label.form-label(style=\"font-family: 'MAIN-EB'\") Base Theme\n                select.form-select(ng-model=\"app.data.package.theme\")\n                    option(value=\"\") No Theme\n                    option(value=\"{{c}}\" ng-repeat=\"c in extdata.themes\") {{c}}\n        \n        .card.card-sm.mb-3\n            .card-body\n                label.form-label(style=\"font-family: 'MAIN-EB'\") View URI\n                input.form-control(type='text' placeholder='/board/notice/list' ng-model=\"app.data.package.viewuri\" autocomplete='off')\n\n        .card.card-sm.mb-3\n            .card-body\n                label.form-label(style=\"font-family: 'MAIN-EB'\") Script Type\n                select.form-select(ng-model=\"app.data.package.script_type\")\n                    option(value=\"text/javascript\") text/javascript\n                    option(value=\"text/babel\") text/babel\n\n    mixin editor_tab_browse()\n        .input-icon.mb-3\n            input.form-control#search(type=\"text\" placeholder=\"Search\" style=\"color: #545d6d !important;\" ng-model=\"browse.searchvalue\" ng-change=\"browse.search(browse.searchvalue)\" autocomplete='off')\n            span.input-icon-addon\n                svg.icon(xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\")\n                    path(stroke=\"none\" d=\"M0 0h24v24H0z\")\n                    circle(cx=\"10\" cy=\"10\" r=\"7\")\n                    line(x1=\"21\" y1=\"21\" x2=\"15\" y2=\"15\")\n                \n        .root-tree.mb-1(ng-repeat=\"item in browse.data\" class=\"{{item.package.id == app.id ? 'active' : ''}}\" ng-click=\"browse.select(item)\" ng-if=\"!item.hide\")\n            .root-title\n                table\n                    tr \n                        td.w-1(style=\"vertical-align: top;\")\n                            i.fas.fa-code.mr-2\n                        td(style=\"line-height: 1;\")\n                            span {{item.package.title}}\n                            br\n                            span.namespace {{item.package.namespace}}\n                        \n        a.root-tree.mb-1(href=\"/wiz/admin/workspace/apps/editor/new\")\n            .root-title.text-center.p-1.text-white\n                i.fas.fa-plus.mr-2\n                span Create New App\n\n\n    mixin codearea(tab)\n        div(style=\"overflow: hidden; height: 100%; width: 100%;\" ng-click=\"app.tab.active('{$tab$}')\" ng-if=\"app.editor.viewstate && layout.accessable_tab.includes('{$tab$}')\" ng-cloak)\n            .code-select.bg-dark.d-flex(style=\"margin-top: -2px;\")\n                .btn.btn-square.btn-sm.p-2(ng-repeat=\"code in app.editor.code.list\" ng-click=\"app.editor.code.change('{$tab$}', code.id)\" ng-class=\"configuration.tab.{$tab$}_val == code.id ? 'btn-white' : 'btn-dark'\") {{code.name}}\n\n                select.form-select.form-select-sm.m-1.ml-auto(style=\"width: 120px;\" ng-model=\"app.data.package.properties[configuration.tab.{$tab$}_val]\" ng-if=\"app.editor.codetypes[configuration.tab.{$tab$}_val].length > 0\")\n                    option(ng-repeat=\"code in app.editor.codetypes[configuration.tab.{$tab$}_val]\" value=\"{{code}}\") {{code}}\n                select.form-select.form-select-sm.m-1.mr-0.ml-auto(ng-if=\"configuration.tab.{$tab$}_val == 'dic'\" style=\"width: 60px;\" ng-model=\"configuration.tab.{$tab$}_language\")\n                    option(ng-repeat=\"(key, value) in app.data.dic\" value=\"{{key}}\") {{key}}\n                .btn.btn-square.btn-dark.btn-sm.p-2(ng-if=\"configuration.tab.{$tab$}_val == 'dic'\" ng-click=\"modal.add_language()\")\n                    i.fas.fa-plus\n\n            div(style=\"height: calc(100% - 36px);\")\n                div(ng-if=\"['preview', 'dic'].includes(configuration.tab.{$tab$}_val) == false\" ng-model=\"app.data[configuration.tab.{$tab$}_val]\" ui-monaco-opts=\"app.editor.properties['{$tab$}']\" ui-monaco)\n                div(ng-if=\"configuration.tab.{$tab$}_val == 'dic'\" ng-model=\"app.data[configuration.tab.{$tab$}_val][configuration.tab.{$tab$}_language]\" ui-monaco-opts=\"app.editor.properties['{$tab$}']\" ui-monaco)\n\n                .code-preview(ng-if=\"configuration.tab.{$tab$}_val == 'preview'\" style=\"max-width: none; width: 100%; height: 100%;\")\n                    iframe.preview(style=\"height: 100%;\" ng-show=\"app.preview.status\")\n                    table(ng-if=\"!app.preview.status\" style=\"width: 100%; height: 100%;\")\n                        tr \n                            td(style=\"text-align: center; vertical-align: middle;\")\n                                .spinner-grow.text-dark(style=\"width: 120px; height: 120px;\")\n\n                div(ng-if=\"app.tab.activetab != '{$tab$}' && ['preview'].includes(configuration.tab.{$tab$}_val) == false\" style=\"width: 100%; height: 100%; position: absolute; top: 0; left: 0; background: rgba(0,0,0,.05); z-index: 9999;\")\n\n    .display-none(style=\"display: none;\")\n        input#import-file(type=\"file\" accept=\".json,application/json\")\n\n    .bg-dark.text-center(ng-if=\"loading.status\" style=\"width: 100%; height: 100%; position: absolute; top: 0; left: 0; z-index: 99999; padding-top: 40vh; opacity: .6;\")\n        .spinner-grow.text-white(style=\"width: 60px; height: 60px;\")\n\n    .fixed-top\n        header.navbar.navbar-expand-md.navbar-dark\n            .container(style=\"max-width: none;\")\n                button.navbar-toggler(type='button' data-toggle='collapse' data-target='#navbar-menu')\n                    span.navbar-toggler-icon\n\n                .navbar-brand.navbar-brand-autodark.d-none-navbar-horizontal.pr-0.pr-md-3\n                    table(style='color: #d7e0fd; cursor: pointer;')\n                        tr\n                            td.p-3.pb-0.pt-1.pr-1\n                                img(src='/resources/wiz/plugin/theme/img/wiz-font.png' style='height: 18px; margin-top: 12px;')\n                                img(src='/resources/wiz/plugin/theme/img/logo-sym.png' style='height: 28px; margin-left: 8px;')\n                            td\n                                h3.m-0.p-0(style=\"margin-top: 24px !important;\") App Editor\n\n\n                select.form-control.text-white.mr-2(ng-model=\"extdata.branch\" ng-change=\"app.branch.change(extdata.branch)\" style=\"width: 120px;\")\n                    option(ng-repeat=\"branch in extdata.branches\" value=\"{{branch}}\") {{branch}}\n                +editor_fastmenu\n\n                #navbar-menu.navbar.navbar-collapse.collapse\n                    ul.navbar-nav\n                    .navbar-nav.flex-row.order-md-last.mr-2(style=\"align-items: center;\")\n                        li.nav-item.p-0.pr-2\n                            - if IS_DEV\n                                a.nav-link.btn.btn-sm.text-dark.btn-white.btn-pill(href=\"?dev=false\")\n                                    span.nav-link-title(style=\"font-size: 14px;\") development\n                            - else\n                                a.nav-link.btn.btn-sm.text-dark.btn-white.btn-pill(href=\"?dev=true\")\n                                    span.nav-link-title(style=\"font-size: 14px;\") production\n\n                        li.nav-item.p-0.pr-2\n                            a.nav-link.btn.btn-sm.text-dark.btn-white.btn-pill(ng-click=\"app.clean()\")\n                                span.nav-link-title(style=\"font-size: 14px;\") Clean\n                        \n                        li.nav-item.p-0.pr-2\n                            a.nav-link.btn.btn-sm.text-dark.btn-white.btn-pill(ng-click=\"modal.keymaps()\" style=\"font-size: 14px;\")\n                                i.fas.fa-keyboard\n\n                        li.nav-item.p-0.pr-2\n                            a.nav-link.btn.btn-sm.text-dark.btn-white.btn-pill(ng-href=\"/wiz/admin/workspace/apps/editor/new\" style=\"font-size: 14px;\")\n                                i.fas.fa-plus\n\n                        li.nav-item.p-0.pr-2\n                            a.nav-link.btn.btn-sm.text-dark.btn-white.btn-pill(ng-click=\"import_file()\" style=\"font-size: 14px;\")\n                                i.fas.fa-upload\n\n                        li.nav-item.p-0.pr-2\n                            a.nav-link.btn.btn-sm.text-dark.btn-white.btn-pill(ng-href=\"/wiz/export/{{mode}}/{{ app.id }}\" target=\"_blank\" style=\"font-size: 14px;\")\n                                i.fas.fa-download\n\n                        li.nav-item.p-0.pr-2\n                            a.nav-link.btn.btn-sm.text-dark.btn-white.btn-pill(ng-click=\"modal.delete()\")\n                                span.nav-link-title(style=\"font-size: 14px;\") Delete\n\n                        li.nav-item.p-0.pr-2\n                            a.nav-link.btn.btn-sm.text-dark.btn-white.btn-pill(ng-click=\"app.save()\")\n                                span.nav-link-title(style=\"font-size: 14px;\") Save\n\n                        li.nav-item.p-0\n                            a.nav-link.btn.btn-sm.text-dark.btn-white.btn-pill(ng-href='/wiz/admin/workspace/{{mode}}s/list')\n                                span.nav-link-title.bold(style=\"font-size: 14px;\")\n                                    i.fas.fa-times\n    \n    div(data-split-pane data-split-pane-properties=\"layout.viewstate.root\")\n        .bg-dark(data-split-pane-component data-width=\"360px\")\n            .menu-layout.p-3\n                .btn-group.w-100.mb-3\n                    button.btn(type=\"button\" ng-repeat=\"item in workspace.list\" style=\"width: 50%;\" class=\"{{workspace.active_workspace == item.id ? 'btn-white' : 'btn-dark'}}\" ng-click=\"item.active()\") {{item.name}}\n\n                .tree-container(ng-show=\"workspace.active_workspace == workspace.list[2].id\")                    \n                    .root-tree.mb-1(ng-repeat=\"item in history.data\" class=\"{{item.id == viewer.selected ? 'active' : ''}}\" ng-click=\"history.change(item)\")\n                        .root-title\n                            table\n                                tr \n                                    td.w-1.pr-2.pt-2.pb-2(style=\"vertical-align: top; font-size: 18px;\")\n                                        i.fas.fa-code-branch\n\n                                    td.pt-2.pb-2(style=\"line-height: 1;\")\n                                        span {{ item.message ? item.message : 'no message' }}\n                                        br\n                                        span.namespace {{item.committer ? item.committer : item.author}} ·\n                                        span.namespace.text-muted.ml-1 {{item.datetime}} · {{ item.id.substring(0, 8) }} \n\n\n                .tree-container(ng-show=\"workspace.active_workspace == workspace.list[1].id\")\n                    +editor_tab_browse\n\n                div(ng-show=\"workspace.active_workspace == workspace.list[0].id\")\n                    +editor_tab_app\n\n                    .hr.bg-white\n    \n                    h3.text-white Code Layout\n\n                    .text-center.mb-4\n                        .layout-selector.p-2(ng-class=\"layout.active_layout == 1 ? 'active' : ''\" ng-click=\"layout.change(1)\")\n                            .layout-icon\n                                .layout-row\n                                    .layout-column\n\n                        .layout-selector.p-2(ng-class=\"layout.active_layout == 2 ? 'active' : ''\" ng-click=\"layout.change(2)\")\n                            .layout-icon\n                                .layout-row\n                                    .layout-column\n                                    .layout-column\n\n                        .layout-selector.p-2(ng-class=\"layout.active_layout == 3 ? 'active' : ''\" ng-click=\"layout.change(3)\")\n                            .layout-icon\n                                .layout-row\n                                    .layout-column\n                                    .layout-column\n                                    .layout-column\n                        br\n                        .layout-selector.p-2(ng-class=\"layout.active_layout == 4 ? 'active' : ''\" ng-click=\"layout.change(4)\")\n                            .layout-icon.rows-2\n                                .layout-row\n                                    .layout-column\n                                .layout-row\n                                    .layout-column\n\n                        .layout-selector.p-2(ng-class=\"layout.active_layout == 5 ? 'active' : ''\" ng-click=\"layout.change(5)\")\n                            .layout-icon.rows-2\n                                .layout-row\n                                    .layout-column\n                                    .layout-column\n                                .layout-row\n                                    .layout-column\n\n                        .layout-selector.p-2(ng-class=\"layout.active_layout == 6 ? 'active' : ''\" ng-click=\"layout.change(6)\")\n                            .layout-icon.rows-2\n                                .layout-row\n                                    .layout-column\n                                    .layout-column\n                                    .layout-column\n                                .layout-row\n                                    .layout-column\n\n                    .hr.bg-white\n\n        div(data-split-pane-divider data-width=\"0px\")\n        \n        #editor-area(data-split-pane-component)\n            div(style=\"width: 100%; height: 100%;\" ng-if=\"workspace.active_workspace == 'history'\")\n                .code-select.bg-dark.d-flex(style=\"margin-top: -2px;\" ng-if=\"viewer.codes.length > 0\")\n                    .btn.btn-square.btn-sm.p-2(ng-repeat=\"code in viewer.codes\" ng-click=\"viewer.change(code)\" ng-class=\"viewer.code == code ? 'btn-white' : 'btn-dark'\" ng-if=\"code != 'preview'\") {{code}}\n                    \n                div(style=\"height: {{ viewer.codes.length > 0 ? 'calc(100% - 36px);' : '100%' }}\")\n                    div(ng-model=\"viewer.editor.data\" ui-monaco-opts=\"viewer.editor.configuration\" ui-monaco-diff)\n\n            div(data-split-pane data-split-pane-properties=\"layout.viewstate.horizonal\" ng-show=\"workspace.active_workspace != 'history'\")\n                div(data-split-pane-component data-height=\"100%\")\n                    div(data-split-pane data-split-pane-properties=\"layout.viewstate.vertical_1_1\")\n                        div(data-split-pane-component data-width=\"34%\")\n                            +codearea('tab1')\n                        div(data-split-pane-divider data-width=\"3px\")\n                        div(data-split-pane-component data-width=\"66%\")\n                            div(data-split-pane data-split-pane-properties=\"layout.viewstate.vertical_1_2\")\n                                div(data-split-pane-component data-width=\"50%\")\n                                    +codearea('tab2')\n                                div(data-split-pane-divider data-width=\"3px\")\n                                div(data-split-pane-component data-width=\"50%\")\n                                    +codearea('tab3')\n\n                div(data-split-pane-divider data-height=\"3px\")\n\n                div(data-split-pane-component data-height=\"0\")\n                    div(style=\"overflow: hidden; height: 100%; width: 100%;\" ng-click=\"app.tab.active('tab4')\" ng-if=\"app.editor.viewstate\" ng-cloak)\n                        .code-select.bg-dark.d-flex(style=\"margin-top: -2px;\")\n                            a.btn.btn-square.btn-sm.p-2(href=\"\" ng-click=\"event.app.tabchange('tab4', 'debug')\" ng-class=\"configuration.tab.tab4_val == 'debug' ? 'btn-white' : 'btn-dark'\") DEBUG\n                            a.btn.btn-square.btn-dark.btn-sm.p-2.ml-auto(href=\"\" ng-if=\"configuration.tab.tab4_val == 'debug'\" ng-click=\"socket.clear()\") CLEAR\n                            button.btn.btn-square.btn-dark.btn-sm.p-2(ng-click=\"socket.link()\" ng-if=\"configuration.tab.tab4_val == 'debug'\")\n                                i.fas.fa-external-link-square-alt\n                        div(style=\"height: calc(100% - 36px);\")\n                            .debug-messages(ng-if=\"configuration.tab.tab4_val == 'debug'\" style=\"overflow: auto; max-width: none; width: 100%; height: 100%; background: #000; color: #fff; padding: 8px; line-height: 1;\" ng-bind-html=\"trustAsHtml(socket.log)\")\n            \n    #modal-add-language.modal.fade(tabindex=\"-1\")\n        .modal-dialog.modal-sm(role='document')\n            .modal-content\n                .modal-body\n                    .modal-title Add Language\n                    .p-4 \n                        input.form-control(type=\"text\" placeholder=\"ko\" ng-model=\"modal.add_language.lang\" autocomplete='off')\n                .modal-footer\n                    button.btn.btn-link.link-secondary.mr-auto(type='button' data-dismiss='modal') Cancel\n                    button.btn.btn-dark(type='button' ng-click=\"app.editor.code.dic.add(modal.add_language.lang)\") Add\n\n    #modal-delete.modal.fade(tabindex=\"-1\")\n        .modal-dialog.modal-sm(role='document')\n            .modal-content\n                .modal-body\n                    .modal-title Delete\n                    div Once deleted, it cannot be restored. Are you sure you want to delete?\n                .modal-footer\n                    button.btn.btn-link.link-secondary.mr-auto(type='button' data-dismiss='modal') Cancel\n                    button.btn.btn-danger(type='button' ng-click=\"app.delete()\") Delete\n\n    #modal-delete-file.modal.fade(tabindex=\"-1\")\n        .modal-dialog.modal-sm(role='document')\n            .modal-content\n                .modal-body\n                    .modal-title Delete\n                    div Once deleted, it cannot be restored. Are you sure you want to delete?\n                .modal-footer\n                    button.btn.btn-link.link-secondary.mr-auto(type='button' data-dismiss='modal') Cancel\n                    button.btn.btn-danger(type='button' ng-click=\"framework.delete()\") Delete\n\n    #modal-keymaps.modal.fade(tabindex=\"-1\")\n        .modal-dialog(role='document' style=\"max-width: 720px;\")\n            .modal-content\n                .modal-header\n                    .modal-title Shortcuts\n                .modal-body.m-0\n                    table.table.table-bordered.table-hover \n                        thead \n                            th.text-center Shortcut\n                            th.text-center Description\n                        tbody\n                            tr \n                                th.text-center\n                                    button.btn.btn-sm.btn-dark Ctrl(CMD)\n                                    i.fas.fa-plus.ml-1.mr-1\n                                    button.btn.btn-sm.btn-dark S\n                                td.text-center Save\n                            tr \n                                th.text-center\n                                    button.btn.btn-sm.btn-dark Alt\n                                    i.fas.fa-plus.ml-1.mr-1\n                                    button.btn.btn-sm.btn-dark Z, X\n                                td.text-center move previous/next tab\n                             tr \n                                th.text-center\n                                    button.btn.btn-sm.btn-dark Alt\n                                    i.fas.fa-plus.ml-1.mr-1\n                                    button.btn.btn-sm.btn-dark A, S\n                                td.text-center move previous/next code view\n                            tr \n                                th.text-center\n                                    button.btn.btn-sm.btn-dark Alt\n                                    i.fas.fa-plus.ml-1.mr-1\n                                    button.btn.btn-sm.btn-dark 1, 2, 3\n                                td.text-center Panel change (config/widget/framework)\n                            tr \n                                th.text-center\n                                    button.btn.btn-sm.btn-dark Alt\n                                    i.fas.fa-plus.ml-1.mr-1\n                                    button.btn.btn-sm.btn-dark J, K\n                                td.text-center Previous/Next wiz component\n                            tr \n                                th.text-center\n                                    button.btn.btn-sm.btn-dark Alt\n                                    i.fas.fa-plus.ml-1.mr-1\n                                    button.btn.btn-sm.btn-dark F\n                                td.text-center Find Widgets (in widgets tab)\n                            \n                .modal-footer\n                    button.btn.btn-link.link-secondary.ml-auto(type='button' data-dismiss='modal') Cancel\n\n","js":"const IS_DEV = wiz.data.IS_DEV;\nconst BRANCH = wiz.data.BRANCH;\nconst BRANCHES = wiz.data.BRANCHES;\nconst CTRLS = wiz.data.CTRLS;\nconst THEMES = wiz.data.THEMES;\nconst CATEGORIES = wiz.data.CATEGORIES;\nconst APPID = wiz.data.APPID;\n\nconst APPMODE = BRANCH + \".app\";\nconst LOCALSTORAGEID = \"season.wiz.app.configuration\";\nconst APP_URL = \"/wiz/admin/workspace/apps/\";\n// const API_URL = \"/wiz/admin/workspace/apps/api\";\nlet API_URL = wiz.API.url(\"\");\nAPI_URL = API_URL.substring(0, API_URL.length - 1);\n\nconst TABS = ['controller', 'api', 'socketio', 'html', 'js', 'css', 'dic', \"preview\"];\nconst CODELIST = [\n    { id: 'controller', name: 'Controller' },\n    { id: 'api', name: 'API' },\n    { id: 'socketio', name: 'Socket API' },\n    { id: 'html', name: 'HTML' },\n    { id: 'js', name: 'JS' },\n    { id: 'css', name: 'CSS' },\n    { id: 'dic', name: 'Dictionary' },\n    { id: 'preview', name: 'Preview' }\n];\nconst CODETYPES = {\n    html: ['pug', 'html'],\n    js: ['javascript', 'typescript'],\n    css: ['less', 'css', 'scss']\n};\nlet LANGSELECTOR = ($scope) => {\n    return async (tab) => {\n        var obj = $scope.configuration.tab[tab + '_val'];\n        if (obj == 'dic') return 'json';\n        if ($scope.app.data.package.properties[obj])\n            return $scope.app.data.package.properties[obj];\n        return 'python';\n    }\n};\nlet PROPERTY_WATCHER = async ($scope, key) => {\n    for (let targettab in $scope.app.editor.properties) {\n        if ($scope.configuration.tab[targettab + \"_val\"] == key) {\n            await $scope.app.editor.code.change(targettab, key);\n        }\n    }\n};\nlet ADDON = async ($scope) => {\n    $scope.mode = \"app\";\n    $scope.extdata = {};\n    $scope.extdata.controller = CTRLS;\n    $scope.extdata.themes = THEMES;\n    $scope.extdata.categories = CATEGORIES;\n    $scope.extdata.branch = BRANCH;\n    $scope.extdata.branches = BRANCHES;\n}\nlet PREVIEW_URL = async (app_id) => {\n    return APP_URL + \"preview/\" + app_id;\n}\n\nlet wiz_controller = async ($sce, $scope, $timeout) => {\n    _builder($scope, $timeout);\n\n    let hash = location.hash.split(\"#\")[1];\n    if (hash) {\n        let path = location.pathname.split(\"/\");\n        path = path.splice(0, path.length - 1);\n        path.push(hash);\n        path = path.join(\"/\");\n        location.href = path;\n    }\n\n    /*\n     * define variables\n     */\n    let BUILDER = {};\n\n    let API = {\n        handler: (resolve, reject) => async (res) => {\n            if (res.code == 200) resolve(res.data);\n            else reject(res);\n        },\n        search: () => new Promise((resolve) => {\n            let url = API_URL + '/search';\n            $.get(url, function (res) {\n                resolve(res);\n            });\n        }),\n        load: (app_id) => new Promise((resolve) => {\n            let url = API_URL + '/info/' + app_id;\n            $.get(url, function (res) {\n                resolve(res);\n            });\n        }),\n        update: (data) => new Promise((resolve) => {\n            let app_id = data.package.id;\n            let url = API_URL + '/update/' + app_id;\n            $.post(url, { info: JSON.stringify(data) }, function (res) {\n                resolve(res);\n            });\n        }),\n        diff: (app_id, commit) => new Promise((resolve, reject) => {\n            let url = API_URL + '/diff/' + app_id + '/' + commit;\n            $.get(url, function (res) {\n                $.get(url, API.handler(resolve, reject));\n            });\n        }),\n        history: () => new Promise((resolve, reject) => {\n            let url = API_URL + '/history';\n            $.get(url, API.handler(resolve, reject));\n        }),\n        delete: (app_id) => new Promise((resolve) => {\n            let url = API_URL + '/delete/' + app_id;\n            $.get(url, function (res) {\n                resolve(res);\n            });\n        }),\n        clean: () => new Promise((resolve, reject) => {\n            $.get('/wiz/admin/setting/api/config/clean', API.handler(resolve, reject));\n        }),\n        timeout: (ts) => new Promise((resolve) => {\n            $timeout(resolve, ts);\n        })\n    };\n\n    $scope.API = API;\n\n    /*\n     * define variables of scope\n     */\n    $scope.math = Math;\n    $scope.trustAsHtml = $sce.trustAsHtml;\n    $scope.configuration = {};       // state data for maintaining ui\n    $scope.layout = {};              // controller for layout\n    $scope.workspace = {};           // controller for workspace\n    $scope.loading = {};             // controller for display loading\n    $scope.modal = {};               // controller for modal\n    $scope.plugin = {};              // manage plugins for ui components\n    $scope.app = {};                 // controller for code editor\n    $scope.browse = {};              // controller for code editor\n    $scope.shortcut = {};\n    $scope.socket = {};\n    $scope.history = {};\n    $scope.viewer = {};\n\n    /* \n     * load wiz editor options from localstorage\n     */\n    try {\n        let configuration = JSON.parse(localStorage[LOCALSTORAGEID]);\n        try { delete configuration.layout.opts.root.lastComponentSize; } catch (e) { }\n        $scope.configuration = configuration;\n    } catch (e) {\n        $scope.configuration = {};\n        $scope.configuration.tab = {};\n        $scope.configuration.tab['tab1_val'] = TABS[0];\n        $scope.configuration.tab['tab2_val'] = TABS[1];\n        $scope.configuration.tab['tab3_val'] = TABS[2];\n        $scope.configuration.tab['tab4_val'] = 'debug';\n        $scope.configuration.layout = 2;\n        $scope.configuration.layout_menu_width = 360;\n        $scope.configuration.workspace = 0;\n    }\n\n    if (!$scope.configuration.workspace) {\n        $scope.configuration.workspace = 0;\n    }\n\n    $scope.$watch(\"configuration\", function () {\n        let configuration = angular.copy($scope.configuration);\n        localStorage[LOCALSTORAGEID] = JSON.stringify(configuration);\n    }, true);\n\n    /* \n     * layout selector using split pane\n     */\n    BUILDER.layout = async () => {\n        $scope.layout.viewstate = {};\n        $scope.layout.viewstate.root = { firstComponentSize: $scope.configuration.layout_menu_width };\n        $scope.layout.viewstate.horizonal = {};\n        $scope.layout.viewstate.vertical_1_1 = {};\n        $scope.layout.viewstate.vertical_1_2 = {};\n\n        $scope.layout.active_layout = $scope.configuration.layout;\n\n        $scope.$watch(\"layout\", function () {\n            $scope.configuration.layout_menu_width = $scope.layout.viewstate.root.firstComponentSize;\n            $scope.configuration.layout = $scope.layout.active_layout;\n        }, true);\n\n        $scope.layout.change = async (layout) => {\n            $scope.layout.active_layout = layout;\n\n            if (layout == 1) {\n                $scope.layout.accessable_tab = ['tab1'];\n            } else if (layout == 2) {\n                $scope.layout.accessable_tab = ['tab1', 'tab2'];\n            } else if (layout == 3) {\n                $scope.layout.accessable_tab = ['tab1', 'tab2', 'tab3'];\n            } else if (layout == 4) {\n                $scope.layout.accessable_tab = ['tab1'];\n            } else if (layout == 5) {\n                $scope.layout.accessable_tab = ['tab1', 'tab2'];\n            } else if (layout == 6) {\n                $scope.layout.accessable_tab = ['tab1', 'tab2', 'tab3'];\n            }\n\n            let _height = $('#editor-area').height();\n            let _width = $('#editor-area').width();\n\n            function _horizonal_split() {\n                var h = Math.round(_height / 3);\n                if (h > 400) h = 400;\n                $scope.layout.viewstate.horizonal.lastComponentSize = h;\n            }\n\n            function _horizonal_top() {\n                $scope.layout.viewstate.horizonal.lastComponentSize = 0;\n            }\n\n            if (layout == 1) {\n                _horizonal_top();\n                $scope.layout.viewstate.vertical_1_1.lastComponentSize = 0;\n            } else if (layout == 2) {\n                _horizonal_top();\n                $scope.layout.viewstate.vertical_1_1.lastComponentSize = Math.round(_width / 2);\n                $scope.layout.viewstate.vertical_1_2.lastComponentSize = 0;\n            } else if (layout == 3) {\n                _horizonal_top();\n                $scope.layout.viewstate.vertical_1_1.lastComponentSize = Math.round(_width / 3 * 2);\n                $scope.layout.viewstate.vertical_1_2.lastComponentSize = Math.round(_width / 3);\n            } else if (layout == 4) {\n                _horizonal_split();\n                $scope.layout.viewstate.vertical_1_1.firstComponentSize = _width;\n                $scope.layout.viewstate.vertical_1_1.lastComponentSize = 0;\n            } else if (layout == 5) {\n                _horizonal_split();\n                $scope.layout.viewstate.vertical_1_1.firstComponentSize = Math.round(_width / 2);\n                $scope.layout.viewstate.vertical_1_1.lastComponentSize = Math.round(_width / 2);\n                $scope.layout.viewstate.vertical_1_2.firstComponentSize = Math.round(_width / 2);\n                $scope.layout.viewstate.vertical_1_2.lastComponentSize = 0;\n            } else if (layout == 6) {\n                _horizonal_split();\n                $scope.layout.viewstate.vertical_1_1.firstComponentSize = Math.round(_width / 3);\n                $scope.layout.viewstate.vertical_1_1.lastComponentSize = Math.round(_width / 3 * 2);\n                $scope.layout.viewstate.vertical_1_2.firstComponentSize = Math.round(_width / 3);\n                $scope.layout.viewstate.vertical_1_2.lastComponentSize = Math.round(_width / 3);\n            }\n\n            await API.timeout();\n        }\n    }\n\n    /*\n     * define loading\n     */\n    BUILDER.loading = async () => {\n        $scope.loading.status = true;\n        $scope.loading.show = async () => {\n            $scope.loading.status = true;\n            await API.timeout();\n        }\n\n        $scope.loading.hide = async () => {\n            $scope.loading.status = false;\n            await API.timeout();\n        }\n    }\n\n    /*\n     * define modal events\n     */\n\n    BUILDER.modal = async () => {\n        $scope.modal.delete = async () => {\n            $('#modal-delete').modal('show');\n        }\n\n        $scope.modal.add_language = async () => {\n            $('#modal-add-language').modal('show');\n        }\n\n        $scope.modal.keymaps = function () {\n            $('#modal-keymaps').modal('show');\n        }\n    }\n\n    /*\n     * define workspace controller\n     */\n\n    BUILDER.workspace = async () => {\n        $scope.workspace.list = [\n            { id: 'app', name: 'App' },\n            { id: 'browse', name: 'Browse' },\n            { id: 'history', name: 'History' }\n        ];\n\n        $scope.workspace.list[0].active = async () => {\n            $scope.workspace.active_workspace = $scope.workspace.list[0].id;\n            $scope.configuration.workspace = 0;\n            await API.timeout();\n        };\n\n        $scope.workspace.list[1].active = async () => {\n            $scope.workspace.active_workspace = $scope.workspace.list[1].id;\n            $scope.configuration.workspace = 1;\n            await API.timeout();\n        };\n\n        $scope.workspace.list[2].active = async () => {\n            $scope.workspace.active_workspace = $scope.workspace.list[2].id;\n\n            if ($scope.viewer.selected) {\n                await $scope.viewer.load($scope.viewer.selected);\n            }\n\n            await API.timeout();\n        };\n\n        $scope.workspace.active_workspace = $scope.workspace.list[$scope.configuration.workspace].id;\n    }\n\n    /*\n     * define plugin interfaces for wiz\n     */\n\n    BUILDER.plugin = async () => {\n        $scope.plugin.editor = {};\n        $scope.plugin.editor.build = async (targettab, editor) => {\n            let shortcuts = $scope.shortcut.configuration(window.monaco);\n\n            for (let shortcutname in shortcuts) {\n                let monacokey = shortcuts[shortcutname].monaco;\n                let fn = shortcuts[shortcutname].fn;\n                if (!monacokey) continue;\n\n                editor.addCommand(monacokey, async () => {\n                    await fn();\n                    await $scope.shortcut.bind();\n                });\n            }\n        }\n    }\n\n    /*\n     * define app controller\n     */\n\n    BUILDER.app = {};\n\n    BUILDER.app.base = async () => {\n        $scope.app.save = async (returnres) => {\n            if ($scope.app.data.controller) $scope.app.data.controller = $scope.app.data.controller.replace(/\\t/gim, '    ');\n            let appdata = angular.copy($scope.app.data);\n            try {\n                for (let key in appdata.dic) {\n                    if (appdata.dic[key] && appdata.dic[key].length > 0) {\n                        appdata.dic[key] = JSON.parse(appdata.dic[key]);\n                    } else {\n                        delete data.dic[key];\n                    }\n                }\n            } catch (e) {\n                if (!returnres)\n                    toastr.error(\"Dictionary syntax error\");\n                return { code: 500, data: e };\n            }\n\n            try {\n                $scope.browse.item.package.title = appdata.package.title;\n                $scope.browse.item.package.namespace = appdata.package.namespace;\n            } catch (e) {\n            }\n\n            if (!appdata.package.controller) {\n                delete appdata.package.controller;\n            }\n\n            if (!appdata.package.theme) {\n                delete appdata.package.theme;\n            }\n\n            let res = await API.update(appdata);\n\n            if (returnres) return res;\n\n            if (res.code == 200) {\n                toastr.success(\"Saved\");\n                await $scope.app.preview();\n            } else {\n                toastr.error(res.data);\n            }\n\n            await $scope.shortcut.bind();\n        }\n\n        $scope.app.tab = {};\n        $scope.app.tab.active = async (tab) => {\n            $scope.app.tab.activetab = tab;\n            await API.timeout();\n        }\n\n        $scope.app.delete = async () => {\n            let app_id = $scope.app.id;\n            await API.delete(app_id);\n            await $scope.browse.load();\n            if ($scope.browse.data[0]) {\n                app_id = $scope.browse.data[0].package.id;\n                location.href = APP_URL + \"editor/\" + app_id;\n            } else {\n                location.href = APP_URL;\n            }\n        }\n\n        $scope.app.clean = async () => {\n            let app_id = $scope.app.id;\n            await API.clean(app_id);\n            $scope.app.preview();\n        }\n\n        $scope.app.load = async (app_id) => {\n            // show loading\n            await $scope.loading.show();\n\n            // load data\n            let res = await API.load(app_id);\n            $scope.app.id = app_id;  // current appid\n            $scope.app.data = res.data;\n            for (let key in $scope.app.data.dic) {\n                $scope.app.data.dic[key] = JSON.stringify($scope.app.data.dic[key], null, 4);\n            }\n\n            await $scope.app.editor.build();\n            await $scope.layout.change($scope.layout.active_layout);\n            await $scope.loading.hide();\n            await $scope.app.preview();\n\n            await API.timeout(500);\n\n            if ($scope.app.tab.activetab && $scope.app.editor.cache[$scope.app.tab.activetab])\n                $scope.app.editor.cache[$scope.app.tab.activetab].focus();\n\n            if ($scope.app.data.package.properties) {\n                for (let key in $scope.app.data.package.properties) {\n                    $scope.$watch('app.data.package.properties.' + key, async (a, b) => {\n                        if (a == b) return;\n                        await PROPERTY_WATCHER($scope, key);\n                    });\n                }\n            }\n\n            location.href = location.pathname + \"#\" + app_id;\n        }\n\n        $scope.app.preview = async () => {\n            let url = $scope.app.data.package.viewuri;\n            if (!$scope.app.data.package.viewuri) {\n                url = await PREVIEW_URL($scope.app.id);\n            }\n\n            if (!url) {\n                return;\n            }\n\n            $scope.app.preview.status = false;\n            await API.timeout();\n\n            $('iframe.preview').attr('src', url);\n            $('iframe.preview').on('load', function () {\n                $scope.app.preview.status = true;\n                $timeout();\n            });\n        }\n    }\n\n    BUILDER.app.editor = async () => {\n        $scope.app.editor = {};\n        $scope.app.editor.cache = {};\n        $scope.app.editor.properties = {};\n        $scope.app.editor.codetypes = CODETYPES;\n        $scope.app.editor.code = {};\n\n        $scope.app.editor.code.list = CODELIST;\n\n        $scope.app.editor.code.dic = {};\n        $scope.app.editor.code.dic.add = async (lang) => {\n            if (!lang || lang.length < 2) {\n                toastr.error(\"at least 2 char\");\n                return;\n            }\n            lang = lang.toLowerCase();\n            $scope.app.data.dic[lang] = \"{}\";\n            $('#modal-add-language').modal('hide');\n            await API.timeout();\n        }\n\n        $scope.app.editor.code.langselect = LANGSELECTOR($scope);\n\n        $scope.app.editor.code.change = async (targettab, view) => {\n            if (view) {\n                $scope.configuration.tab[targettab + '_val'] = view;\n                await API.timeout();\n\n                if (view == 'preview') {\n                    $scope.app.preview();\n                    return;\n                }\n\n                if (view == 'debug') {\n                    return;\n                };\n\n                let language = $scope.app.editor.properties[targettab].language = await $scope.app.editor.code.langselect(targettab);\n\n                if ($scope.app.editor.cache[targettab]) {\n                    let model = $scope.app.editor.cache[targettab].getModel();\n                    monaco.editor.setModelLanguage(model, language);\n\n                    $scope.app.editor.cache[targettab].focus();\n                }\n            } else {\n                if ($scope.app.tab.activetab != targettab) {\n                    $scope.app.tab.activetab = targettab;\n                    await API.timeout();\n                    await API.timeout(500);\n                    $scope.app.editor.cache[targettab].focus();\n                }\n            }\n        }\n\n        $scope.app.editor.code.prev = async () => {\n            if (!$scope.layout.accessable_tab) return;\n            let tab = 'tab1';\n            if ($scope.app.tab.activetab) tab = $scope.app.tab.activetab;\n\n            tab = $scope.layout.accessable_tab.indexOf(tab) - 1;\n            if (tab < 0) tab = $scope.layout.accessable_tab.length - 1;\n            tab = $scope.layout.accessable_tab[tab];\n            let view = $scope.configuration.tab[tab + '_val']\n\n            while (view == 'preview') {\n                tab = $scope.layout.accessable_tab.indexOf(tab) - 1;\n                if (tab < 0) tab = $scope.layout.accessable_tab.length - 1;\n                tab = $scope.layout.accessable_tab[tab];\n                view = $scope.configuration.tab[tab + '_val']\n            }\n\n            $scope.app.editor.code.change(tab);\n            $scope.app.editor.cache[tab].focus();\n        }\n\n        $scope.app.editor.code.next = async () => {\n            if (!$scope.layout.accessable_tab) return;\n            let tab = 'tab1';\n            if ($scope.app.tab.activetab) tab = $scope.app.tab.activetab;\n\n            tab = $scope.layout.accessable_tab.indexOf(tab) + 1;\n            tab = tab % $scope.layout.accessable_tab.length;\n            tab = $scope.layout.accessable_tab[tab];\n            let view = $scope.configuration.tab[tab + '_val']\n\n            while (view == 'preview') {\n                tab = $scope.layout.accessable_tab.indexOf(tab) + 1;\n                tab = tab % $scope.layout.accessable_tab.length;\n                tab = $scope.layout.accessable_tab[tab];\n                view = $scope.configuration.tab[tab + '_val']\n            }\n\n            $scope.app.editor.code.change(tab);\n            $scope.app.editor.cache[tab].focus();\n        }\n\n        $scope.app.editor.build = async () => {\n            $scope.app.editor.viewstate = false;\n            await API.timeout();\n\n            $scope.app.editor.properties.tab1 = $scope.monaco(await $scope.app.editor.code.langselect('tab1'));\n            $scope.app.editor.properties.tab2 = $scope.monaco(await $scope.app.editor.code.langselect('tab2'));\n            $scope.app.editor.properties.tab3 = $scope.monaco(await $scope.app.editor.code.langselect('tab3'));\n\n            let bindonload = async (targettab) => {\n                $scope.app.editor.properties[targettab].onLoad = async (editor) => {\n                    await $scope.plugin.editor.build(targettab, editor);\n                    $scope.app.editor.cache[targettab] = editor;\n                }\n            }\n\n            for (var i = 1; i <= 3; i++)\n                bindonload('tab' + i);\n\n            $scope.app.editor.viewstate = true;\n            await API.timeout();\n        }\n\n        $scope.app.branch = {};\n        $scope.app.branch.change = async (branchname) => {\n            let path = location.pathname.split(\"/\");\n            path = path.splice(0, path.length - 1);\n            path.push($scope.app.id);\n            path = path.join(\"/\") + \"?branch=\" + branchname;\n            location.href = path;\n        }\n    }\n\n    BUILDER.browse = async () => {\n        $scope.browse.load = async () => {\n            let res = await API.search();\n            $scope.browse.data = res.data;\n            $scope.browse.cache = [];\n\n            for (var i = 0; i < $scope.browse.data.length; i++) {\n                $scope.browse.cache.push($scope.browse.data[i].package.id);\n                if ($scope.browse.data[i].package.id == $scope.app.id) {\n                    $scope.browse.item = $scope.browse.data[i];\n                }\n            }\n\n            await API.timeout();\n        }\n\n        $scope.browse.select = async (item) => {\n            $scope.browse.item = item;\n            await $scope.app.load(item.package.id);\n        }\n\n        $scope.browse.search = async (val) => {\n            val = val.toLowerCase();\n            for (var i = 0; i < $scope.browse.data.length; i++) {\n                let searchindex = ['title', 'namespace', 'id', 'route'];\n                $scope.browse.data[i].hide = true;\n                for (let j = 0; j < searchindex.length; j++) {\n                    try {\n                        let key = searchindex[j];\n                        let keyv = $scope.browse.data[i].package[key].toLowerCase();\n                        if (keyv.includes(val)) {\n                            $scope.browse.data[i].hide = false;\n                            break;\n                        }\n                    } catch (e) {\n                    }\n                }\n                if (val.length == 0)\n                    $scope.browse.data[i].hide = false;\n            }\n\n            await API.timeout();\n        }\n\n        $scope.browse.next = async () => {\n            let current = $scope.browse.cache.indexOf($scope.app.id);\n            current = current + 1;\n            current = current % $scope.browse.data.length;\n            $scope.browse.select($scope.browse.data[current]);\n        }\n\n        $scope.browse.prev = async () => {\n            let current = $scope.browse.cache.indexOf($scope.app.id);\n            current = current - 1;\n            if (current < 0)\n                current = $scope.browse.data.length - 1;\n            $scope.browse.select($scope.browse.data[current]);\n        }\n    }\n\n\n    BUILDER.history = async () => {\n        $scope.history.load = async () => {\n            $scope.history.data = await API.history();\n            await API.timeout();\n        }\n\n        $scope.history.change = async (item) => {\n            await $scope.viewer.load(item.id);\n        }\n    };\n\n    BUILDER.viewer = async () => {\n        $scope.viewer.editor = {};\n        $scope.viewer.editor.data = {};\n\n        $scope.viewer.editor.configuration = { enableSplitViewResizing: false, fontSize: 14, readOnly: false, originalEditable: false };\n        $scope.viewer.editor.configuration.onLoad = async (editor) => {\n            await $scope.plugin.editor.build(null, editor);\n        }\n\n        $scope.viewer.load = async (commit) => {\n            await $scope.loading.show();\n            let app_id = $scope.app.id;\n            let compare = await API.diff(app_id, commit);\n\n            $scope.viewer.codes = TABS;\n            $scope.viewer.selected = commit;\n            $scope.viewer.compared = compare;\n\n            await $scope.viewer.change('controller');\n        }\n\n        $scope.viewer.change = async (code) => {\n            $scope.viewer.code = code;\n\n            let next = angular.copy($scope.app.data);\n            let prev = angular.copy($scope.viewer.compared);\n\n            for (let key in next.dic)\n                next.dic[key] = JSON.parse(next.dic[key]);\n            next.dic = JSON.stringify(next.dic, null, 4);\n\n            try {\n                next.language = \"json\";\n                if (['controller', 'api', 'socketio'].includes(code)) next.language = \"python\";\n                if (next.package.properties)\n                    if (next.package.properties[code])\n                        next.language = next.package.properties[code];\n            } catch (e) {\n                next.language = \"text\";\n                next[code] = \"\";\n            }\n\n            try {\n                prev.language = \"json\";\n                if (['controller', 'api', 'socketio'].includes(code)) prev.language = \"python\";\n                if ($scope.viewer.mode == 'app') if (prev.properties[code]) prev.language = prev.properties[code];\n                if (prev.language == 'json') prev.code[code] = JSON.stringify(JSON.parse(prev.code[code]), null, 4);\n            } catch (e) {\n                prev.language = \"text\";\n                prev.code[code] = \"\";\n            }\n\n            $scope.viewer.editor.data = {\n                compare: {\n                    code: prev.code[code],\n                    language: prev.language\n                },\n                main: {\n                    code: next[code],\n                    language: next.language\n                }\n            }\n\n            await $scope.loading.hide();\n            await API.timeout();\n        }\n\n        $scope.$watch('viewer.editor.data', function () {\n            let code = $scope.viewer.code;\n            if (!code) return;\n            let codedata = $scope.viewer.editor.data.main.code;\n            if (code == 'dic') {\n                try {\n                    codedata = JSON.parse(codedata);\n                    for (let key in codedata) {\n                        codedata[key] = JSON.stringify(codedata[key], null, 4);\n                    }\n                } catch (e) {\n                    return;\n                }\n            }\n\n            if (codedata != $scope.app.data[code])\n                $scope.app.data[code] = codedata;\n        }, true);\n    };\n\n    BUILDER.shortcuts = async () => {\n        $scope.shortcut.configuration = (monaco) => {\n            return {\n                'tab1': {\n                    key: 'Alt Digit1',\n                    monaco: monaco.KeyMod.Alt | monaco.KeyCode.DIGIT1,\n                    fn: async () => {\n                        await $scope.workspace.list[0].active();\n                    }\n                },\n                'tab2': {\n                    key: 'Alt Digit2',\n                    monaco: monaco.KeyMod.Alt | monaco.KeyCode.DIGIT2,\n                    fn: async () => {\n                        await $scope.workspace.list[1].active();\n                    }\n                },\n                'tab3': {\n                    key: 'Alt Digit3',\n                    monaco: monaco.KeyMod.Alt | monaco.KeyCode.DIGIT3,\n                    fn: async () => {\n                        await $scope.workspace.list[2].active();\n                    }\n                },\n                'editor_prev': {\n                    monaco: monaco.KeyMod.Alt | monaco.KeyCode.KEY_A,\n                    fn: async () => {\n                        let targettab = $scope.app.tab.activetab;\n                        var prev = TABS.indexOf($scope.configuration.tab[targettab + \"_val\"]) - 1;\n                        if (prev < 0) prev = TABS[TABS.length - 1];\n                        else prev = TABS[prev];\n\n                        if (prev == 'preview') {\n                            prev = TABS.indexOf(prev) - 1;\n                            if (prev < 0) prev = TABS[TABS.length - 1];\n                            else prev = TABS[prev];\n                        }\n\n                        await $scope.app.editor.code.change(targettab, prev);\n                        await $scope.shortcut.bind();\n                    }\n                },\n                'editor_next': {\n                    monaco: monaco.KeyMod.Alt | monaco.KeyCode.KEY_S,\n                    fn: async () => {\n                        let targettab = $scope.app.tab.activetab;\n                        var next = TABS[(TABS.indexOf($scope.configuration.tab[targettab + \"_val\"]) + 1) % TABS.length];\n                        if (next == 'preview') {\n                            next = TABS[(TABS.indexOf(next) + 1) % TABS.length];\n                        }\n                        await $scope.app.editor.code.change(targettab, next);\n                        await $scope.shortcut.bind();\n                    }\n                },\n                'app_prev': {\n                    key: 'Alt KeyJ',\n                    monaco: monaco.KeyMod.Alt | monaco.KeyCode.KEY_J,\n                    fn: async () => {\n                        $(window).focus();\n                        await $scope.browse.prev();\n                    }\n                },\n                'app_next': {\n                    key: 'Alt KeyK',\n                    monaco: monaco.KeyMod.Alt | monaco.KeyCode.KEY_K,\n                    fn: async () => {\n                        $(window).focus();\n                        await $scope.browse.next();\n                    }\n                },\n                'workspace_prev': {\n                    key: 'Alt KeyZ',\n                    monaco: monaco.KeyMod.Alt | monaco.KeyCode.KEY_Z,\n                    fn: async () => {\n                        await $scope.app.editor.code.prev();\n                    }\n                },\n                'workspace_next': {\n                    key: 'Alt KeyX',\n                    monaco: monaco.KeyMod.Alt | monaco.KeyCode.KEY_X,\n                    fn: async () => {\n                        await $scope.app.editor.code.next();\n                    }\n                },\n                'search': {\n                    key: 'Alt KeyF',\n                    monaco: monaco.KeyMod.Alt | monaco.KeyCode.KEY_F,\n                    fn: async () => {\n                        await $scope.workspace.list[1].active();\n                        $('#search').focus();\n                    }\n                },\n                'save': {\n                    key: 'Ctrl KeyS',\n                    monaco: monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_S,\n                    fn: async () => {\n                        await $scope.app.save();\n                    }\n                },\n                'clear': {\n                    key: 'Ctrl KeyK',\n                    monaco: monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_K,\n                    fn: async () => {\n                        await $scope.socket.clear();\n                    }\n                }\n            }\n        };\n\n        $scope.shortcut.bind = async () => {\n            if (!window.monaco) return;\n            $(window).unbind();\n\n            let shortcut_opts = {};\n            let shortcuts = $scope.shortcut.configuration(window.monaco);\n            for (let key in shortcuts) {\n                let keycode = shortcuts[key].key;\n                let fn = shortcuts[key].fn;\n                if (!keycode) continue;\n                shortcut_opts[keycode] = async (ev) => {\n                    ev.preventDefault();\n                    await fn();\n                };\n            }\n\n            shortcutjs(window, shortcut_opts);\n        }\n\n        window.addEventListener(\"focus\", $scope.shortcut.bind, false);\n    }\n\n    await BUILDER.loading();\n    await BUILDER.layout();\n    await BUILDER.plugin();\n    await BUILDER.modal();\n    await BUILDER.workspace();\n    await BUILDER.app.base();\n    await BUILDER.app.editor();\n    await BUILDER.browse();\n    await BUILDER.history();\n    await BUILDER.viewer();\n    await BUILDER.shortcuts();\n\n    let init = async () => {\n        await ADDON($scope);\n        await $scope.browse.load();\n        await $scope.history.load();\n        await $scope.app.load(APPID);\n\n        $scope.import_file = function () {\n            $('#import-file').click();\n        }\n\n        $('#import-file').change(async () => {\n            let fr = new FileReader();\n            fr.onload = async () => {\n                let data = fr.result;\n                data = JSON.parse(data);\n\n                for (let key in data.dic) {\n                    data.dic[key] = JSON.stringify(data.dic[key]);\n                }\n\n                $scope.app.data.api = data.api;\n                $scope.app.data.controller = data.controller;\n                $scope.app.data.css = data.css;\n                $scope.app.data.dic = data.dic;\n                $scope.app.data.html = data.html;\n                $scope.app.data.js = data.js;\n                $scope.app.data.socketio = data.socketio;\n                $scope.app.data.package.namespace = data.package.namespace;\n                $scope.app.data.package.properties = data.package.properties;\n                $scope.app.data.package.title = data.package.title;\n                $scope.app.data.package.viewuri = data.package.viewuri;\n                $scope.app.data.package.theme = data.package.theme;\n                $scope.app.data.package.controller = data.package.controller;\n                $scope.app.data.package.category = data.package.category;\n\n                await $timeout();\n            };\n            fr.readAsText($('#import-file').prop('files')[0]);\n        });\n\n        /*\n         * socket.io event binding for trace log\n         */\n        let ansi_up = new AnsiUp();\n        let socket = io(\"/wiz\");\n\n        $scope.socket.log = \"\";\n        $scope.socket.clear = async () => {\n            $scope.socket.log = \"\";\n            await API.timeout();\n        }\n\n        $scope.socket.link = async () => {\n            let layout = $scope.configuration.layout;\n            await $scope.layout.change(layout - 3);\n            window.open(\"/wiz/admin/workspace/logger\", '_blank');\n        }\n\n        socket.on(\"connect\", function (data) {\n            if (!data) return;\n            $scope.socket.id = data.sid;\n        });\n\n        socket.on(\"log\", function (data) {\n            data = data.replace(/ /gim, \"__SEASONWIZPADDING__\");\n            data = ansi_up.ansi_to_html(data).replace(/\\n/gim, '<br>').replace(/__SEASONWIZPADDING__/gim, '<div style=\"width: 6px; display: inline-block;\"></div>');\n            $scope.socket.log = $scope.socket.log + data;\n            $timeout(function () {\n                var element = $('.debug-messages')[0];\n                if (!element) return;\n                element.scrollTop = element.scrollHeight - element.clientHeight;\n            });\n        });\n\n        socket.on(\"message\", function (data) {\n            if (data.type == \"status\") {\n                $scope.socket.users = data.users;\n                $timeout();\n            }\n        });\n\n        $scope.$watch(\"configuration\", async () => {\n            let layout = $scope.configuration.layout;\n            if (layout < 4) {\n                socket.emit(\"leave\", { id: BRANCH });\n            } else {\n                socket.emit(\"join\", { id: BRANCH });\n            }\n        }, true);\n    }\n\n    init();\n}","api":"import os\nimport season\nimport json\n\nwiz = framework.model(\"wiz\")\n\ndef search(framework):\n    rows = wiz.data.rows(mode='app')\n    framework.response.status(200, rows)\n\ndef info(framework):\n    app_id = framework.request.segment.get(0, True)\n    info = wiz.data.get(app_id, mode='app')\n    if info is None:\n        framework.response.status(404)\n    framework.response.status(200, info)\n\ndef update(framework):\n    info = framework.request.query(\"info\", True)\n    info = json.loads(info)\n    wiz.data.update(info, mode='app')\n    framework.response.status(200)\n\ndef delete(framework):\n    app_id = framework.request.segment.get(0, True)\n    wiz.data.delete(app_id, mode='app')\n    framework.response.status(200)\n\ndef history(framework):\n    commits = wiz.workspace.commits(branch=None, max_count=100)\n    framework.response.status(200, commits)\n\ndef diff(framework):\n    app_id = framework.request.segment.get(0, True)\n    commit = framework.request.segment.get(1, True)\n    filepath = f'apps/{app_id}'\n\n    def load_app_files(key):\n        try:\n            appfile = os.path.join(filepath, key)\n            text = wiz.workspace.file(appfile, branch=None, commit=commit)\n            return text\n        except:\n            return \"\"\n\n    appinfo = dict()\n    appinfo = os.path.join(filepath, 'app.json')\n    appinfo = wiz.workspace.file(appinfo, branch=None, commit=commit)\n    appinfo_txt = appinfo\n    appinfo = json.loads(appinfo)\n    appinfo['info'] = appinfo_txt\n    appinfo['code'] = dict()\n    appinfo['code'][\"controller\"] = load_app_files(\"controller.py\")\n    appinfo['code'][\"dic\"] = load_app_files(\"dic.json\")\n    appinfo['code'][\"api\"] = load_app_files(\"api.py\")\n    appinfo['code'][\"socketio\"] = load_app_files(\"socketio.py\")\n    appinfo['code'][\"html\"] = load_app_files(\"html.dat\")\n    appinfo['code'][\"js\"] = load_app_files(\"js.dat\")\n    appinfo['code'][\"css\"] = load_app_files(\"css.dat\")\n\n    framework.response.status(200, appinfo)","css":"@media (min-width:769px) {\n    html, body {\n        overflow: hidden;\n    }\n    .panel-layout {\n        padding-top: 64px;\n    }\n    .panel-layout .panel-menu {\n        position: fixed;\n        width: 360px;\n        height: 100%;\n        top: 0;\n        left: 0;\n        padding-top: 64px;\n        overflow: auto;\n        z-index: 1001;\n    }\n    .panel-layout .panel-submenu {\n        position: fixed;\n        width: 0;\n        height: 100%;\n        top: 0;\n        left: 360px;\n        padding-top: 64px;\n        overflow: auto;\n        z-index: 1001;\n    }\n    .panel-layout .panel-context {\n        padding-left: 360px;\n        height: 100%;\n    }\n    .fixed-top#top-nav .container-xl {\n        max-width: none;\n    }\n    /* side menu off */\n    .sidemenu-off .panel-menu {\n        width: 76px;\n    }\n    .sidemenu-off .panel-menu .menu-layout {\n        padding: 0 !important;\n    }\n    .sidemenu-off .panel-menu h3 {\n        text-align: center;\n    }\n    .sidemenu-off .panel-menu h3 i {\n        padding: 16px !important;\n    }\n    .sidemenu-off .panel-menu .minify {\n        display: none;\n    }\n    .sidemenu-off .panel-menu .layout-selector {\n        padding: 4px !important;\n    }\n    .sidemenu-off .button-container {\n        padding: 0 8px;\n    }\n    .sidemenu-off .panel-context {\n        padding-left: 76px;\n        height: 100%;\n    }\n}\n\n.layout-icon {\n    display: inline-table;\n    width: 60px;\n    height: 60px;\n    border: 2px solid #ffffff;\n    border-radius: 10%;\n}\n\n.layout-icon .layout-row, .layout-icon .layout-column {\n    height: 60px;\n}\n\n.layout-icon.rows-2 .layout-row, .layout-icon.rows-2 .layout-column {\n    height: 30px;\n}\n\n.layout-icon .layout-row {\n    display: table-row;\n}\n\n.layout-icon .layout-row .layout-column {\n    border-bottom: 2px solid #ffffff;\n}\n\n.layout-icon .layout-row:last-child .layout-column {\n    border-bottom-color: transparent;\n}\n\n.layout-icon .layout-column {\n    display: table-cell;\n    border-right: 2px solid #ffffff;\n}\n\n.layout-icon .layout-column:last-child {\n    border-right-color: transparent;\n}\n\n.layout-selector {\n    display: inline-block;\n    line-height: 0;\n    border-radius: 10%;\n    cursor: pointer;\n}\n\n.layout-selector:hover, .layout-selector.active {\n    background: #ffffff;\n}\n\n.layout-selector:hover .layout-icon, .layout-selector.active .layout-icon {\n    border-color: #354052;\n}\n\n.layout-selector:hover .layout-icon .layout-row, .layout-selector.active .layout-icon .layout-row {\n    display: table-row;\n}\n\n.layout-selector:hover .layout-icon .layout-row .layout-column, .layout-selector.active .layout-icon .layout-row .layout-column {\n    border-bottom: 2px solid #354052;\n}\n\n.layout-selector:hover .layout-icon .layout-row:last-child .layout-column, .layout-selector.active .layout-icon .layout-row:last-child .layout-column {\n    border-bottom-color: transparent;\n}\n\n.layout-selector:hover .layout-icon .layout-column, .layout-selector.active .layout-icon .layout-column {\n    display: table-cell;\n    border-right: 2px solid #354052;\n}\n\n.layout-selector:hover .layout-icon .layout-column:last-child, .layout-selector.active .layout-icon .layout-column:last-child {\n    border-right-color: transparent;\n}\n\n.code-tabs tr, .code-tabs td {\n    border: none;\n    padding: 0;\n}\n\n.fixed-top#top-nav .container-xl {\n    max-width: none;\n}\n\n.code-table {\n    table-layout: fixed;\n}\n\n.code-table td {\n    /* border-right: 1px solid rgba(110, 117, 130, .2); */\n}\n\n.code-table td.gutter {\n    width: 1px;\n    background: rgba(110, 117, 130, .2);\n    cursor: col-resize;\n}\n\n.code-table tr.gutter {\n    width: 1px;\n    background: rgba(110, 117, 130, .2);\n    cursor: row-resize;\n}\n\n.code-table .code-tr td {\n    height: calc(50vh - 104px + 54px - 15px);\n    overflow: hidden;\n    vertical-align: top;\n}\n\n.code-table .code-tr td .code-input {\n    height: calc(50vh - 104px + 54px - 16px);\n    overflow: hidden;\n}\n\n.code-table .code-tr td .code-input .CodeMirror {\n    height: calc(50vh - 104px + 54px - 16px);\n    display: block;\n}\n\n.h-full .code-table .code-tr td {\n    height: calc(100vh - 183px + 84px) !important;\n}\n\n.h-full .code-table .code-tr td .code-input {\n    max-height: calc(100vh - 183px + 84px) !important;\n}\n\n.h-full .code-table .code-tr td .code-input .CodeMirror {\n    height: calc(100vh - 183px + 84px) !important;\n}\n\n.panel-context {\n    overflow: hidden !important;\n}\n\n.unselectable * {\n    -moz-user-select: -moz-none;\n    -khtml-user-select: none;\n    -webkit-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n}\n\n.code-tabs td {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\nhtml, body {\n    height: 100%;\n    min-height: 100%;\n    margin: 0;\n    padding: 0;\n}\n\nbody {\n    padding-top: 64px;\n}\n\n.split-pane-divider {\n    background: #aaa;\n}\n\n.split-pane-component {\n    background: #fff;\n}\n\n.btn-group button {\n    box-shadow: none;\n}\n\n.tree-container {\n    color: #fff;\n    font-size: 16px;\n}\n\n.tree-container .root-title {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    cursor: pointer;\n}\n\n.tree-container .root-tree.active {\n    background: rgba(255, 255, 255, .1);\n    border-radius: 4px;\n}\n\n\n.tree-container .sub .sub-title {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    margin-left: 16px;\n    padding-left: 8px;\n    margin-bottom: 4px;\n    white-space: nowrap;\n    cursor: pointer;\n}\n\n.tree-container .sub .sub-title.active {\n    background: #fff !important;\n    color: rgb(110, 117, 130);\n}\n\n.tree-container .sub .sub-title:hover {\n    background: rgba(255, 255, 255, .1);\n}\n\n.tree-container .root-title:hover {\n    background: rgba(255, 255, 255, .1);\n}\n\nth.text-center {\n    white-space: nowrap;\n}\n\n.tree-container span.namespace {\n    font-size: 14px;\n    color: rgba(255, 255, 255, .6);\n}\n\n.tree-container .sub .sub-title.active span.namespace {\n    color: rgba(0, 0, 0, .6);\n}\n\n"},{"dic":{"default":{}},"id":"core.workspace.apps.list","name":"/apps/list","compile":"controller","api":"def search(framework):\n    wiz = framework.model(\"wiz\")\n    rows = wiz.data.rows(mode='app')\n    framework.response.status(200, rows)","js":"let wiz_controller = async ($sce, $scope, $timeout) => {\n    $scope.hash = location.hash.split(\"#\")[1];\n    if (!$scope.hash) $scope.hash = '';\n\n    let timeout = (ts) => new Promise((resolve) => {\n        $timeout(resolve, ts);\n    });\n\n    $scope.math = Math;\n\n    $scope.datedisplay = function (date) {\n        let targetdate = moment(date);\n        let diff = new Date().getTime() - new Date(targetdate).getTime();\n        diff =  diff / 1000 / 60 / 60;\n        \n        if (diff > 24)  return targetdate.format(\"YYYY-MM-DD hh:mm\");\n        if (diff > 1) return Math.floor(diff) + \" hours ago\"\n\n        diff = diff * 60;\n\n        if (diff < 2) return \"just now\";\n\n        return Math.floor(diff) + \" minutes ago\";\n    }\n\n    $scope.list = [];\n    $scope.facet = {};\n    $scope.facet.category = {};\n    $scope.event = {};\n    $scope.categoires = wiz.data.CATEGORIES;\n\n    $scope.event.category = async (hash) => {\n        location.href = location.href.split(\"#\")[0] + \"#\" + hash;\n        $scope.hash = hash;\n\n        for (var i = 0; i < $scope.list.length; i++) {\n            let searchindex = ['category'];\n            $scope.list[i].hide = true;\n            for (let j = 0; j < searchindex.length; j++) {\n                try {\n                    let key = searchindex[j];\n                    let keyv = $scope.list[i].package[key].toLowerCase();\n                    if (keyv == hash) {\n                        $scope.list[i].hide = false;\n                        break;\n                    }\n                } catch (e) {\n                }\n            }\n            if (hash.length == 0)\n                $scope.list[i].hide = false;\n        }\n\n        await timeout();\n    }\n\n    $scope.event.load = async () => {\n        let res = await wiz.API.async(\"search\");\n\n        if (res.code != 200) {\n            return\n        }\n\n        $scope.list = res.data;\n\n        for (let i = 0; i < $scope.list.length; i++) {\n            let category = $scope.list[i].package.category;\n            if (!$scope.facet.category[category]) $scope.facet.category[category] = 0;\n            $scope.facet.category[category]++;\n        }\n        $scope.facet.count = $scope.list.length;\n\n        $scope.list.sort((a, b) => {\n            let comp = 0;\n            comp = a.package.namespace.localeCompare(b.package.namespace);\n            return comp;\n        });\n\n        $scope.list.sort((a, b)=> {\n            return new Date(b.package.updated).getTime() - new Date(a.package.updated).getTime()\n        });\n\n        await timeout();\n    }\n\n    $scope.event.search = async (val) => {\n        val = val.toLowerCase();\n        for (var i = 0; i < $scope.list.length; i++) {\n            let searchindex = ['title', 'namespace', 'route'];\n            $scope.list[i].hide = true;\n            for (let j = 0; j < searchindex.length; j++) {\n                try {\n                    let key = searchindex[j];\n                    let keyv = $scope.list[i].package[key].toLowerCase();\n                    if (keyv.includes(val)) {\n                        $scope.list[i].hide = false;\n                        break;\n                    }\n                } catch (e) {\n                }\n            }\n            if (val.length == 0)\n                $scope.list[i].hide = false;\n        }\n\n        $timeout();\n    }\n\n    await $scope.event.load();\n    await $scope.event.category($scope.hash);\n};","html":".container.pt-4.pb-4\n    .page-header\n        .row.align-items-center\n            .col-auto\n                .page-pretitle SEASON WIZ\n                h2.page-title Apps\n\n            .col-auto.ml-auto.d-print-none\n                .d-flex\n                    input.form-control(type=\"text\" placeholder=\"Search...\" ng-model=\"search.text\" ng-change=\"event.search(search.text)\" style=\"width: 240px;\")\n                    a.btn.btn-light.pr-4.pl-4.ml-2(href='/wiz/admin/workspace/apps/editor/new' style=\"width: 140px;\")\n                        i.mr-2.fas.fa-plus\n                        | Create\n\n    .row\n        .col-md-3\n            .list-group.list-group-transparent.mb-3\n                a.list-group-item.list-group-item-action.d-flex.align-items-center.cursor-pointer(class=\"{{'' == hash ? 'active' : ''}}\" ng-click=\"event.category('')\")\n                    | All Apps\n                    small.text-muted.ml-auto {{facet.count}}\n\n                a.list-group-item.list-group-item-action.d-flex.align-items-center.cursor-pointer(ng-click=\"event.category(category.id)\" class=\"{{category.id == hash ? 'active' : ''}}\" ng-repeat=\"category in categoires\")\n                    | {{category.title}}\n                    small.text-muted.ml-auto {{facet.category[category.id] ? facet.category[category.id] : '0'}}\n\n        .col-md-9.pl-4\n            .overflow-x\n                table.table.board-table.table-hover.mb-0\n                    thead\n                        tr\n                            th.text-left.width-1.pr-2.pl-2 Namespace\n                            th.text-left.pr-2.pl-2 Title\n                            th.text-left.width-1.pr-2.pl-2 Category\n                            th.text-center.width-2.pr-2.pl-2 Updated\n\n                    tbody\n                        tr(ng-if=\"list.length == 0\")\n                            td.text-center(colspan=4) App is not finded. create App.\n\n                        tr(ng-repeat=\"item in list\" ng-if=\"!item.hide\")\n                            td.width-1.pr-2.pl-2\n                                a(ng-href=\"/wiz/admin/workspace/apps/editor/{{item.package.id}}\") {{item.package.namespace ? item.package.namespace : item.package.id.substring(0,8)}}\n                            td\n                                a(ng-href=\"/wiz/admin/workspace/apps/editor/{{item.package.id}}\") {{item.package.title}}\n                            td.text-left.width-1.pr-2.pl-2 {{item.package.category}}\n                            td.text-right.width-2.pr-2.pl-2 {{datedisplay(item.package.updated)}}","css":".main-header {\n    .container {\n        margin: 0 auto;\n        max-width: 720px;\n        padding-top: 88px;\n        padding-bottom: 96px;\n        color: white;\n    }\n\n    .subtitle {\n        font-size: 24px;\n        color: rgba(255, 255, 255, .6);\n    }\n\n    .title {\n        font-size: 40px;\n    }\n\n    .input-group {\n        .form-control {\n            border: 0;\n            // border-radius: 0;\n            padding: 16px;\n            font-size: 16px;\n            color: black;\n        }\n\n        .btn {\n            border: 0;\n            box-shadow: none;\n            border-radius: 0;\n            background: #ff922b;\n            color: white;\n            font-size: 20px;\n        }\n    }\n\n    .icon-menu {\n        padding: 18px 0;\n        color: white;\n\n        &:hover {\n            cursor: pointer;\n            background-color: #ff922b;\n        }\n\n        .main-icon {\n            height: 80px;\n\n        }\n\n        img {\n            width: 80px;\n            height: 80px;\n        }\n    }\n}\n\n.card {\n\n    h2,\n    h3 {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n    }\n}\n\n.card-hover:hover {\n    background: rgba(255, 146, 43, .2);\n    cursor: pointer;\n}\n\n.card-statistic {\n    img {\n        margin-top: 12px;\n        margin-bottom: 12px;\n        width: 36px;\n        height: 36px;\n    }\n}\n\n.page {\n    background: white;\n}\n\n@media all and (min-width:721px) {}\n\n.container {\n    max-width: 960px;\n}\n\n\n.filetree {\n    .title {\n        cursor: pointer;\n    }\n\n    .title:hover {\n        background: rgba(255, 255, 255, .1);\n    }\n\n    .title.active {\n        background: rgba(255, 255, 255, .2);\n    }\n\n    .sub {\n        padding-left: 16px;\n    }\n}","controller":"wiz = framework.model(\"wiz\")\nconfig = framework.config.load(\"wiz\")\nkwargs['CATEGORIES'] = config.get(\"category\")","compile_html":"on","compile_css":"on","compile_js":"on"},{"dic":{"default":{}},"controller":"wiz = framework.model(\"wiz\")\nfs = wiz.storage()\nif fs.isdir(\"config\") == False:\n    fs.makedirs(\"config\")\nkwargs[\"BRANCHPATH\"] = wiz.branchpath()\n","id":"core.workspace.config","name":"/config","compile_html":"on","compile_css":"off","compile_js":"on","css":"html,\nbody {\n\twidth: 100%;\n\theight: 100%;\n\toverflow: hidden;\n}\n\n.main-panel {\n\twidth: 100%;\n}\n\n.filetree {\n\tposition: relative;\n}\n\n.filetree .title {\n\tcursor: pointer;\n\twhite-space: nowrap;\n\ttext-overflow: ellipsis;\n\toverflow: hidden;\n}\n\n.filetree .title .file-actions {\n\tbackground: white;\n\tdisplay: inline-block;\n\tposition: absolute;\n\tright: 0;\n}\n\n.filetree .title:hover {\n\ttext-decoration: underline;\n}\n\n.filetree .title.active {\n\tfont-family: MAIN-EB;\n}\n\n.filetree .sub {\n\tpadding-left: 16px;\n}\n\n.main-panel {\n\tborder: 1px solid #aaa;\n\tborder-top: none;\n}\n\n.main-panel .panel-header {\n\twidth: 100%;\n\tborder-bottom: 1px solid #aaa;\n}\n\n.split-pane-divider {\n\tbackground: #aaa;\n}\n\n.panel-editor i {\n\twidth: 14px;\n}\n\n.panel-editor span {\n\tcursor: pointer;\n}\n\n.panel-editor .target-file:hover span.title {\n\tborder-bottom: 1px solid #000;\n}\n\n.info-form.row {\n\tmargin: 0;\n}\n\n.main-container {\n\theight: 100%;\n\twidth: 100%;\n}","html":".main-container\n    mixin topbutton()\n        .d-flex(ng-if=\"viewer.mode == 'folder'\")\n            input.mt-1(type=\"checkbox\" ng-click=\"viewer.check_all(viewer.data)\" ng-model=\"viewer.data.checked\")\n            span.ml-2.if-desktop.text-muted {{ viewer.data.path.substring(10) }}/{{viewer.data.name}}\n            span.mr-auto &nbsp;\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer.mr-1(ng-click=\"modal.delete_bulk(viewer.data)\" style=\"height: 20px;\")\n                i.fas.fa-trash\n                span.ml-1.if-desktop Delete\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer.mr-1(ng-click=\"viewer.create(viewer.data, 'folder')\" style=\"height: 20px;\")\n                i.fas.fa-folder-plus\n                span.ml-1.if-desktop New Folder\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer.mr-1(ng-click=\"viewer.create(viewer.data, 'file')\" style=\"height: 20px;\")\n                i.fas.fa-file\n                span.ml-1.if-desktop New File\n\n        .d-flex(ng-if=\"viewer.mode == 'editor'\")\n            span.ml-2.if-desktop.text-muted {{ viewer.data.path.substring(10) }}/{{viewer.data.name}}\n            span.mr-auto &nbsp;\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer.mr-1(ng-click=\"viewer.save()\" style=\"height: 20px;\")\n                i.fas.fa-save\n                span.ml-1.if-desktop Save\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer(ng-click=\"viewer.parent()\" style=\"height: 20px;\" ng-if=\"status.view != 'folder'\")\n                i.fas.fa-times\n\n        .d-flex(ng-if=\"viewer.mode == 'image'\")\n            span.ml-2.if-desktop.text-muted {{ viewer.data.path.substring(10) }}/{{viewer.data.name}}\n            span.mr-auto &nbsp;\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer(ng-click=\"viewer.parent()\" style=\"height: 20px;\" ng-if=\"status.view != 'folder'\")\n                i.fas.fa-times\n\n    div(style=\"display: none;\")\n        form#file-form\n            input#file-upload.form-control(type='file' name='file[]' multiple)\n\n    .bg-dark.text-center(ng-if=\"loading.status\" style=\"width: 100%; height: 100%; position: absolute; top: 0; left: 0; z-index: 99999; padding-top: 40vh; opacity: .6;\")\n        .spinner-grow.text-white(style=\"width: 60px; height: 60px;\")\n    \n    .main-panel.container.p-0(style=\"height: calc(100% - 168px);\")\n        div(data-split-pane data-split-pane-properties=\"configuration.root\")\n            div(data-split-pane-component data-width=\"240px\")\n                div(style=\"height: 100%;\")\n                    .card-body.p-3(style=\"height: 100%; overflow: auto;\")\n                        script(type=\"text/ng-template\" id=\"tree.html\").\n                            <div class=\"filetree\">\n                                <div class=\"title d-flex {{viewer.data.name == item.name && viewer.data.path == item.path ? 'active' : '' }}\" ng-click=\"tree.load(item)\">\n                                    <span>\n                                        <i class=\"fas {{item.icon}} mr-1\"></i>\n                                        <span>{{item.display ? item.display : item.name}}</span>\n                                    </span>\n                                </div>\n                                <div class=\"sub\">\n                                    <div ng-repeat=\"item in item.sub\" ng-include=\"'tree.html'\"></div>\n                                </div>\n                            </div>\n                        \n                        .tree-container\n                            .root-tree(ng-repeat=\"item in tree.data\" ng-include=\"'tree.html'\")\n        \n            div(data-split-pane-divider data-width=\"1px\")\n            \n            div(data-split-pane-component style=\"height: 100%; overflow: hidden;\")\n                .panel-header.p-1.pr-0.pl-2\n                    +topbutton\n\n                .panel-editor(ng-if=\"viewer.mode == 'folder'\" style=\"height: 100%; overflow: auto;\" ng-drop=\"viewer.drop\")\n                    div(style=\"margin: 0 -12px;\" ng-if=\"upload.status\")\n                        .progress.progress-sm\n                            .progress-bar.bg-orange(style=\"width: {{upload.process}}%;\" role='progressbar' aria-valuenow='38' aria-valuemin='0' aria-valuemax='100')\n\n                    table.table.table-hover.mb-6\n                        tr(ng-if=\"viewer.has_parent()\" ng-click=\"viewer.parent()\")\n                            td.pt-0.pb-0.cursor-pointer(colspan=3)\n                                span.mr-2\n                                    svg.icon(xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\")\n                                        path(stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\")\n                                        path(d=\"M18 18h-6a3 3 0 0 1 -3 -3v-10l-4 4m8 0l-4 -4\")\n                                span ...\n\n                        tr.target-file(ng-repeat=\"item in viewer.data.sub\" ng-click=\"viewer.check(item)\")\n                            td.w-1.cursor-pointer.pr-2(style=\"white-space: nowrap;\")\n                                input.mr-2(type=\"checkbox\" ng-model=\"item.checked\" ng-if=\"!item.hide_menu\")\n                                i.fas(class=\"{{item.icon}}\")\n\n                            td.pl-0.pr-0(ng-dblclick=\"tree.load(item)\")\n                                span.title(ng-if=\"!item.edit\" ng-click=\"tree.load(item)\") {{item.name}}\n                                input.form-control.form-control-sm.text-dark(ng-if=\"item.edit\" ng-model=\"viewer.selected.rename\" style=\"color: #000 !important; display: inline-block;\" ng-enter=\"viewer.save_name()\")\n\n                            td.w-1.pl-0.text-right(style=\"white-space: nowrap;\" ng-if=\"!item.hide_menu\")\n                                span.text-dark(ng-if=\"item.edit\" style=\"font-size: 12px; width: 14px;\" ng-click=\"viewer.save_name()\")\n                                    i.fas.fa-check-circle\n                                span.text-dark(ng-if=\"!item.edit\" style=\"font-size: 12px; width: 14px;\" ng-click=\"viewer.change_name(item)\")\n                                    i.fas.fa-italic\n                                span.text-dark.ml-1(ng-if=\"!item.edit\" style=\"font-size: 12px; width: 14px;\" ng-click=\"modal.delete(item)\")\n                                    i.fas.fa-trash\n\n                .panel-editor(ng-if=\"viewer.mode == 'image'\" style=\"height: 100%; overflow: auto;\")\n                    img(ng-src=\"{{viewer.data.url}}\" style=\"width: 100%;\")\n\n                .panel-editor(ng-if=\"viewer.mode == 'editor' && viewer.editor.status\" style=\"height: 100%; overflow: hidden;\")\n                    div(ng-model=\"viewer.data.text\" ui-monaco-opts=\"viewer.editor.properties\" ui-monaco)\n\n    #modal-delete.modal.fade(tabindex=\"-1\")\n        .modal-dialog.modal-sm(role='document')\n            .modal-content\n                .modal-body\n                    .modal-title Delete\n                    div Once deleted, it cannot be restored. Are you sure you want to delete?\n                .modal-footer\n                    button.btn.btn-link.link-secondary.mr-auto(type='button' data-dismiss='modal') Cancel\n                    button.btn.btn-danger(type='button' ng-click=\"viewer.delete(modal.data.delete_selected)\") Delete","js":"const API_URL = \"/wiz/admin/api/file\";\nconst TREE_DATA = [\n    { path: wiz.data.BRANCHPATH, name: \"config\", type: 'folder', icon: 'fa-layer-group', display: \"Config\" },\n    { path: wiz.data.BRANCHPATH, name: \"compiler\", type: 'folder', icon: 'fa-rocket', display: \"Compiler\" }\n];\n\nconst VIEWER_IMAGE_URL = (item) => { \n    return false;\n};\n\nlet wiz_controller = async ($sce, $scope, $timeout) => {\n    _builder($scope, $timeout);\n\n    $scope.math = Math;\n    $scope.trustAsHtml = $sce.trustAsHtml;\n\n    $scope.configuration = {};       // state data for maintaining ui\n    $scope.tree = {};\n    $scope.viewer = {};\n    $scope.shortcut = {};\n    $scope.loading = {};\n    $scope.modal = {};\n    $scope.upload = {};\n\n    /*\n     * define variables\n     */\n    let BUILDER = {};\n\n    let API = {\n        load: (item) => new Promise((resolve) => {\n            let url = API_URL + '/tree';\n            $.post(url, { path: item.path, name: item.name, type: item.type }, function (res) {\n                resolve(res);\n            });\n        }),\n        upload: (data) => new Promise((resolve) => {\n            let url = API_URL + '/upload';\n            $.ajax({\n                url: url,\n                type: 'POST',\n                xhr: () => {\n                    let myXhr = $.ajaxSettings.xhr();\n                    if (myXhr.upload) {\n                        myXhr.upload.addEventListener('progress', function (event) {\n                            let percent = 0;\n                            let position = event.loaded || event.position;\n                            let total = event.total;\n                            if (event.lengthComputable) {\n                                percent = Math.round(position / total * 10000) / 100;\n                            }\n                            $scope.upload.process = percent;\n                            $timeout();\n                        }, false);\n                    }\n                    return myXhr;\n                },\n                data: data,\n                cache: false,\n                contentType: false,\n                processData: false\n            }).always(function (res) {\n                resolve(res);\n            });\n        }),\n        update: (data) => new Promise((resolve) => {\n            let url = API_URL + '/update';\n            $.post(url, data, function (res) {\n                resolve(res);\n            });\n        }),\n        delete: (data) => new Promise((resolve) => {\n            let url = API_URL + '/delete';\n            $.post(url, data, function (res) {\n                resolve(res);\n            });\n        }),\n        delete_bulk: (data) => new Promise((resolve) => {\n            let url = API_URL + '/delete_bulk';\n            $.post(url, { data: JSON.stringify(data) }, function (res) {\n                resolve(res);\n            });\n        }),\n        rename: (data) => new Promise((resolve) => {\n            let url = API_URL + '/rename';\n            $.post(url, data, function (res) {\n                resolve(res);\n            });\n        }),\n        timeout: (ts) => new Promise((resolve) => {\n            $timeout(resolve, ts);\n        })\n    };\n\n    $scope.API = API;\n\n    BUILDER.tree = async () => {\n        $scope.tree.data = TREE_DATA;\n        $scope.tree.parents = {};\n        $scope.tree.current = null;\n\n        $scope.tree.init = async () => {\n            for (let i = 0; i < $scope.tree.data.length; i++) {\n                let item = $scope.tree.data[i];\n                if (item.type == \"folder\" && !item.sub) {\n                    await $scope.tree.load(item, i > 0, false);\n                }\n            }\n        }\n\n        $scope.tree.load = async (item, tree, refresh) => {\n            if (!item) {\n                location.reload();\n                return;\n            }\n            $scope.tree.current = item;\n\n            if ($scope.viewer.has_parent(item) && !refresh) {\n                if (item.sub.length > 0) {\n                    item.sub = [];\n                    if (item.path == $scope.viewer.data.path && item.name == $scope.viewer.data.name)\n                        $scope.viewer.parent(true);\n                    await API.timeout();\n                    return;\n                }\n            }\n\n            if (item.click) {\n                await item.click($scope, item);\n                return;\n            }\n\n            let res = await API.load(item);\n\n            // if result is list of files or folder\n            if (res.code == 200) {\n                item.checked = false;\n                item.sub = res.data;\n\n                if (item.onFolder) {\n                    item = await item.onFolder(item);\n                } else {\n                    item.sub.sort(function (a, b) {\n                        if (a.type == 'folder' && b.type != 'folder') return -1;\n                        if (a.type != 'folder' && b.type == 'folder') return 1;\n                        return a.name.localeCompare(b.name);\n                    });\n\n                    for (var i = 0; i < item.sub.length; i++) {\n                        if (item.sub[i].type == 'file') item.sub[i].icon = 'fa-file'\n                        else if (item.sub[i].type == 'folder') item.sub[i].icon = 'fa-folder'\n                        else item.sub[i].icon = 'fa-caret-right'\n                    }\n                }\n\n                for (var i = 0; i < item.sub.length; i++) {\n                    $scope.tree.parents[item.sub[i].path + \"/\" + item.sub[i].name] = item;\n                }\n\n                if (!tree) {\n                    await $scope.viewer.folder(item);\n                }\n\n                await API.timeout();\n                return;\n            }\n\n            if (res.code == 201) {\n                await $scope.viewer.editor.load(res.data);\n                return;\n            }\n\n            if (res.code == 202) {\n                await $scope.viewer.image(res.data);\n                return;\n            }\n        };\n    }\n\n    BUILDER.upload = async () => {\n        $scope.upload.status = false;\n        $scope.upload.process = 0;\n\n        $scope.upload.run = async (data) => {\n            $scope.upload.status = true;\n            $scope.upload.process = 0;\n            await API.timeout();\n            await API.upload(data);\n            $scope.upload.status = false;\n            await API.timeout();\n            $scope.upload.process = 0;\n            await $scope.tree.load($scope.viewer.data, false, true);\n        }\n    }\n\n    BUILDER.viewer = {};\n\n    BUILDER.viewer.base = async () => {\n        $scope.viewer.parent = async (notreload) => {\n            if (!$scope.viewer.data) return;\n            if (!$scope.viewer.has_parent()) return;\n            let parent = $scope.tree.parents[$scope.viewer.data.path + \"/\" + $scope.viewer.data.name];\n            if (!notreload) {\n\n                await $scope.tree.load(parent, false, true);\n            } else if (parent) {\n                $scope.viewer.data = parent;\n            }\n            await API.timeout();\n        }\n\n        $scope.viewer.drop = {};\n        $scope.viewer.drop = {};\n        $scope.viewer.drop.text = \"Drop File Here!\"\n        $scope.viewer.drop.ondrop = async (e, files) => {\n            let fd = new FormData();\n            let filepath = [];\n            fd.append(\"path\", $scope.viewer.data.path);\n            fd.append(\"name\", $scope.viewer.data.name);\n            for (let i = 0; i < files.length; i++) {\n                fd.append('file[]', files[i]);\n                filepath.push(files[i].filepath);\n            }\n\n            fd.append(\"filepath\", JSON.stringify(filepath));\n            await $scope.upload.run(fd);\n        }\n\n        $scope.viewer.upload = function () {\n            $('#file-upload').click();\n        };\n\n        let fileinput = document.getElementById('file-upload');\n        fileinput.onchange = async () => {\n            let fd = new FormData($('#file-form')[0]);\n            fd.append(\"path\", $scope.viewer.data.path);\n            fd.append(\"name\", $scope.viewer.data.name);\n            await $scope.upload.run(fd);\n        };\n    }\n\n    BUILDER.viewer.folder = async () => {\n        $scope.viewer.folder = async (item) => {\n            $scope.viewer.mode = \"folder\";\n            $scope.viewer.data = item;\n            await API.timeout();\n        }\n\n        $scope.viewer.has_parent = (item) => {\n            if (!item) item = $scope.viewer.data;\n            if ($scope.tree.parents[item.path + '/' + item.name])\n                return true;\n            return false;\n        }\n\n        $scope.viewer.check = async (item) => {\n            item.checked = !item.checked;\n            await API.timeout();\n        }\n\n        $scope.viewer.check_all = async (item) => {\n            item.checked = !item.checked;\n            for (let i = 0; i < item.sub.length; i++)\n                item.sub[i].checked = item.checked;\n            await API.timeout();\n        }\n\n        $scope.viewer.create = async (item, ftype) => {\n            let obj = {};\n            obj.path = item.path + \"/\" + item.name;\n            obj.type = ftype;\n            obj.name = \"\";\n            item.sub.push(obj);\n\n            await API.timeout();\n            await $scope.viewer.change_name(item.sub[item.sub.length - 1]);\n        }\n\n        $scope.viewer.save_name = async () => {\n            let data = angular.copy($scope.viewer.selected);\n            let res = await API.rename(data);\n\n            if (res.code == 402) {\n                toastr.error(res.data);\n                return;\n            }\n\n            if (res.code == 401) {\n                toastr.error(res.data);\n                return;\n            }\n\n            if (res.code == 200) {\n                $scope.viewer.selected.edit = false;\n                $scope.viewer.selected.name = $scope.viewer.selected.rename;\n            }\n\n            await $scope.tree.load($scope.viewer.data, false, true);\n            await API.timeout();\n        }\n\n        $scope.viewer.change_name = async (item) => {\n            if ($scope.viewer.selected)\n                $scope.viewer.selected.edit = false;\n\n            item.edit = true;\n            item.rename = item.name + \"\";\n            $scope.viewer.selected = item;\n            await API.timeout();\n        }\n\n        $scope.viewer.delete = async (item) => {\n            let data = angular.copy(item);\n            let parent = $scope.tree.parents[data.path + \"/\" + data.name];\n            if (data.bulk) {\n                parent = data;\n                let sub = [];\n                for (let i = 0; i < data.sub.length; i++) {\n                    if (data.sub[i].checked) {\n                        sub.push(data.sub[i]);\n                    }\n                }\n                await API.delete_bulk(sub);\n            } else {\n                await API.delete(data);\n            }\n            $scope.modal.data.delete_selected = null;\n            await $scope.tree.load(parent, false, true);\n            $('#modal-delete').modal('hide');\n        }\n    }\n\n    BUILDER.viewer.image = async () => {\n        $scope.viewer.image = async (item) => {\n            let url = VIEWER_IMAGE_URL(item);\n            if (!url) return;\n            $scope.viewer.mode = \"image\";\n            $scope.viewer.data = item;\n            item.url = url;\n            await API.timeout();\n        }\n    }\n\n    BUILDER.viewer.editor = async () => {\n        $scope.viewer.editor = {};\n        $scope.viewer.editor.properties = $scope.monaco(\"python\");\n        $scope.viewer.editor.status = false;\n        $scope.viewer.editor.properties.onLoad = async (editor) => {\n            editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_S, function () {\n                $scope.viewer.save();\n                shortcuts();\n            });\n        };\n\n        $scope.viewer.editor.load = async (item) => {\n            $scope.viewer.mode = \"editor\";\n            $scope.viewer.editor.properties.language = item.language;\n            $scope.viewer.editor.status = false;\n            await API.timeout();\n\n            $scope.viewer.data = item;\n            await API.timeout();\n            $scope.viewer.editor.status = true;\n            await API.timeout();\n        }\n\n        $scope.viewer.save = async () => {\n            let data = angular.copy($scope.viewer.data);\n            let res = await API.update(data);\n            if (res.code == 200) toastr.success('Saved');\n            else toastr.error('Error');\n        }\n    }\n\n    /*\n     * define loading\n     */\n    BUILDER.loading = async () => {\n        $scope.loading.status = true;\n        $scope.loading.show = async () => {\n            $scope.loading.status = true;\n            await API.timeout();\n        }\n\n        $scope.loading.hide = async () => {\n            $scope.loading.status = false;\n            await API.timeout();\n        }\n    }\n\n    /*\n     * define modal events\n     */\n\n    BUILDER.modal = async () => {\n        $scope.modal.data = {};\n        $scope.modal.delete = async (item) => {\n            $scope.modal.data.delete_selected = item;\n            $('#modal-delete').modal('show');\n        }\n\n        $scope.modal.delete_bulk = async (item) => {\n            $scope.modal.data.delete_selected = item;\n            $scope.modal.data.delete_selected.bulk = true;\n            $('#modal-delete').modal('show');\n        }\n    }\n\n    BUILDER.init = async () => {\n        await $scope.tree.init();\n        await $scope.loading.hide();\n    }\n\n    BUILDER.upload();\n    BUILDER.viewer.base();\n    BUILDER.viewer.folder();\n    BUILDER.viewer.image();\n    BUILDER.viewer.editor();\n    BUILDER.tree();\n    BUILDER.loading();\n    BUILDER.modal();\n    BUILDER.init();\n\n    // shortcut\n    function shortcuts() {\n        $(window).unbind();\n        shortcutjs(window, {\n            'Ctrl KeyS': function (ev) {\n                ev.preventDefault();\n                $scope.viewer.save();\n            }\n        });\n    }\n\n    shortcuts();\n    window.addEventListener(\"focus\", shortcuts, false);\n\n    if (window.BUILD_INIT) {\n        BUILD_INIT($scope);\n    }\n}","api":""},{"dic":{"default":{}},"id":"core.workspace.controllers","name":"/ctrls","compile_html":"on","compile_css":"off","compile_js":"on","controller":"wiz = framework.model(\"wiz\")\nfs = wiz.storage()\nif fs.isdir(\"interfaces/controller\") == False:\n    fs.makedirs(\"interfaces/controller\")\nkwargs[\"BRANCHPATH\"] = wiz.branchpath()\n","js":"const API_URL = \"/wiz/admin/api/file\";\nconst TREE_DATA = [\n    { path: wiz.data.BRANCHPATH + \"/interfaces\", name: \"controller\", type: 'folder', icon: 'fa-layer-group', display: \"Controller\" }\n];\n\nconst VIEWER_IMAGE_URL = (item) => { \n    return false;\n};\n\nlet wiz_controller = async ($sce, $scope, $timeout) => {\n    _builder($scope, $timeout);\n\n    $scope.math = Math;\n    $scope.trustAsHtml = $sce.trustAsHtml;\n\n    $scope.configuration = {};       // state data for maintaining ui\n    $scope.tree = {};\n    $scope.viewer = {};\n    $scope.shortcut = {};\n    $scope.loading = {};\n    $scope.modal = {};\n    $scope.upload = {};\n\n    /*\n     * define variables\n     */\n    let BUILDER = {};\n\n    let API = {\n        load: (item) => new Promise((resolve) => {\n            let url = API_URL + '/tree';\n            $.post(url, { path: item.path, name: item.name, type: item.type }, function (res) {\n                resolve(res);\n            });\n        }),\n        upload: (data) => new Promise((resolve) => {\n            let url = API_URL + '/upload';\n            $.ajax({\n                url: url,\n                type: 'POST',\n                xhr: () => {\n                    let myXhr = $.ajaxSettings.xhr();\n                    if (myXhr.upload) {\n                        myXhr.upload.addEventListener('progress', function (event) {\n                            let percent = 0;\n                            let position = event.loaded || event.position;\n                            let total = event.total;\n                            if (event.lengthComputable) {\n                                percent = Math.round(position / total * 10000) / 100;\n                            }\n                            $scope.upload.process = percent;\n                            $timeout();\n                        }, false);\n                    }\n                    return myXhr;\n                },\n                data: data,\n                cache: false,\n                contentType: false,\n                processData: false\n            }).always(function (res) {\n                resolve(res);\n            });\n        }),\n        update: (data) => new Promise((resolve) => {\n            let url = API_URL + '/update';\n            $.post(url, data, function (res) {\n                resolve(res);\n            });\n        }),\n        delete: (data) => new Promise((resolve) => {\n            let url = API_URL + '/delete';\n            $.post(url, data, function (res) {\n                resolve(res);\n            });\n        }),\n        delete_bulk: (data) => new Promise((resolve) => {\n            let url = API_URL + '/delete_bulk';\n            $.post(url, { data: JSON.stringify(data) }, function (res) {\n                resolve(res);\n            });\n        }),\n        rename: (data) => new Promise((resolve) => {\n            let url = API_URL + '/rename';\n            $.post(url, data, function (res) {\n                resolve(res);\n            });\n        }),\n        timeout: (ts) => new Promise((resolve) => {\n            $timeout(resolve, ts);\n        })\n    };\n\n    $scope.API = API;\n\n    BUILDER.tree = async () => {\n        $scope.tree.data = TREE_DATA;\n        $scope.tree.parents = {};\n        $scope.tree.current = null;\n\n        $scope.tree.init = async () => {\n            for (let i = 0; i < $scope.tree.data.length; i++) {\n                let item = $scope.tree.data[i];\n                if (item.type == \"folder\" && !item.sub) {\n                    await $scope.tree.load(item, i > 0, false);\n                }\n            }\n        }\n\n        $scope.tree.load = async (item, tree, refresh) => {\n            if (!item) {\n                location.reload();\n                return;\n            }\n            $scope.tree.current = item;\n\n            if ($scope.viewer.has_parent(item) && !refresh) {\n                if (item.sub.length > 0) {\n                    item.sub = [];\n                    if (item.path == $scope.viewer.data.path && item.name == $scope.viewer.data.name)\n                        $scope.viewer.parent(true);\n                    await API.timeout();\n                    return;\n                }\n            }\n\n            if (item.click) {\n                await item.click($scope, item);\n                return;\n            }\n\n            let res = await API.load(item);\n\n            // if result is list of files or folder\n            if (res.code == 200) {\n                item.checked = false;\n                item.sub = res.data;\n\n                if (item.onFolder) {\n                    item = await item.onFolder(item);\n                } else {\n                    item.sub.sort(function (a, b) {\n                        if (a.type == 'folder' && b.type != 'folder') return -1;\n                        if (a.type != 'folder' && b.type == 'folder') return 1;\n                        return a.name.localeCompare(b.name);\n                    });\n\n                    for (var i = 0; i < item.sub.length; i++) {\n                        if (item.sub[i].type == 'file') item.sub[i].icon = 'fa-file'\n                        else if (item.sub[i].type == 'folder') item.sub[i].icon = 'fa-folder'\n                        else item.sub[i].icon = 'fa-caret-right'\n                    }\n                }\n\n                for (var i = 0; i < item.sub.length; i++) {\n                    $scope.tree.parents[item.sub[i].path + \"/\" + item.sub[i].name] = item;\n                }\n\n                if (!tree) {\n                    await $scope.viewer.folder(item);\n                }\n\n                await API.timeout();\n                return;\n            }\n\n            if (res.code == 201) {\n                await $scope.viewer.editor.load(res.data);\n                return;\n            }\n\n            if (res.code == 202) {\n                await $scope.viewer.image(res.data);\n                return;\n            }\n        };\n    }\n\n    BUILDER.upload = async () => {\n        $scope.upload.status = false;\n        $scope.upload.process = 0;\n\n        $scope.upload.run = async (data) => {\n            $scope.upload.status = true;\n            $scope.upload.process = 0;\n            await API.timeout();\n            await API.upload(data);\n            $scope.upload.status = false;\n            await API.timeout();\n            $scope.upload.process = 0;\n            await $scope.tree.load($scope.viewer.data, false, true);\n        }\n    }\n\n    BUILDER.viewer = {};\n\n    BUILDER.viewer.base = async () => {\n        $scope.viewer.parent = async (notreload) => {\n            if (!$scope.viewer.data) return;\n            if (!$scope.viewer.has_parent()) return;\n            let parent = $scope.tree.parents[$scope.viewer.data.path + \"/\" + $scope.viewer.data.name];\n            if (!notreload) {\n\n                await $scope.tree.load(parent, false, true);\n            } else if (parent) {\n                $scope.viewer.data = parent;\n            }\n            await API.timeout();\n        }\n\n        $scope.viewer.drop = {};\n        $scope.viewer.drop = {};\n        $scope.viewer.drop.text = \"Drop File Here!\"\n        $scope.viewer.drop.ondrop = async (e, files) => {\n            let fd = new FormData();\n            let filepath = [];\n            fd.append(\"path\", $scope.viewer.data.path);\n            fd.append(\"name\", $scope.viewer.data.name);\n            for (let i = 0; i < files.length; i++) {\n                fd.append('file[]', files[i]);\n                filepath.push(files[i].filepath);\n            }\n\n            fd.append(\"filepath\", JSON.stringify(filepath));\n            await $scope.upload.run(fd);\n        }\n\n        $scope.viewer.upload = function () {\n            $('#file-upload').click();\n        };\n\n        let fileinput = document.getElementById('file-upload');\n        fileinput.onchange = async () => {\n            let fd = new FormData($('#file-form')[0]);\n            fd.append(\"path\", $scope.viewer.data.path);\n            fd.append(\"name\", $scope.viewer.data.name);\n            await $scope.upload.run(fd);\n        };\n    }\n\n    BUILDER.viewer.folder = async () => {\n        $scope.viewer.folder = async (item) => {\n            $scope.viewer.mode = \"folder\";\n            $scope.viewer.data = item;\n            await API.timeout();\n        }\n\n        $scope.viewer.has_parent = (item) => {\n            if (!item) item = $scope.viewer.data;\n            if ($scope.tree.parents[item.path + '/' + item.name])\n                return true;\n            return false;\n        }\n\n        $scope.viewer.check = async (item) => {\n            item.checked = !item.checked;\n            await API.timeout();\n        }\n\n        $scope.viewer.check_all = async (item) => {\n            item.checked = !item.checked;\n            for (let i = 0; i < item.sub.length; i++)\n                item.sub[i].checked = item.checked;\n            await API.timeout();\n        }\n\n        $scope.viewer.create = async (item, ftype) => {\n            let obj = {};\n            obj.path = item.path + \"/\" + item.name;\n            obj.type = ftype;\n            obj.name = \"\";\n            item.sub.push(obj);\n\n            await API.timeout();\n            await $scope.viewer.change_name(item.sub[item.sub.length - 1]);\n        }\n\n        $scope.viewer.save_name = async () => {\n            let data = angular.copy($scope.viewer.selected);\n            let res = await API.rename(data);\n\n            if (res.code == 402) {\n                toastr.error(res.data);\n                return;\n            }\n\n            if (res.code == 401) {\n                toastr.error(res.data);\n                return;\n            }\n\n            if (res.code == 200) {\n                $scope.viewer.selected.edit = false;\n                $scope.viewer.selected.name = $scope.viewer.selected.rename;\n            }\n\n            await $scope.tree.load($scope.viewer.data, false, true);\n            await API.timeout();\n        }\n\n        $scope.viewer.change_name = async (item) => {\n            if ($scope.viewer.selected)\n                $scope.viewer.selected.edit = false;\n\n            item.edit = true;\n            item.rename = item.name + \"\";\n            $scope.viewer.selected = item;\n            await API.timeout();\n        }\n\n        $scope.viewer.delete = async (item) => {\n            let data = angular.copy(item);\n            let parent = $scope.tree.parents[data.path + \"/\" + data.name];\n            if (data.bulk) {\n                parent = data;\n                let sub = [];\n                for (let i = 0; i < data.sub.length; i++) {\n                    if (data.sub[i].checked) {\n                        sub.push(data.sub[i]);\n                    }\n                }\n                await API.delete_bulk(sub);\n            } else {\n                await API.delete(data);\n            }\n            $scope.modal.data.delete_selected = null;\n            await $scope.tree.load(parent, false, true);\n            $('#modal-delete').modal('hide');\n        }\n    }\n\n    BUILDER.viewer.image = async () => {\n        $scope.viewer.image = async (item) => {\n            let url = VIEWER_IMAGE_URL(item);\n            if (!url) return;\n            $scope.viewer.mode = \"image\";\n            $scope.viewer.data = item;\n            item.url = url;\n            await API.timeout();\n        }\n    }\n\n    BUILDER.viewer.editor = async () => {\n        $scope.viewer.editor = {};\n        $scope.viewer.editor.properties = $scope.monaco(\"python\");\n        $scope.viewer.editor.status = false;\n        $scope.viewer.editor.properties.onLoad = async (editor) => {\n            editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_S, function () {\n                $scope.viewer.save();\n                shortcuts();\n            });\n        };\n\n        $scope.viewer.editor.load = async (item) => {\n            $scope.viewer.mode = \"editor\";\n            $scope.viewer.editor.properties.language = item.language;\n            $scope.viewer.editor.status = false;\n            await API.timeout();\n\n            $scope.viewer.data = item;\n            await API.timeout();\n            $scope.viewer.editor.status = true;\n            await API.timeout();\n        }\n\n        $scope.viewer.save = async () => {\n            let data = angular.copy($scope.viewer.data);\n            let res = await API.update(data);\n            if (res.code == 200) toastr.success('Saved');\n            else toastr.error('Error');\n        }\n    }\n\n    /*\n     * define loading\n     */\n    BUILDER.loading = async () => {\n        $scope.loading.status = true;\n        $scope.loading.show = async () => {\n            $scope.loading.status = true;\n            await API.timeout();\n        }\n\n        $scope.loading.hide = async () => {\n            $scope.loading.status = false;\n            await API.timeout();\n        }\n    }\n\n    /*\n     * define modal events\n     */\n\n    BUILDER.modal = async () => {\n        $scope.modal.data = {};\n        $scope.modal.delete = async (item) => {\n            $scope.modal.data.delete_selected = item;\n            $('#modal-delete').modal('show');\n        }\n\n        $scope.modal.delete_bulk = async (item) => {\n            $scope.modal.data.delete_selected = item;\n            $scope.modal.data.delete_selected.bulk = true;\n            $('#modal-delete').modal('show');\n        }\n    }\n\n    BUILDER.init = async () => {\n        await $scope.tree.init();\n        await $scope.loading.hide();\n    }\n\n    BUILDER.upload();\n    BUILDER.viewer.base();\n    BUILDER.viewer.folder();\n    BUILDER.viewer.image();\n    BUILDER.viewer.editor();\n    BUILDER.tree();\n    BUILDER.loading();\n    BUILDER.modal();\n    BUILDER.init();\n\n    // shortcut\n    function shortcuts() {\n        $(window).unbind();\n        shortcutjs(window, {\n            'Ctrl KeyS': function (ev) {\n                ev.preventDefault();\n                $scope.viewer.save();\n            }\n        });\n    }\n\n    shortcuts();\n    window.addEventListener(\"focus\", shortcuts, false);\n\n    if (window.BUILD_INIT) {\n        BUILD_INIT($scope);\n    }\n}","html":".main-container\n    mixin topbutton()\n        .d-flex(ng-if=\"viewer.mode == 'folder'\")\n            input.mt-1(type=\"checkbox\" ng-click=\"viewer.check_all(viewer.data)\" ng-model=\"viewer.data.checked\")\n            span.ml-2.if-desktop.text-muted {{ viewer.data.path.substring(10) }}/{{viewer.data.name}}\n            span.mr-auto &nbsp;\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer.mr-1(ng-click=\"modal.delete_bulk(viewer.data)\" style=\"height: 20px;\")\n                i.fas.fa-trash\n                span.ml-1.if-desktop Delete\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer.mr-1(ng-click=\"viewer.create(viewer.data, 'folder')\" style=\"height: 20px;\")\n                i.fas.fa-folder-plus\n                span.ml-1.if-desktop New Folder\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer.mr-1(ng-click=\"viewer.create(viewer.data, 'file')\" style=\"height: 20px;\")\n                i.fas.fa-file\n                span.ml-1.if-desktop New File\n\n        .d-flex(ng-if=\"viewer.mode == 'editor'\")\n            span.ml-2.if-desktop.text-muted {{ viewer.data.path.substring(10) }}/{{viewer.data.name}}\n            span.mr-auto &nbsp;\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer.mr-1(ng-click=\"viewer.save()\" style=\"height: 20px;\")\n                i.fas.fa-save\n                span.ml-1.if-desktop Save\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer(ng-click=\"viewer.parent()\" style=\"height: 20px;\" ng-if=\"status.view != 'folder'\")\n                i.fas.fa-times\n\n        .d-flex(ng-if=\"viewer.mode == 'image'\")\n            span.ml-2.if-desktop.text-muted {{ viewer.data.path.substring(10) }}/{{viewer.data.name}}\n            span.mr-auto &nbsp;\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer(ng-click=\"viewer.parent()\" style=\"height: 20px;\" ng-if=\"status.view != 'folder'\")\n                i.fas.fa-times\n\n    div(style=\"display: none;\")\n        form#file-form\n            input#file-upload.form-control(type='file' name='file[]' multiple)\n\n    .bg-dark.text-center(ng-if=\"loading.status\" style=\"width: 100%; height: 100%; position: absolute; top: 0; left: 0; z-index: 99999; padding-top: 40vh; opacity: .6;\")\n        .spinner-grow.text-white(style=\"width: 60px; height: 60px;\")\n    \n    .main-panel.container.p-0(style=\"height: calc(100% - 168px);\")\n        div(data-split-pane data-split-pane-properties=\"configuration.root\")\n            div(data-split-pane-component data-width=\"240px\")\n                div(style=\"height: 100%;\")\n                    .card-body.p-3(style=\"height: 100%; overflow: auto;\")\n                        script(type=\"text/ng-template\" id=\"tree.html\").\n                            <div class=\"filetree\">\n                                <div class=\"title d-flex {{viewer.data.name == item.name && viewer.data.path == item.path ? 'active' : '' }}\" ng-click=\"tree.load(item)\">\n                                    <span>\n                                        <i class=\"fas {{item.icon}} mr-1\"></i>\n                                        <span>{{item.display ? item.display : item.name}}</span>\n                                    </span>\n                                </div>\n                                <div class=\"sub\">\n                                    <div ng-repeat=\"item in item.sub\" ng-include=\"'tree.html'\"></div>\n                                </div>\n                            </div>\n                        \n                        .tree-container\n                            .root-tree(ng-repeat=\"item in tree.data\" ng-include=\"'tree.html'\")\n        \n            div(data-split-pane-divider data-width=\"1px\")\n            \n            div(data-split-pane-component style=\"height: 100%; overflow: hidden;\")\n                .panel-header.p-1.pr-0.pl-2\n                    +topbutton\n\n                .panel-editor(ng-if=\"viewer.mode == 'folder'\" style=\"height: 100%; overflow: auto;\" ng-drop=\"viewer.drop\")\n                    div(style=\"margin: 0 -12px;\" ng-if=\"upload.status\")\n                        .progress.progress-sm\n                            .progress-bar.bg-orange(style=\"width: {{upload.process}}%;\" role='progressbar' aria-valuenow='38' aria-valuemin='0' aria-valuemax='100')\n\n                    table.table.table-hover.mb-6\n                        tr(ng-if=\"viewer.has_parent()\" ng-click=\"viewer.parent()\")\n                            td.pt-0.pb-0.cursor-pointer(colspan=3)\n                                span.mr-2\n                                    svg.icon(xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\")\n                                        path(stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\")\n                                        path(d=\"M18 18h-6a3 3 0 0 1 -3 -3v-10l-4 4m8 0l-4 -4\")\n                                span ...\n\n                        tr.target-file(ng-repeat=\"item in viewer.data.sub\" ng-click=\"viewer.check(item)\")\n                            td.w-1.cursor-pointer.pr-2(style=\"white-space: nowrap;\")\n                                input.mr-2(type=\"checkbox\" ng-model=\"item.checked\" ng-if=\"!item.hide_menu\")\n                                i.fas(class=\"{{item.icon}}\")\n\n                            td.pl-0.pr-0(ng-dblclick=\"tree.load(item)\")\n                                span.title(ng-if=\"!item.edit\" ng-click=\"tree.load(item)\") {{item.name}}\n                                input.form-control.form-control-sm.text-dark(ng-if=\"item.edit\" ng-model=\"viewer.selected.rename\" style=\"color: #000 !important; display: inline-block;\" ng-enter=\"viewer.save_name()\")\n\n                            td.w-1.pl-0.text-right(style=\"white-space: nowrap;\" ng-if=\"!item.hide_menu\")\n                                span.text-dark(ng-if=\"item.edit\" style=\"font-size: 12px; width: 14px;\" ng-click=\"viewer.save_name()\")\n                                    i.fas.fa-check-circle\n                                span.text-dark(ng-if=\"!item.edit\" style=\"font-size: 12px; width: 14px;\" ng-click=\"viewer.change_name(item)\")\n                                    i.fas.fa-italic\n                                span.text-dark.ml-1(ng-if=\"!item.edit\" style=\"font-size: 12px; width: 14px;\" ng-click=\"modal.delete(item)\")\n                                    i.fas.fa-trash\n\n                .panel-editor(ng-if=\"viewer.mode == 'image'\" style=\"height: 100%; overflow: auto;\")\n                    img(ng-src=\"{{viewer.data.url}}\" style=\"width: 100%;\")\n\n                .panel-editor(ng-if=\"viewer.mode == 'editor' && viewer.editor.status\" style=\"height: 100%; overflow: hidden;\")\n                    div(ng-model=\"viewer.data.text\" ui-monaco-opts=\"viewer.editor.properties\" ui-monaco)\n\n    #modal-delete.modal.fade(tabindex=\"-1\")\n        .modal-dialog.modal-sm(role='document')\n            .modal-content\n                .modal-body\n                    .modal-title Delete\n                    div Once deleted, it cannot be restored. Are you sure you want to delete?\n                .modal-footer\n                    button.btn.btn-link.link-secondary.mr-auto(type='button' data-dismiss='modal') Cancel\n                    button.btn.btn-danger(type='button' ng-click=\"viewer.delete(modal.data.delete_selected)\") Delete","css":"html,\nbody {\n\twidth: 100%;\n\theight: 100%;\n\toverflow: hidden;\n}\n\n.main-panel {\n\twidth: 100%;\n}\n\n.filetree {\n\tposition: relative;\n}\n\n.filetree .title {\n\tcursor: pointer;\n\twhite-space: nowrap;\n\ttext-overflow: ellipsis;\n\toverflow: hidden;\n}\n\n.filetree .title .file-actions {\n\tbackground: white;\n\tdisplay: inline-block;\n\tposition: absolute;\n\tright: 0;\n}\n\n.filetree .title:hover {\n\ttext-decoration: underline;\n}\n\n.filetree .title.active {\n\tfont-family: MAIN-EB;\n}\n\n.filetree .sub {\n\tpadding-left: 16px;\n}\n\n.main-panel {\n\tborder: 1px solid #aaa;\n\tborder-top: none;\n}\n\n.main-panel .panel-header {\n\twidth: 100%;\n\tborder-bottom: 1px solid #aaa;\n}\n\n.split-pane-divider {\n\tbackground: #aaa;\n}\n\n.panel-editor i {\n\twidth: 14px;\n}\n\n.panel-editor span {\n\tcursor: pointer;\n}\n\n.panel-editor .target-file:hover span.title {\n\tborder-bottom: 1px solid #000;\n}\n\n.info-form.row {\n\tmargin: 0;\n}\n\n.main-container {\n\theight: 100%;\n\twidth: 100%;\n}","api":""},{"dic":{"default":{}},"id":"core.workspace.logger","name":"/logger","js":"let wiz_controller = async ($sce, $scope, $timeout) => {\n    _builder($scope, $timeout);\n\n    $scope.trustAsHtml = $sce.trustAsHtml;\n\n    $scope.branch = wiz.data.BRANCH;\n    $scope.branches = wiz.data.BRANCHES;\n\n    $scope.change = async (branch) => {\n        location.href = \"/wiz/admin/workspace/logger/\" + branch;\n    }\n\n    let ansi_up = new AnsiUp();\n    let socket = io(\"/wiz\");\n\n    $scope.socket = {};\n    $scope.socket.log = \"\";\n    $scope.socket.clear = async () => {\n        $scope.socket.log = \"\";\n        $timeout();\n    }\n\n    socket.on(\"connect\", function (data) {\n        if (!data) return;\n        $scope.socket.id = data.sid;\n        socket.emit(\"join\", { id: wiz.data.BRANCH });\n    });\n\n    socket.on(\"log\", function (data) {\n        data = data.replace(/ /gim, \"__SEASONWIZPADDING__\");\n        data = ansi_up.ansi_to_html(data).replace(/\\n/gim, '<br>').replace(/__SEASONWIZPADDING__/gim, '<div style=\"width: 6px; display: inline-block;\"></div>');\n        $scope.socket.log = $scope.socket.log + data;\n        $timeout(function () {\n            $timeout(function () {\n                var element = $('.debug-messages')[0];\n                if (!element) return;\n                element.scrollTo(0, element.scrollHeight);\n            }, 200);\n        });\n    });\n\n    socket.on(\"message\", function (data) {\n        if (data.type == \"status\") {\n            $scope.socket.users = data.users;\n            $timeout();\n        }\n    });\n\n\n    $scope.shortcut = {};\n    $scope.shortcut.configuration = () => {\n        return {\n            'clear': {\n                key: 'Ctrl KeyK',\n                fn: async () => {\n                    await $scope.socket.clear();\n                }\n            }\n        }\n    };\n\n    $scope.shortcut.bind = async () => {\n        $(window).unbind();\n\n        let shortcut_opts = {};\n        let shortcuts = $scope.shortcut.configuration();\n        for (let key in shortcuts) {\n            let keycode = shortcuts[key].key;\n            let fn = shortcuts[key].fn;\n            if (!keycode) continue;\n            shortcut_opts[keycode] = async (ev) => {\n                ev.preventDefault();\n                await fn();\n            };\n        }\n\n        shortcutjs(window, shortcut_opts);\n    }\n\n    window.addEventListener(\"focus\", $scope.shortcut.bind, false);\n}","html":"div(style=\"overflow: hidden; height: 100%; width: 100%;\")\n    .code-select.bg-dark.d-flex\n        select.form-select.form-select-sm.ml-auto.mt-1(ng-model=\"branch\" ng-change=\"change(branch)\" style=\"width: 80px;\")\n            option(ng-repeat=\"branch in branches\" value=\"{{branch}}\") {{branch}}\n        a.btn.btn-square.btn-dark.btn-sm.p-2.ml-1(href=\"\" ng-click=\"socket.clear()\") CLEAR\n    div(style=\"height: calc(100% - 36px);\")\n        .debug-messages(style=\"overflow: auto; max-width: none; width: 100%; height: 100%; background: #000; color: #fff; padding: 8px; line-height: 1;\" ng-bind-html=\"trustAsHtml(socket.log)\")","css":"html, body {\n    overflow: hidden;\n    height: 100%;\n    width: 100%;\n}","compile_css":"off","compile_html":"on","compile_js":"on","controller":"wiz = framework.model(\"wiz\")\nbranch = framework.request.segment.branch\nif branch is None: branch = wiz.workspace.branch()\nkwargs['BRANCH'] = branch\nkwargs['BRANCHES'] = wiz.workspace.branches()"},{"dic":{"default":{}},"id":"core.workspace.models","name":"/models","compile_html":"on","compile_css":"off","compile_js":"on","controller":"wiz = framework.model(\"wiz\")\nfs = wiz.storage()\nif fs.isdir(\"interfaces/model\") == False:\n    fs.makedirs(\"interfaces/model\")\nkwargs[\"BRANCHPATH\"] = wiz.branchpath()\n","js":"const API_URL = \"/wiz/admin/api/file\";\nconst TREE_DATA = [\n    { path: wiz.data.BRANCHPATH + \"/interfaces\", name: \"model\", type: 'folder', icon: 'fa-layer-group', display: \"Model\" }\n];\n\nconst VIEWER_IMAGE_URL = (item) => { \n    return false;\n};\n\nlet wiz_controller = async ($sce, $scope, $timeout) => {\n    _builder($scope, $timeout);\n\n    $scope.math = Math;\n    $scope.trustAsHtml = $sce.trustAsHtml;\n\n    $scope.configuration = {};       // state data for maintaining ui\n    $scope.tree = {};\n    $scope.viewer = {};\n    $scope.shortcut = {};\n    $scope.loading = {};\n    $scope.modal = {};\n    $scope.upload = {};\n\n    /*\n     * define variables\n     */\n    let BUILDER = {};\n\n    let API = {\n        load: (item) => new Promise((resolve) => {\n            let url = API_URL + '/tree';\n            $.post(url, { path: item.path, name: item.name, type: item.type }, function (res) {\n                resolve(res);\n            });\n        }),\n        upload: (data) => new Promise((resolve) => {\n            let url = API_URL + '/upload';\n            $.ajax({\n                url: url,\n                type: 'POST',\n                xhr: () => {\n                    let myXhr = $.ajaxSettings.xhr();\n                    if (myXhr.upload) {\n                        myXhr.upload.addEventListener('progress', function (event) {\n                            let percent = 0;\n                            let position = event.loaded || event.position;\n                            let total = event.total;\n                            if (event.lengthComputable) {\n                                percent = Math.round(position / total * 10000) / 100;\n                            }\n                            $scope.upload.process = percent;\n                            $timeout();\n                        }, false);\n                    }\n                    return myXhr;\n                },\n                data: data,\n                cache: false,\n                contentType: false,\n                processData: false\n            }).always(function (res) {\n                resolve(res);\n            });\n        }),\n        update: (data) => new Promise((resolve) => {\n            let url = API_URL + '/update';\n            $.post(url, data, function (res) {\n                resolve(res);\n            });\n        }),\n        delete: (data) => new Promise((resolve) => {\n            let url = API_URL + '/delete';\n            $.post(url, data, function (res) {\n                resolve(res);\n            });\n        }),\n        delete_bulk: (data) => new Promise((resolve) => {\n            let url = API_URL + '/delete_bulk';\n            $.post(url, { data: JSON.stringify(data) }, function (res) {\n                resolve(res);\n            });\n        }),\n        rename: (data) => new Promise((resolve) => {\n            let url = API_URL + '/rename';\n            $.post(url, data, function (res) {\n                resolve(res);\n            });\n        }),\n        timeout: (ts) => new Promise((resolve) => {\n            $timeout(resolve, ts);\n        })\n    };\n\n    $scope.API = API;\n\n    BUILDER.tree = async () => {\n        $scope.tree.data = TREE_DATA;\n        $scope.tree.parents = {};\n        $scope.tree.current = null;\n\n        $scope.tree.init = async () => {\n            for (let i = 0; i < $scope.tree.data.length; i++) {\n                let item = $scope.tree.data[i];\n                if (item.type == \"folder\" && !item.sub) {\n                    await $scope.tree.load(item, i > 0, false);\n                }\n            }\n        }\n\n        $scope.tree.load = async (item, tree, refresh) => {\n            if (!item) {\n                location.reload();\n                return;\n            }\n            $scope.tree.current = item;\n\n            if ($scope.viewer.has_parent(item) && !refresh) {\n                if (item.sub.length > 0) {\n                    item.sub = [];\n                    if (item.path == $scope.viewer.data.path && item.name == $scope.viewer.data.name)\n                        $scope.viewer.parent(true);\n                    await API.timeout();\n                    return;\n                }\n            }\n\n            if (item.click) {\n                await item.click($scope, item);\n                return;\n            }\n\n            let res = await API.load(item);\n\n            // if result is list of files or folder\n            if (res.code == 200) {\n                item.checked = false;\n                item.sub = res.data;\n\n                if (item.onFolder) {\n                    item = await item.onFolder(item);\n                } else {\n                    item.sub.sort(function (a, b) {\n                        if (a.type == 'folder' && b.type != 'folder') return -1;\n                        if (a.type != 'folder' && b.type == 'folder') return 1;\n                        return a.name.localeCompare(b.name);\n                    });\n\n                    for (var i = 0; i < item.sub.length; i++) {\n                        if (item.sub[i].type == 'file') item.sub[i].icon = 'fa-file'\n                        else if (item.sub[i].type == 'folder') item.sub[i].icon = 'fa-folder'\n                        else item.sub[i].icon = 'fa-caret-right'\n                    }\n                }\n\n                for (var i = 0; i < item.sub.length; i++) {\n                    $scope.tree.parents[item.sub[i].path + \"/\" + item.sub[i].name] = item;\n                }\n\n                if (!tree) {\n                    await $scope.viewer.folder(item);\n                }\n\n                await API.timeout();\n                return;\n            }\n\n            if (res.code == 201) {\n                await $scope.viewer.editor.load(res.data);\n                return;\n            }\n\n            if (res.code == 202) {\n                await $scope.viewer.image(res.data);\n                return;\n            }\n        };\n    }\n\n    BUILDER.upload = async () => {\n        $scope.upload.status = false;\n        $scope.upload.process = 0;\n\n        $scope.upload.run = async (data) => {\n            $scope.upload.status = true;\n            $scope.upload.process = 0;\n            await API.timeout();\n            await API.upload(data);\n            $scope.upload.status = false;\n            await API.timeout();\n            $scope.upload.process = 0;\n            await $scope.tree.load($scope.viewer.data, false, true);\n        }\n    }\n\n    BUILDER.viewer = {};\n\n    BUILDER.viewer.base = async () => {\n        $scope.viewer.parent = async (notreload) => {\n            if (!$scope.viewer.data) return;\n            if (!$scope.viewer.has_parent()) return;\n            let parent = $scope.tree.parents[$scope.viewer.data.path + \"/\" + $scope.viewer.data.name];\n            if (!notreload) {\n\n                await $scope.tree.load(parent, false, true);\n            } else if (parent) {\n                $scope.viewer.data = parent;\n            }\n            await API.timeout();\n        }\n\n        $scope.viewer.drop = {};\n        $scope.viewer.drop = {};\n        $scope.viewer.drop.text = \"Drop File Here!\"\n        $scope.viewer.drop.ondrop = async (e, files) => {\n            let fd = new FormData();\n            let filepath = [];\n            fd.append(\"path\", $scope.viewer.data.path);\n            fd.append(\"name\", $scope.viewer.data.name);\n            for (let i = 0; i < files.length; i++) {\n                fd.append('file[]', files[i]);\n                filepath.push(files[i].filepath);\n            }\n\n            fd.append(\"filepath\", JSON.stringify(filepath));\n            await $scope.upload.run(fd);\n        }\n\n        $scope.viewer.upload = function () {\n            $('#file-upload').click();\n        };\n\n        let fileinput = document.getElementById('file-upload');\n        fileinput.onchange = async () => {\n            let fd = new FormData($('#file-form')[0]);\n            fd.append(\"path\", $scope.viewer.data.path);\n            fd.append(\"name\", $scope.viewer.data.name);\n            await $scope.upload.run(fd);\n        };\n    }\n\n    BUILDER.viewer.folder = async () => {\n        $scope.viewer.folder = async (item) => {\n            $scope.viewer.mode = \"folder\";\n            $scope.viewer.data = item;\n            await API.timeout();\n        }\n\n        $scope.viewer.has_parent = (item) => {\n            if (!item) item = $scope.viewer.data;\n            if ($scope.tree.parents[item.path + '/' + item.name])\n                return true;\n            return false;\n        }\n\n        $scope.viewer.check = async (item) => {\n            item.checked = !item.checked;\n            await API.timeout();\n        }\n\n        $scope.viewer.check_all = async (item) => {\n            item.checked = !item.checked;\n            for (let i = 0; i < item.sub.length; i++)\n                item.sub[i].checked = item.checked;\n            await API.timeout();\n        }\n\n        $scope.viewer.create = async (item, ftype) => {\n            let obj = {};\n            obj.path = item.path + \"/\" + item.name;\n            obj.type = ftype;\n            obj.name = \"\";\n            item.sub.push(obj);\n\n            await API.timeout();\n            await $scope.viewer.change_name(item.sub[item.sub.length - 1]);\n        }\n\n        $scope.viewer.save_name = async () => {\n            let data = angular.copy($scope.viewer.selected);\n            let res = await API.rename(data);\n\n            if (res.code == 402) {\n                toastr.error(res.data);\n                return;\n            }\n\n            if (res.code == 401) {\n                toastr.error(res.data);\n                return;\n            }\n\n            if (res.code == 200) {\n                $scope.viewer.selected.edit = false;\n                $scope.viewer.selected.name = $scope.viewer.selected.rename;\n            }\n\n            await $scope.tree.load($scope.viewer.data, false, true);\n            await API.timeout();\n        }\n\n        $scope.viewer.change_name = async (item) => {\n            if ($scope.viewer.selected)\n                $scope.viewer.selected.edit = false;\n\n            item.edit = true;\n            item.rename = item.name + \"\";\n            $scope.viewer.selected = item;\n            await API.timeout();\n        }\n\n        $scope.viewer.delete = async (item) => {\n            let data = angular.copy(item);\n            let parent = $scope.tree.parents[data.path + \"/\" + data.name];\n            if (data.bulk) {\n                parent = data;\n                let sub = [];\n                for (let i = 0; i < data.sub.length; i++) {\n                    if (data.sub[i].checked) {\n                        sub.push(data.sub[i]);\n                    }\n                }\n                await API.delete_bulk(sub);\n            } else {\n                await API.delete(data);\n            }\n            $scope.modal.data.delete_selected = null;\n            await $scope.tree.load(parent, false, true);\n            $('#modal-delete').modal('hide');\n        }\n    }\n\n    BUILDER.viewer.image = async () => {\n        $scope.viewer.image = async (item) => {\n            let url = VIEWER_IMAGE_URL(item);\n            if (!url) return;\n            $scope.viewer.mode = \"image\";\n            $scope.viewer.data = item;\n            item.url = url;\n            await API.timeout();\n        }\n    }\n\n    BUILDER.viewer.editor = async () => {\n        $scope.viewer.editor = {};\n        $scope.viewer.editor.properties = $scope.monaco(\"python\");\n        $scope.viewer.editor.status = false;\n        $scope.viewer.editor.properties.onLoad = async (editor) => {\n            editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_S, function () {\n                $scope.viewer.save();\n                shortcuts();\n            });\n        };\n\n        $scope.viewer.editor.load = async (item) => {\n            $scope.viewer.mode = \"editor\";\n            $scope.viewer.editor.properties.language = item.language;\n            $scope.viewer.editor.status = false;\n            await API.timeout();\n\n            $scope.viewer.data = item;\n            await API.timeout();\n            $scope.viewer.editor.status = true;\n            await API.timeout();\n        }\n\n        $scope.viewer.save = async () => {\n            let data = angular.copy($scope.viewer.data);\n            let res = await API.update(data);\n            if (res.code == 200) toastr.success('Saved');\n            else toastr.error('Error');\n        }\n    }\n\n    /*\n     * define loading\n     */\n    BUILDER.loading = async () => {\n        $scope.loading.status = true;\n        $scope.loading.show = async () => {\n            $scope.loading.status = true;\n            await API.timeout();\n        }\n\n        $scope.loading.hide = async () => {\n            $scope.loading.status = false;\n            await API.timeout();\n        }\n    }\n\n    /*\n     * define modal events\n     */\n\n    BUILDER.modal = async () => {\n        $scope.modal.data = {};\n        $scope.modal.delete = async (item) => {\n            $scope.modal.data.delete_selected = item;\n            $('#modal-delete').modal('show');\n        }\n\n        $scope.modal.delete_bulk = async (item) => {\n            $scope.modal.data.delete_selected = item;\n            $scope.modal.data.delete_selected.bulk = true;\n            $('#modal-delete').modal('show');\n        }\n    }\n\n    BUILDER.init = async () => {\n        await $scope.tree.init();\n        await $scope.loading.hide();\n    }\n\n    BUILDER.upload();\n    BUILDER.viewer.base();\n    BUILDER.viewer.folder();\n    BUILDER.viewer.image();\n    BUILDER.viewer.editor();\n    BUILDER.tree();\n    BUILDER.loading();\n    BUILDER.modal();\n    BUILDER.init();\n\n    // shortcut\n    function shortcuts() {\n        $(window).unbind();\n        shortcutjs(window, {\n            'Ctrl KeyS': function (ev) {\n                ev.preventDefault();\n                $scope.viewer.save();\n            }\n        });\n    }\n\n    shortcuts();\n    window.addEventListener(\"focus\", shortcuts, false);\n\n    if (window.BUILD_INIT) {\n        BUILD_INIT($scope);\n    }\n}","html":".main-container\n    mixin topbutton()\n        .d-flex(ng-if=\"viewer.mode == 'folder'\")\n            input.mt-1(type=\"checkbox\" ng-click=\"viewer.check_all(viewer.data)\" ng-model=\"viewer.data.checked\")\n            span.ml-2.if-desktop.text-muted {{ viewer.data.path.substring(10) }}/{{viewer.data.name}}\n            span.mr-auto &nbsp;\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer.mr-1(ng-click=\"modal.delete_bulk(viewer.data)\" style=\"height: 20px;\")\n                i.fas.fa-trash\n                span.ml-1.if-desktop Delete\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer.mr-1(ng-click=\"viewer.create(viewer.data, 'folder')\" style=\"height: 20px;\")\n                i.fas.fa-folder-plus\n                span.ml-1.if-desktop New Folder\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer.mr-1(ng-click=\"viewer.create(viewer.data, 'file')\" style=\"height: 20px;\")\n                i.fas.fa-file\n                span.ml-1.if-desktop New File\n\n        .d-flex(ng-if=\"viewer.mode == 'editor'\")\n            span.ml-2.if-desktop.text-muted {{ viewer.data.path.substring(10) }}/{{viewer.data.name}}\n            span.mr-auto &nbsp;\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer.mr-1(ng-click=\"viewer.save()\" style=\"height: 20px;\")\n                i.fas.fa-save\n                span.ml-1.if-desktop Save\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer(ng-click=\"viewer.parent()\" style=\"height: 20px;\" ng-if=\"status.view != 'folder'\")\n                i.fas.fa-times\n\n        .d-flex(ng-if=\"viewer.mode == 'image'\")\n            span.ml-2.if-desktop.text-muted {{ viewer.data.path.substring(10) }}/{{viewer.data.name}}\n            span.mr-auto &nbsp;\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer(ng-click=\"viewer.parent()\" style=\"height: 20px;\" ng-if=\"status.view != 'folder'\")\n                i.fas.fa-times\n\n    div(style=\"display: none;\")\n        form#file-form\n            input#file-upload.form-control(type='file' name='file[]' multiple)\n\n    .bg-dark.text-center(ng-if=\"loading.status\" style=\"width: 100%; height: 100%; position: absolute; top: 0; left: 0; z-index: 99999; padding-top: 40vh; opacity: .6;\")\n        .spinner-grow.text-white(style=\"width: 60px; height: 60px;\")\n    \n    .main-panel.container.p-0(style=\"height: calc(100% - 168px);\")\n        div(data-split-pane data-split-pane-properties=\"configuration.root\")\n            div(data-split-pane-component data-width=\"240px\")\n                div(style=\"height: 100%;\")\n                    .card-body.p-3(style=\"height: 100%; overflow: auto;\")\n                        script(type=\"text/ng-template\" id=\"tree.html\").\n                            <div class=\"filetree\">\n                                <div class=\"title d-flex {{viewer.data.name == item.name && viewer.data.path == item.path ? 'active' : '' }}\" ng-click=\"tree.load(item)\">\n                                    <span>\n                                        <i class=\"fas {{item.icon}} mr-1\"></i>\n                                        <span>{{item.display ? item.display : item.name}}</span>\n                                    </span>\n                                </div>\n                                <div class=\"sub\">\n                                    <div ng-repeat=\"item in item.sub\" ng-include=\"'tree.html'\"></div>\n                                </div>\n                            </div>\n                        \n                        .tree-container\n                            .root-tree(ng-repeat=\"item in tree.data\" ng-include=\"'tree.html'\")\n        \n            div(data-split-pane-divider data-width=\"1px\")\n            \n            div(data-split-pane-component style=\"height: 100%; overflow: hidden;\")\n                .panel-header.p-1.pr-0.pl-2\n                    +topbutton\n\n                .panel-editor(ng-if=\"viewer.mode == 'folder'\" style=\"height: 100%; overflow: auto;\" ng-drop=\"viewer.drop\")\n                    div(style=\"margin: 0 -12px;\" ng-if=\"upload.status\")\n                        .progress.progress-sm\n                            .progress-bar.bg-orange(style=\"width: {{upload.process}}%;\" role='progressbar' aria-valuenow='38' aria-valuemin='0' aria-valuemax='100')\n\n                    table.table.table-hover.mb-6\n                        tr(ng-if=\"viewer.has_parent()\" ng-click=\"viewer.parent()\")\n                            td.pt-0.pb-0.cursor-pointer(colspan=3)\n                                span.mr-2\n                                    svg.icon(xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\")\n                                        path(stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\")\n                                        path(d=\"M18 18h-6a3 3 0 0 1 -3 -3v-10l-4 4m8 0l-4 -4\")\n                                span ...\n\n                        tr.target-file(ng-repeat=\"item in viewer.data.sub\" ng-click=\"viewer.check(item)\")\n                            td.w-1.cursor-pointer.pr-2(style=\"white-space: nowrap;\")\n                                input.mr-2(type=\"checkbox\" ng-model=\"item.checked\" ng-if=\"!item.hide_menu\")\n                                i.fas(class=\"{{item.icon}}\")\n\n                            td.pl-0.pr-0(ng-dblclick=\"tree.load(item)\")\n                                span.title(ng-if=\"!item.edit\" ng-click=\"tree.load(item)\") {{item.name}}\n                                input.form-control.form-control-sm.text-dark(ng-if=\"item.edit\" ng-model=\"viewer.selected.rename\" style=\"color: #000 !important; display: inline-block;\" ng-enter=\"viewer.save_name()\")\n\n                            td.w-1.pl-0.text-right(style=\"white-space: nowrap;\" ng-if=\"!item.hide_menu\")\n                                span.text-dark(ng-if=\"item.edit\" style=\"font-size: 12px; width: 14px;\" ng-click=\"viewer.save_name()\")\n                                    i.fas.fa-check-circle\n                                span.text-dark(ng-if=\"!item.edit\" style=\"font-size: 12px; width: 14px;\" ng-click=\"viewer.change_name(item)\")\n                                    i.fas.fa-italic\n                                span.text-dark.ml-1(ng-if=\"!item.edit\" style=\"font-size: 12px; width: 14px;\" ng-click=\"modal.delete(item)\")\n                                    i.fas.fa-trash\n\n                .panel-editor(ng-if=\"viewer.mode == 'image'\" style=\"height: 100%; overflow: auto;\")\n                    img(ng-src=\"{{viewer.data.url}}\" style=\"width: 100%;\")\n\n                .panel-editor(ng-if=\"viewer.mode == 'editor' && viewer.editor.status\" style=\"height: 100%; overflow: hidden;\")\n                    div(ng-model=\"viewer.data.text\" ui-monaco-opts=\"viewer.editor.properties\" ui-monaco)\n\n    #modal-delete.modal.fade(tabindex=\"-1\")\n        .modal-dialog.modal-sm(role='document')\n            .modal-content\n                .modal-body\n                    .modal-title Delete\n                    div Once deleted, it cannot be restored. Are you sure you want to delete?\n                .modal-footer\n                    button.btn.btn-link.link-secondary.mr-auto(type='button' data-dismiss='modal') Cancel\n                    button.btn.btn-danger(type='button' ng-click=\"viewer.delete(modal.data.delete_selected)\") Delete","css":"html,\nbody {\n\twidth: 100%;\n\theight: 100%;\n\toverflow: hidden;\n}\n\n.main-panel {\n\twidth: 100%;\n}\n\n.filetree {\n\tposition: relative;\n}\n\n.filetree .title {\n\tcursor: pointer;\n\twhite-space: nowrap;\n\ttext-overflow: ellipsis;\n\toverflow: hidden;\n}\n\n.filetree .title .file-actions {\n\tbackground: white;\n\tdisplay: inline-block;\n\tposition: absolute;\n\tright: 0;\n}\n\n.filetree .title:hover {\n\ttext-decoration: underline;\n}\n\n.filetree .title.active {\n\tfont-family: MAIN-EB;\n}\n\n.filetree .sub {\n\tpadding-left: 16px;\n}\n\n.main-panel {\n\tborder: 1px solid #aaa;\n\tborder-top: none;\n}\n\n.main-panel .panel-header {\n\twidth: 100%;\n\tborder-bottom: 1px solid #aaa;\n}\n\n.split-pane-divider {\n\tbackground: #aaa;\n}\n\n.panel-editor i {\n\twidth: 14px;\n}\n\n.panel-editor span {\n\tcursor: pointer;\n}\n\n.panel-editor .target-file:hover span.title {\n\tborder-bottom: 1px solid #000;\n}\n\n.info-form.row {\n\tmargin: 0;\n}\n\n.main-container {\n\theight: 100%;\n\twidth: 100%;\n}","api":""},{"dic":{"default":{}},"id":"core.workspace.resources","name":"/res","compile":"controller","html":".main-container\n    mixin topbutton()\n        .d-flex(ng-if=\"viewer.mode == 'folder'\")\n            input.mt-1(type=\"checkbox\" ng-click=\"viewer.check_all(viewer.data)\" ng-model=\"viewer.data.checked\")\n            span.ml-2.if-desktop.text-muted {{ viewer.data.path.substring(10) }}/{{viewer.data.name}}\n            span.mr-auto &nbsp;\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer.mr-1(ng-click=\"modal.delete_bulk(viewer.data)\" style=\"height: 20px;\")\n                i.fas.fa-trash\n                span.ml-1.if-desktop Delete\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer.mr-1(ng-click=\"viewer.create(viewer.data, 'folder')\" style=\"height: 20px;\")\n                i.fas.fa-folder-plus\n                span.ml-1.if-desktop New Folder\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer.mr-1(ng-click=\"viewer.create(viewer.data, 'file')\" style=\"height: 20px;\")\n                i.fas.fa-file\n                span.ml-1.if-desktop New File\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer.mr-1(ng-click=\"viewer.upload()\" style=\"height: 20px;\")\n                i.fas.fa-cloud-upload-alt\n                span.ml-1.if-desktop Upload\n\n        .d-flex(ng-if=\"viewer.mode == 'editor'\")\n            span.ml-2.if-desktop.text-muted {{ viewer.data.path.substring(10) }}/{{viewer.data.name}}\n            span.mr-auto &nbsp;\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer.mr-1(ng-click=\"viewer.save()\" style=\"height: 20px;\")\n                i.fas.fa-save\n                span.ml-1.if-desktop Save\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer(ng-click=\"viewer.parent()\" style=\"height: 20px;\" ng-if=\"status.view != 'folder'\")\n                i.fas.fa-times\n\n        .d-flex(ng-if=\"viewer.mode == 'image'\")\n            span.ml-2.if-desktop.text-muted {{ viewer.data.path.substring(10) }}/{{viewer.data.name}}\n            span.mr-auto &nbsp;\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer(ng-click=\"viewer.parent()\" style=\"height: 20px;\" ng-if=\"status.view != 'folder'\")\n                i.fas.fa-times\n\n    div(style=\"display: none;\")\n        form#file-form\n            input#file-upload.form-control(type='file' name='file[]' multiple)\n\n    .bg-dark.text-center(ng-if=\"loading.status\" style=\"width: 100%; height: 100%; position: absolute; top: 0; left: 0; z-index: 99999; padding-top: 40vh; opacity: .6;\")\n        .spinner-grow.text-white(style=\"width: 60px; height: 60px;\")\n    \n    .main-panel.container.p-0(style=\"height: calc(100% - 168px);\")\n        div(data-split-pane data-split-pane-properties=\"configuration.root\")\n            div(data-split-pane-component data-width=\"240px\")\n                div(style=\"height: 100%;\")\n                    .card-body.p-3(style=\"height: 100%; overflow: auto;\")\n                        script(type=\"text/ng-template\" id=\"tree.html\").\n                            <div class=\"filetree\">\n                                <div class=\"title d-flex {{viewer.data.name == item.name && viewer.data.path == item.path ? 'active' : '' }}\" ng-click=\"tree.load(item)\">\n                                    <span>\n                                        <i class=\"fas {{item.icon}} mr-1\"></i>\n                                        <span>{{item.display ? item.display : item.name}}</span>\n                                    </span>\n                                </div>\n                                <div class=\"sub\">\n                                    <div ng-repeat=\"item in item.sub\" ng-include=\"'tree.html'\"></div>\n                                </div>\n                            </div>\n                        \n                        .tree-container\n                            .root-tree(ng-repeat=\"item in tree.data\" ng-include=\"'tree.html'\")\n        \n            div(data-split-pane-divider data-width=\"1px\")\n            \n            div(data-split-pane-component style=\"height: 100%; overflow: hidden;\")\n                .panel-header.p-1.pr-0.pl-2\n                    +topbutton\n\n                .panel-editor(ng-if=\"viewer.mode == 'folder'\" style=\"height: 100%; overflow: auto;\" ng-drop=\"viewer.drop\")\n                    div(style=\"margin: 0 -12px;\" ng-if=\"upload.status\")\n                        .progress.progress-sm\n                            .progress-bar.bg-orange(style=\"width: {{upload.process}}%;\" role='progressbar' aria-valuenow='38' aria-valuemin='0' aria-valuemax='100')\n\n                    table.table.table-hover.mb-6\n                        tr(ng-if=\"viewer.has_parent()\" ng-click=\"viewer.parent()\")\n                            td.pt-0.pb-0.cursor-pointer(colspan=3)\n                                span.mr-2\n                                    svg.icon(xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\")\n                                        path(stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\")\n                                        path(d=\"M18 18h-6a3 3 0 0 1 -3 -3v-10l-4 4m8 0l-4 -4\")\n                                span ...\n\n                        tr.target-file(ng-repeat=\"item in viewer.data.sub\" ng-click=\"viewer.check(item)\")\n                            td.w-1.cursor-pointer.pr-2(style=\"white-space: nowrap;\")\n                                input.mr-2(type=\"checkbox\" ng-model=\"item.checked\" ng-if=\"!item.hide_menu\")\n                                i.fas(class=\"{{item.icon}}\")\n\n                            td.pl-0.pr-0(ng-dblclick=\"tree.load(item)\")\n                                span.title(ng-if=\"!item.edit\" ng-click=\"tree.load(item)\") {{item.name}}\n                                input.form-control.form-control-sm.text-dark(ng-if=\"item.edit\" ng-model=\"viewer.selected.rename\" style=\"color: #000 !important; display: inline-block;\" ng-enter=\"viewer.save_name()\")\n\n                            td.w-1.pl-0.text-right(style=\"white-space: nowrap;\" ng-if=\"!item.hide_menu\")\n                                span.text-dark(ng-if=\"item.edit\" style=\"font-size: 12px; width: 14px;\" ng-click=\"viewer.save_name()\")\n                                    i.fas.fa-check-circle\n                                span.text-dark(ng-if=\"!item.edit\" style=\"font-size: 12px; width: 14px;\" ng-click=\"viewer.change_name(item)\")\n                                    i.fas.fa-italic\n                                span.text-dark.ml-1(ng-if=\"!item.edit\" style=\"font-size: 12px; width: 14px;\" ng-click=\"modal.delete(item)\")\n                                    i.fas.fa-trash\n\n                .panel-editor(ng-if=\"viewer.mode == 'image'\" style=\"height: 100%; overflow: auto;\")\n                    img(ng-src=\"{{viewer.data.url}}\" style=\"width: 100%;\")\n\n                .panel-editor(ng-if=\"viewer.mode == 'editor' && viewer.editor.status\" style=\"height: 100%; overflow: hidden;\")\n                    div(ng-model=\"viewer.data.text\" ui-monaco-opts=\"viewer.editor.properties\" ui-monaco)\n\n    #modal-delete.modal.fade(tabindex=\"-1\")\n        .modal-dialog.modal-sm(role='document')\n            .modal-content\n                .modal-body\n                    .modal-title Delete\n                    div Once deleted, it cannot be restored. Are you sure you want to delete?\n                .modal-footer\n                    button.btn.btn-link.link-secondary.mr-auto(type='button' data-dismiss='modal') Cancel\n                    button.btn.btn-danger(type='button' ng-click=\"viewer.delete(modal.data.delete_selected)\") Delete","js":"const API_URL = \"/wiz/admin/api/file\";\nconst LOCALSTORAGEID = \"season.wiz.resources.properties\";\nconst TREE_DATA = [\n    { path: wiz.data.BRANCHPATH, name: \"resources\", type: 'folder', icon: 'fa-layer-group', display: \"Resources\" }\n];\nconst VIEWER_IMAGE_URL = (item) => {\n    let url = item.url;\n    url = url.split(\"/\");\n    url = url.splice(3);\n    url = url.join(\"/\");\n    return \"/\" + url;\n};\n\nlet wiz_controller = async ($sce, $scope, $timeout) => {\n    _builder($scope, $timeout);\n\n    $scope.math = Math;\n    $scope.trustAsHtml = $sce.trustAsHtml;\n\n    $scope.configuration = {};       // state data for maintaining ui\n    $scope.tree = {};\n    $scope.viewer = {};\n    $scope.shortcut = {};\n    $scope.loading = {};\n    $scope.modal = {};\n    $scope.upload = {};\n\n    /*\n     * define variables\n     */\n    let BUILDER = {};\n\n    let API = {\n        load: (item) => new Promise((resolve) => {\n            let url = API_URL + '/tree';\n            $.post(url, { path: item.path, name: item.name, type: item.type }, function (res) {\n                resolve(res);\n            });\n        }),\n        upload: (data) => new Promise((resolve) => {\n            let url = API_URL + '/upload';\n            $.ajax({\n                url: url,\n                type: 'POST',\n                xhr: () => {\n                    let myXhr = $.ajaxSettings.xhr();\n                    if (myXhr.upload) {\n                        myXhr.upload.addEventListener('progress', function (event) {\n                            let percent = 0;\n                            let position = event.loaded || event.position;\n                            let total = event.total;\n                            if (event.lengthComputable) {\n                                percent = Math.round(position / total * 10000) / 100;\n                            }\n                            $scope.upload.process = percent;\n                            $timeout();\n                        }, false);\n                    }\n                    return myXhr;\n                },\n                data: data,\n                cache: false,\n                contentType: false,\n                processData: false\n            }).always(function (res) {\n                resolve(res);\n            });\n        }),\n        update: (data) => new Promise((resolve) => {\n            let url = API_URL + '/update';\n            $.post(url, data, function (res) {\n                resolve(res);\n            });\n        }),\n        delete: (data) => new Promise((resolve) => {\n            let url = API_URL + '/delete';\n            $.post(url, data, function (res) {\n                resolve(res);\n            });\n        }),\n        delete_bulk: (data) => new Promise((resolve) => {\n            let url = API_URL + '/delete_bulk';\n            $.post(url, { data: JSON.stringify(data) }, function (res) {\n                resolve(res);\n            });\n        }),\n        rename: (data) => new Promise((resolve) => {\n            let url = API_URL + '/rename';\n            $.post(url, data, function (res) {\n                resolve(res);\n            });\n        }),\n        timeout: (ts) => new Promise((resolve) => {\n            $timeout(resolve, ts);\n        })\n    };\n\n    $scope.API = API;\n\n    BUILDER.tree = async () => {\n        $scope.tree.data = TREE_DATA;\n        $scope.tree.parents = {};\n        $scope.tree.current = null;\n\n        $scope.tree.init = async () => {\n            for (let i = 0; i < $scope.tree.data.length; i++) {\n                let item = $scope.tree.data[i];\n                if (item.type == \"folder\" && !item.sub) {\n                    await $scope.tree.load(item, i > 0, false);\n                }\n            }\n        }\n\n        $scope.tree.load = async (item, tree, refresh) => {\n            if (!item) {\n                location.reload();\n                return;\n            }\n            $scope.tree.current = item;\n\n            if ($scope.viewer.has_parent(item) && !refresh) {\n                if (item.sub.length > 0) {\n                    item.sub = [];\n                    if (item.path == $scope.viewer.data.path && item.name == $scope.viewer.data.name)\n                        $scope.viewer.parent(true);\n                    await API.timeout();\n                    return;\n                }\n            }\n\n            if (item.click) {\n                await item.click($scope, item);\n                return;\n            }\n\n            let res = await API.load(item);\n\n            // if result is list of files or folder\n            if (res.code == 200) {\n                item.checked = false;\n                item.sub = res.data;\n\n                if (item.onFolder) {\n                    item = await item.onFolder(item);\n                } else {\n                    item.sub.sort(function (a, b) {\n                        if (a.type == 'folder' && b.type != 'folder') return -1;\n                        if (a.type != 'folder' && b.type == 'folder') return 1;\n                        return a.name.localeCompare(b.name);\n                    });\n\n                    for (var i = 0; i < item.sub.length; i++) {\n                        if (item.sub[i].type == 'file') item.sub[i].icon = 'fa-file'\n                        else if (item.sub[i].type == 'folder') item.sub[i].icon = 'fa-folder'\n                        else item.sub[i].icon = 'fa-caret-right'\n                    }\n                }\n\n                for (var i = 0; i < item.sub.length; i++) {\n                    $scope.tree.parents[item.sub[i].path + \"/\" + item.sub[i].name] = item;\n                }\n\n                if (!tree) {\n                    await $scope.viewer.folder(item);\n                }\n\n                await API.timeout();\n                return;\n            }\n\n            if (res.code == 201) {\n                await $scope.viewer.editor.load(res.data);\n                return;\n            }\n\n            if (res.code == 202) {\n                await $scope.viewer.image(res.data);\n                return;\n            }\n        };\n    }\n\n    BUILDER.upload = async () => {\n        $scope.upload.status = false;\n        $scope.upload.process = 0;\n\n        $scope.upload.run = async (data) => {\n            $scope.upload.status = true;\n            $scope.upload.process = 0;\n            await API.timeout();\n            await API.upload(data);\n            $scope.upload.status = false;\n            await API.timeout();\n            $scope.upload.process = 0;\n            await $scope.tree.load($scope.viewer.data, false, true);\n        }\n    }\n\n    BUILDER.viewer = {};\n\n    BUILDER.viewer.base = async () => {\n        $scope.viewer.parent = async (notreload) => {\n            if (!$scope.viewer.data) return;\n            if (!$scope.viewer.has_parent()) return;\n            let parent = $scope.tree.parents[$scope.viewer.data.path + \"/\" + $scope.viewer.data.name];\n            if (!notreload) {\n\n                await $scope.tree.load(parent, false, true);\n            } else if (parent) {\n                $scope.viewer.data = parent;\n            }\n            await API.timeout();\n        }\n\n        $scope.viewer.drop = {};\n        $scope.viewer.drop = {};\n        $scope.viewer.drop.text = \"Drop File Here!\"\n        $scope.viewer.drop.ondrop = async (e, files) => {\n            let fd = new FormData();\n            let filepath = [];\n            fd.append(\"path\", $scope.viewer.data.path);\n            fd.append(\"name\", $scope.viewer.data.name);\n            for (let i = 0; i < files.length; i++) {\n                fd.append('file[]', files[i]);\n                filepath.push(files[i].filepath);\n            }\n\n            fd.append(\"filepath\", JSON.stringify(filepath));\n            await $scope.upload.run(fd);\n        }\n\n        $scope.viewer.upload = function () {\n            $('#file-upload').click();\n        };\n\n        let fileinput = document.getElementById('file-upload');\n        fileinput.onchange = async () => {\n            let fd = new FormData($('#file-form')[0]);\n            fd.append(\"path\", $scope.viewer.data.path);\n            fd.append(\"name\", $scope.viewer.data.name);\n            await $scope.upload.run(fd);\n        };\n    }\n\n    BUILDER.viewer.folder = async () => {\n        $scope.viewer.folder = async (item) => {\n            $scope.viewer.mode = \"folder\";\n            $scope.viewer.data = item;\n            await API.timeout();\n        }\n\n        $scope.viewer.has_parent = (item) => {\n            if (!item) item = $scope.viewer.data;\n            if ($scope.tree.parents[item.path + '/' + item.name])\n                return true;\n            return false;\n        }\n\n        $scope.viewer.check = async (item) => {\n            item.checked = !item.checked;\n            await API.timeout();\n        }\n\n        $scope.viewer.check_all = async (item) => {\n            item.checked = !item.checked;\n            for (let i = 0; i < item.sub.length; i++)\n                item.sub[i].checked = item.checked;\n            await API.timeout();\n        }\n\n        $scope.viewer.create = async (item, ftype) => {\n            let obj = {};\n            obj.path = item.path + \"/\" + item.name;\n            obj.type = ftype;\n            obj.name = \"\";\n            item.sub.push(obj);\n\n            await API.timeout();\n            await $scope.viewer.change_name(item.sub[item.sub.length - 1]);\n        }\n\n        $scope.viewer.save_name = async () => {\n            let data = angular.copy($scope.viewer.selected);\n            let res = await API.rename(data);\n\n            if (res.code == 402) {\n                toastr.error(res.data);\n                return;\n            }\n\n            if (res.code == 401) {\n                toastr.error(res.data);\n                return;\n            }\n\n            if (res.code == 200) {\n                $scope.viewer.selected.edit = false;\n                $scope.viewer.selected.name = $scope.viewer.selected.rename;\n            }\n\n            await $scope.tree.load($scope.viewer.data, false, true);\n            await API.timeout();\n        }\n\n        $scope.viewer.change_name = async (item) => {\n            if ($scope.viewer.selected)\n                $scope.viewer.selected.edit = false;\n\n            item.edit = true;\n            item.rename = item.name + \"\";\n            $scope.viewer.selected = item;\n            await API.timeout();\n        }\n\n        $scope.viewer.delete = async (item) => {\n            let data = angular.copy(item);\n            let parent = $scope.tree.parents[data.path + \"/\" + data.name];\n            if (data.bulk) {\n                parent = data;\n                let sub = [];\n                for (let i = 0; i < data.sub.length; i++) {\n                    if (data.sub[i].checked) {\n                        sub.push(data.sub[i]);\n                    }\n                }\n                await API.delete_bulk(sub);\n            } else {\n                await API.delete(data);\n            }\n            $scope.modal.data.delete_selected = null;\n            await $scope.tree.load(parent, false, true);\n            $('#modal-delete').modal('hide');\n        }\n    }\n\n    BUILDER.viewer.image = async () => {\n        $scope.viewer.image = async (item) => {\n            let url = VIEWER_IMAGE_URL(item);\n            if (!url) return;\n            $scope.viewer.mode = \"image\";\n            $scope.viewer.data = item;\n            item.url = url;\n            await API.timeout();\n        }\n    }\n\n    BUILDER.viewer.editor = async () => {\n        $scope.viewer.editor = {};\n        $scope.viewer.editor.properties = $scope.monaco(\"python\");\n        $scope.viewer.editor.status = false;\n        $scope.viewer.editor.properties.onLoad = async (editor) => {\n            editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_S, function () {\n                $scope.viewer.save();\n                shortcuts();\n            });\n        };\n\n        $scope.viewer.editor.load = async (item) => {\n            $scope.viewer.mode = \"editor\";\n            $scope.viewer.editor.properties.language = item.language;\n            $scope.viewer.editor.status = false;\n            await API.timeout();\n\n            $scope.viewer.data = item;\n            await API.timeout();\n            $scope.viewer.editor.status = true;\n            await API.timeout();\n        }\n\n        $scope.viewer.save = async () => {\n            let data = angular.copy($scope.viewer.data);\n            let res = await API.update(data);\n            if (res.code == 200) toastr.success('Saved');\n            else toastr.error('Error');\n        }\n    }\n\n    /*\n     * define loading\n     */\n    BUILDER.loading = async () => {\n        $scope.loading.status = true;\n        $scope.loading.show = async () => {\n            $scope.loading.status = true;\n            await API.timeout();\n        }\n\n        $scope.loading.hide = async () => {\n            $scope.loading.status = false;\n            await API.timeout();\n        }\n    }\n\n    /*\n     * define modal events\n     */\n\n    BUILDER.modal = async () => {\n        $scope.modal.data = {};\n        $scope.modal.delete = async (item) => {\n            $scope.modal.data.delete_selected = item;\n            $('#modal-delete').modal('show');\n        }\n\n        $scope.modal.delete_bulk = async (item) => {\n            $scope.modal.data.delete_selected = item;\n            $scope.modal.data.delete_selected.bulk = true;\n            $('#modal-delete').modal('show');\n        }\n    }\n\n    BUILDER.init = async () => {\n        await $scope.tree.init();\n        await $scope.loading.hide();\n    }\n\n    BUILDER.upload();\n    BUILDER.viewer.base();\n    BUILDER.viewer.folder();\n    BUILDER.viewer.image();\n    BUILDER.viewer.editor();\n    BUILDER.tree();\n    BUILDER.loading();\n    BUILDER.modal();\n    BUILDER.init();\n\n    // shortcut\n    function shortcuts() {\n        $(window).unbind();\n        shortcutjs(window, {\n            'Ctrl KeyS': function (ev) {\n                ev.preventDefault();\n                $scope.viewer.save();\n            }\n        });\n    }\n\n    shortcuts();\n    window.addEventListener(\"focus\", shortcuts, false);\n\n    if (window.BUILD_INIT) {\n        BUILD_INIT($scope);\n    }\n}","controller":"wiz = framework.model(\"wiz\")\nfs = wiz.storage()\nif fs.isdir(\"resources\") == False:\n    fs.makedirs(\"resources\")\nkwargs[\"BRANCHPATH\"] = wiz.branchpath()\n","css":"html,\nbody {\n\twidth: 100%;\n\theight: 100%;\n\toverflow: hidden;\n}\n\n.main-panel {\n\twidth: 100%;\n}\n\n.filetree {\n\tposition: relative;\n}\n\n.filetree .title {\n\tcursor: pointer;\n\twhite-space: nowrap;\n\ttext-overflow: ellipsis;\n\toverflow: hidden;\n}\n\n.filetree .title .file-actions {\n\tbackground: white;\n\tdisplay: inline-block;\n\tposition: absolute;\n\tright: 0;\n}\n\n.filetree .title:hover {\n\ttext-decoration: underline;\n}\n\n.filetree .title.active {\n\tfont-family: MAIN-EB;\n}\n\n.filetree .sub {\n\tpadding-left: 16px;\n}\n\n.main-panel {\n\tborder: 1px solid #aaa;\n\tborder-top: none;\n}\n\n.main-panel .panel-header {\n\twidth: 100%;\n\tborder-bottom: 1px solid #aaa;\n}\n\n.split-pane-divider {\n\tbackground: #aaa;\n}\n\n.panel-editor i {\n\twidth: 14px;\n}\n\n.panel-editor span {\n\tcursor: pointer;\n}\n\n.panel-editor .target-file:hover span.title {\n\tborder-bottom: 1px solid #000;\n}\n\n.info-form.row {\n\tmargin: 0;\n}\n\n.main-container {\n\theight: 100%;\n\twidth: 100%;\n}","compile_html":"on","compile_css":"off","compile_js":"on","api":""},{"dic":{"default":{}},"id":"core.workspace.routes.editor","name":"/routes/editor","compile_html":"on","compile_css":"off","compile_js":"on","css":"@media (min-width:769px) {\n    html, body {\n        overflow: hidden;\n    }\n    .panel-layout {\n        padding-top: 64px;\n    }\n    .panel-layout .panel-menu {\n        position: fixed;\n        width: 360px;\n        height: 100%;\n        top: 0;\n        left: 0;\n        padding-top: 64px;\n        overflow: auto;\n        z-index: 1001;\n    }\n    .panel-layout .panel-submenu {\n        position: fixed;\n        width: 0;\n        height: 100%;\n        top: 0;\n        left: 360px;\n        padding-top: 64px;\n        overflow: auto;\n        z-index: 1001;\n    }\n    .panel-layout .panel-context {\n        padding-left: 360px;\n        height: 100%;\n    }\n    .fixed-top#top-nav .container-xl {\n        max-width: none;\n    }\n    /* side menu off */\n    .sidemenu-off .panel-menu {\n        width: 76px;\n    }\n    .sidemenu-off .panel-menu .menu-layout {\n        padding: 0 !important;\n    }\n    .sidemenu-off .panel-menu h3 {\n        text-align: center;\n    }\n    .sidemenu-off .panel-menu h3 i {\n        padding: 16px !important;\n    }\n    .sidemenu-off .panel-menu .minify {\n        display: none;\n    }\n    .sidemenu-off .panel-menu .layout-selector {\n        padding: 4px !important;\n    }\n    .sidemenu-off .button-container {\n        padding: 0 8px;\n    }\n    .sidemenu-off .panel-context {\n        padding-left: 76px;\n        height: 100%;\n    }\n}\n\n.layout-icon {\n    display: inline-table;\n    width: 60px;\n    height: 60px;\n    border: 2px solid #ffffff;\n    border-radius: 10%;\n}\n\n.layout-icon .layout-row, .layout-icon .layout-column {\n    height: 60px;\n}\n\n.layout-icon.rows-2 .layout-row, .layout-icon.rows-2 .layout-column {\n    height: 30px;\n}\n\n.layout-icon .layout-row {\n    display: table-row;\n}\n\n.layout-icon .layout-row .layout-column {\n    border-bottom: 2px solid #ffffff;\n}\n\n.layout-icon .layout-row:last-child .layout-column {\n    border-bottom-color: transparent;\n}\n\n.layout-icon .layout-column {\n    display: table-cell;\n    border-right: 2px solid #ffffff;\n}\n\n.layout-icon .layout-column:last-child {\n    border-right-color: transparent;\n}\n\n.layout-selector {\n    display: inline-block;\n    line-height: 0;\n    border-radius: 10%;\n    cursor: pointer;\n}\n\n.layout-selector:hover, .layout-selector.active {\n    background: #ffffff;\n}\n\n.layout-selector:hover .layout-icon, .layout-selector.active .layout-icon {\n    border-color: #354052;\n}\n\n.layout-selector:hover .layout-icon .layout-row, .layout-selector.active .layout-icon .layout-row {\n    display: table-row;\n}\n\n.layout-selector:hover .layout-icon .layout-row .layout-column, .layout-selector.active .layout-icon .layout-row .layout-column {\n    border-bottom: 2px solid #354052;\n}\n\n.layout-selector:hover .layout-icon .layout-row:last-child .layout-column, .layout-selector.active .layout-icon .layout-row:last-child .layout-column {\n    border-bottom-color: transparent;\n}\n\n.layout-selector:hover .layout-icon .layout-column, .layout-selector.active .layout-icon .layout-column {\n    display: table-cell;\n    border-right: 2px solid #354052;\n}\n\n.layout-selector:hover .layout-icon .layout-column:last-child, .layout-selector.active .layout-icon .layout-column:last-child {\n    border-right-color: transparent;\n}\n\n.code-tabs tr, .code-tabs td {\n    border: none;\n    padding: 0;\n}\n\n.fixed-top#top-nav .container-xl {\n    max-width: none;\n}\n\n.code-table {\n    table-layout: fixed;\n}\n\n.code-table td {\n    /* border-right: 1px solid rgba(110, 117, 130, .2); */\n}\n\n.code-table td.gutter {\n    width: 1px;\n    background: rgba(110, 117, 130, .2);\n    cursor: col-resize;\n}\n\n.code-table tr.gutter {\n    width: 1px;\n    background: rgba(110, 117, 130, .2);\n    cursor: row-resize;\n}\n\n.code-table .code-tr td {\n    height: calc(50vh - 104px + 54px - 15px);\n    overflow: hidden;\n    vertical-align: top;\n}\n\n.code-table .code-tr td .code-input {\n    height: calc(50vh - 104px + 54px - 16px);\n    overflow: hidden;\n}\n\n.code-table .code-tr td .code-input .CodeMirror {\n    height: calc(50vh - 104px + 54px - 16px);\n    display: block;\n}\n\n.h-full .code-table .code-tr td {\n    height: calc(100vh - 183px + 84px) !important;\n}\n\n.h-full .code-table .code-tr td .code-input {\n    max-height: calc(100vh - 183px + 84px) !important;\n}\n\n.h-full .code-table .code-tr td .code-input .CodeMirror {\n    height: calc(100vh - 183px + 84px) !important;\n}\n\n.panel-context {\n    overflow: hidden !important;\n}\n\n.unselectable * {\n    -moz-user-select: -moz-none;\n    -khtml-user-select: none;\n    -webkit-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n}\n\n.code-tabs td {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\nhtml, body {\n    height: 100%;\n    min-height: 100%;\n    margin: 0;\n    padding: 0;\n}\n\nbody {\n    padding-top: 64px;\n}\n\n.split-pane-divider {\n    background: #aaa;\n}\n\n.split-pane-component {\n    background: #fff;\n}\n\n.btn-group button {\n    box-shadow: none;\n}\n\n.tree-container {\n    color: #fff;\n    font-size: 16px;\n}\n\n.tree-container .root-title {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    cursor: pointer;\n}\n\n.tree-container .root-tree.active {\n    background: rgba(255, 255, 255, .1);\n    border-radius: 4px;\n}\n\n\n.tree-container .sub .sub-title {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    margin-left: 16px;\n    padding-left: 8px;\n    margin-bottom: 4px;\n    white-space: nowrap;\n    cursor: pointer;\n}\n\n.tree-container .sub .sub-title.active {\n    background: #fff !important;\n    color: rgb(110, 117, 130);\n}\n\n.tree-container .sub .sub-title:hover {\n    background: rgba(255, 255, 255, .1);\n}\n\n.tree-container .root-title:hover {\n    background: rgba(255, 255, 255, .1);\n}\n\nth.text-center {\n    white-space: nowrap;\n}\n\n.tree-container span.namespace {\n    font-size: 14px;\n    color: rgba(255, 255, 255, .6);\n}\n\n.tree-container .sub .sub-title.active span.namespace {\n    color: rgba(0, 0, 0, .6);\n}\n\n","js":"const IS_DEV = wiz.data.IS_DEV;\nconst BRANCH = wiz.data.BRANCH;\nconst BRANCHES = wiz.data.BRANCHES;\nconst CTRLS = wiz.data.CTRLS;\nconst APPID = wiz.data.APPID;\n\nconst APPMODE = BRANCH + \".route\";\nconst LOCALSTORAGEID = \"season.wiz.route.configuration.2\";\nconst APP_URL = \"/wiz/admin/workspace/routes/\";\nlet API_URL = wiz.API.url(\"\");\nAPI_URL = API_URL.substring(0, API_URL.length - 1);\n\nconst TABS = ['controller', 'dic', \"preview\"];\nconst CODELIST = [\n    { id: 'controller', name: 'Controller' },\n    { id: 'dic', name: 'Dictionary' },\n    { id: 'preview', name: 'Preview' }\n];\nconst CODETYPES = {\n    html: ['pug', 'html'],\n    js: ['javascript', 'typescript'],\n    css: ['less', 'css', 'scss']\n};\nlet LANGSELECTOR = ($scope) => {\n    return async (tab) => {\n        var obj = $scope.configuration.tab[tab + '_val'];\n        if (obj == 'controller') return 'python';\n        if (obj == 'dic') return 'json';\n        return 'python';\n    }\n};\nlet PROPERTY_WATCHER = async ($scope, key) => {\n};\nlet ADDON = async ($scope) => {\n    let API = $scope.API;\n\n    API.search_apps = () => new Promise((resolve) => {\n        let url = '/wiz/admin/api/plugin/core.workspace/core.workspace.apps.editor/search';\n        $.get(url, function (res) {\n            resolve(res);\n        });\n    });\n\n    $scope.mode = \"route\";\n    $scope.extdata = {};\n    $scope.extdata.controller = CTRLS;\n    $scope.extdata.branch = BRANCH;\n    $scope.extdata.branches = BRANCHES;\n\n    $scope.extdata.browse_active = 'route';\n\n    $scope.extdata.change_browse = async (tab) => {\n        $scope.extdata.browse_active = tab;\n        await API.timeout();\n    }\n\n    $scope.extdata.browse_search = async (val) => {\n        val = val.toLowerCase();\n        for (var i = 0; i < $scope.extdata.apps.length; i++) {\n            let searchindex = ['title', 'namespace', 'id', 'route'];\n            $scope.extdata.apps[i].hide = true;\n            for (let j = 0; j < searchindex.length; j++) {\n                try {\n                    let key = searchindex[j];\n                    let keyv = $scope.extdata.apps[i].package[key].toLowerCase();\n                    if (keyv.includes(val)) {\n                        $scope.extdata.apps[i].hide = false;\n                        break;\n                    }\n                } catch (e) {\n                }\n            }\n            if (val.length == 0)\n                $scope.extdata.apps[i].hide = false;\n        }\n\n        await API.timeout();\n    }\n\n    $scope.extdata.browse_select = async (item) => {\n        let route = $scope.app.data.package.route;\n        $scope.app.data.controller = $scope.app.data.controller + \"\\n\" + 'wiz.response.render(\"' + route + '\", \"' + item.package.namespace + '\")'\n        await API.timeout();\n    }\n\n    let res = await API.search_apps();\n    if (res.code == 200) {\n        $scope.extdata.apps = res.data;\n    }\n}\nlet PREVIEW_URL = async (app_id) => {\n    return \"\";\n}\n\nlet wiz_controller = async ($sce, $scope, $timeout) => {\n    _builder($scope, $timeout);\n\n    let hash = location.hash.split(\"#\")[1];\n    if (hash) {\n        let path = location.pathname.split(\"/\");\n        path = path.splice(0, path.length - 1);\n        path.push(hash);\n        path = path.join(\"/\");\n        location.href = path;\n    }\n\n    /*\n     * define variables\n     */\n    let BUILDER = {};\n\n    let API = {\n        handler: (resolve, reject) => async (res) => {\n            if (res.code == 200) resolve(res.data);\n            else reject(res);\n        },\n        search: () => new Promise((resolve) => {\n            let url = API_URL + '/search';\n            $.get(url, function (res) {\n                resolve(res);\n            });\n        }),\n        load: (app_id) => new Promise((resolve) => {\n            let url = API_URL + '/info/' + app_id;\n            $.get(url, function (res) {\n                resolve(res);\n            });\n        }),\n        update: (data) => new Promise((resolve) => {\n            let app_id = data.package.id;\n            let url = API_URL + '/update/' + app_id;\n            $.post(url, { info: JSON.stringify(data) }, function (res) {\n                resolve(res);\n            });\n        }),\n        diff: (app_id, commit) => new Promise((resolve, reject) => {\n            let url = API_URL + '/diff/' + app_id + '/' + commit;\n            $.get(url, function (res) {\n                $.get(url, API.handler(resolve, reject));\n            });\n        }),\n        history: () => new Promise((resolve, reject) => {\n            let url = API_URL + '/history';\n            $.get(url, API.handler(resolve, reject));\n        }),\n        delete: (app_id) => new Promise((resolve) => {\n            let url = API_URL + '/delete/' + app_id;\n            $.get(url, function (res) {\n                resolve(res);\n            });\n        }),\n        clean: () => new Promise((resolve, reject) => {\n            $.get('/wiz/admin/setting/api/config/clean', API.handler(resolve, reject));\n        }),\n        timeout: (ts) => new Promise((resolve) => {\n            $timeout(resolve, ts);\n        })\n    };\n\n    $scope.API = API;\n\n    /*\n     * define variables of scope\n     */\n    $scope.math = Math;\n    $scope.trustAsHtml = $sce.trustAsHtml;\n    $scope.configuration = {};       // state data for maintaining ui\n    $scope.layout = {};              // controller for layout\n    $scope.workspace = {};           // controller for workspace\n    $scope.loading = {};             // controller for display loading\n    $scope.modal = {};               // controller for modal\n    $scope.plugin = {};              // manage plugins for ui components\n    $scope.app = {};                 // controller for code editor\n    $scope.browse = {};              // controller for code editor\n    $scope.shortcut = {};\n    $scope.socket = {};\n    $scope.history = {};\n    $scope.viewer = {};\n\n    /* \n     * load wiz editor options from localstorage\n     */\n    try {\n        let configuration = JSON.parse(localStorage[LOCALSTORAGEID]);\n        try { delete configuration.layout.opts.root.lastComponentSize; } catch (e) { }\n        $scope.configuration = configuration;\n    } catch (e) {\n        $scope.configuration = {};\n        $scope.configuration.tab = {};\n        $scope.configuration.tab['tab1_val'] = TABS[0];\n        $scope.configuration.tab['tab2_val'] = TABS[1];\n        $scope.configuration.tab['tab3_val'] = TABS[2];\n        $scope.configuration.tab['tab4_val'] = 'debug';\n        $scope.configuration.layout = 2;\n        $scope.configuration.layout_menu_width = 360;\n    }\n\n    $scope.$watch(\"configuration\", function () {\n        let configuration = angular.copy($scope.configuration);\n        localStorage[LOCALSTORAGEID] = JSON.stringify(configuration);\n    }, true);\n\n    /* \n     * layout selector using split pane\n     */\n    BUILDER.layout = async () => {\n        $scope.layout.viewstate = {};\n        $scope.layout.viewstate.root = { firstComponentSize: $scope.configuration.layout_menu_width };\n        $scope.layout.viewstate.horizonal = {};\n        $scope.layout.viewstate.vertical_1_1 = {};\n        $scope.layout.viewstate.vertical_1_2 = {};\n\n        $scope.layout.active_layout = $scope.configuration.layout;\n\n        $scope.$watch(\"layout\", function () {\n            $scope.configuration.layout_menu_width = $scope.layout.viewstate.root.firstComponentSize;\n            $scope.configuration.layout = $scope.layout.active_layout;\n        }, true);\n\n        $scope.layout.change = async (layout) => {\n            $scope.layout.active_layout = layout;\n\n            if (layout == 1) {\n                $scope.layout.accessable_tab = ['tab1'];\n            } else if (layout == 2) {\n                $scope.layout.accessable_tab = ['tab1', 'tab2'];\n            } else if (layout == 3) {\n                $scope.layout.accessable_tab = ['tab1', 'tab2', 'tab3'];\n            } else if (layout == 4) {\n                $scope.layout.accessable_tab = ['tab1'];\n            } else if (layout == 5) {\n                $scope.layout.accessable_tab = ['tab1', 'tab2'];\n            } else if (layout == 6) {\n                $scope.layout.accessable_tab = ['tab1', 'tab2', 'tab3'];\n            }\n\n            let _height = $('#editor-area').height();\n            let _width = $('#editor-area').width();\n\n            function _horizonal_split() {\n                var h = Math.round(_height / 3);\n                if (h > 400) h = 400;\n                $scope.layout.viewstate.horizonal.lastComponentSize = h;\n            }\n\n            function _horizonal_top() {\n                $scope.layout.viewstate.horizonal.lastComponentSize = 0;\n            }\n\n            if (layout == 1) {\n                _horizonal_top();\n                $scope.layout.viewstate.vertical_1_1.lastComponentSize = 0;\n            } else if (layout == 2) {\n                _horizonal_top();\n                $scope.layout.viewstate.vertical_1_1.lastComponentSize = Math.round(_width / 2);\n                $scope.layout.viewstate.vertical_1_2.lastComponentSize = 0;\n            } else if (layout == 3) {\n                _horizonal_top();\n                $scope.layout.viewstate.vertical_1_1.lastComponentSize = Math.round(_width / 3 * 2);\n                $scope.layout.viewstate.vertical_1_2.lastComponentSize = Math.round(_width / 3);\n            } else if (layout == 4) {\n                _horizonal_split();\n                $scope.layout.viewstate.vertical_1_1.firstComponentSize = _width;\n                $scope.layout.viewstate.vertical_1_1.lastComponentSize = 0;\n            } else if (layout == 5) {\n                _horizonal_split();\n                $scope.layout.viewstate.vertical_1_1.firstComponentSize = Math.round(_width / 2);\n                $scope.layout.viewstate.vertical_1_1.lastComponentSize = Math.round(_width / 2);\n                $scope.layout.viewstate.vertical_1_2.firstComponentSize = Math.round(_width / 2);\n                $scope.layout.viewstate.vertical_1_2.lastComponentSize = 0;\n            } else if (layout == 6) {\n                _horizonal_split();\n                $scope.layout.viewstate.vertical_1_1.firstComponentSize = Math.round(_width / 3);\n                $scope.layout.viewstate.vertical_1_1.lastComponentSize = Math.round(_width / 3 * 2);\n                $scope.layout.viewstate.vertical_1_2.firstComponentSize = Math.round(_width / 3);\n                $scope.layout.viewstate.vertical_1_2.lastComponentSize = Math.round(_width / 3);\n            }\n\n            await API.timeout();\n        }\n    }\n\n    /*\n     * define loading\n     */\n    BUILDER.loading = async () => {\n        $scope.loading.status = true;\n        $scope.loading.show = async () => {\n            $scope.loading.status = true;\n            await API.timeout();\n        }\n\n        $scope.loading.hide = async () => {\n            $scope.loading.status = false;\n            await API.timeout();\n        }\n    }\n\n    /*\n     * define modal events\n     */\n\n    BUILDER.modal = async () => {\n        $scope.modal.delete = async () => {\n            $('#modal-delete').modal('show');\n        }\n\n        $scope.modal.add_language = async () => {\n            $('#modal-add-language').modal('show');\n        }\n\n        $scope.modal.keymaps = function () {\n            $('#modal-keymaps').modal('show');\n        }\n    }\n\n    /*\n     * define workspace controller\n     */\n\n    BUILDER.workspace = async () => {\n        $scope.workspace.list = [\n            { id: 'app', name: 'App' },\n            { id: 'browse', name: 'Browse' },\n            { id: 'history', name: 'History' }\n        ];\n\n        $scope.workspace.list[0].active = async () => {\n            $scope.workspace.active_workspace = $scope.workspace.list[0].id;\n            await API.timeout();\n        };\n\n        $scope.workspace.list[1].active = async () => {\n            $scope.workspace.active_workspace = $scope.workspace.list[1].id;\n\n            await API.timeout();\n        };\n\n        $scope.workspace.list[2].active = async () => {\n            $scope.workspace.active_workspace = $scope.workspace.list[2].id;\n\n            if ($scope.viewer.selected) {\n                await $scope.viewer.load($scope.viewer.selected);\n            }\n\n            await API.timeout();\n        };\n\n        $scope.workspace.active_workspace = $scope.workspace.list[0].id;\n    }\n\n    /*\n     * define plugin interfaces for wiz\n     */\n\n    BUILDER.plugin = async () => {\n        $scope.plugin.editor = {};\n        $scope.plugin.editor.build = async (targettab, editor) => {\n            let shortcuts = $scope.shortcut.configuration(window.monaco);\n\n            for (let shortcutname in shortcuts) {\n                let monacokey = shortcuts[shortcutname].monaco;\n                let fn = shortcuts[shortcutname].fn;\n                if (!monacokey) continue;\n\n                editor.addCommand(monacokey, async () => {\n                    await fn();\n                    await $scope.shortcut.bind();\n                });\n            }\n        }\n    }\n\n    /*\n     * define app controller\n     */\n\n    BUILDER.app = {};\n\n    BUILDER.app.base = async () => {\n        $scope.app.save = async (returnres) => {\n            if ($scope.app.data.controller) $scope.app.data.controller = $scope.app.data.controller.replace(/\\t/gim, '    ');\n            let appdata = angular.copy($scope.app.data);\n            try {\n                for (let key in appdata.dic) {\n                    if (appdata.dic[key] && appdata.dic[key].length > 0) {\n                        appdata.dic[key] = JSON.parse(appdata.dic[key]);\n                    } else {\n                        delete data.dic[key];\n                    }\n                }\n            } catch (e) {\n                if (!returnres)\n                    toastr.error(\"Dictionary syntax error\");\n                return { code: 500, data: e };\n            }\n\n            try {\n                $scope.browse.item.package.title = appdata.package.title;\n                $scope.browse.item.package.namespace = appdata.package.namespace;\n            } catch (e) {\n            }\n\n            let res = await API.update(appdata);\n\n            if (returnres) return res;\n\n            if (res.code == 200) {\n                toastr.success(\"Saved\");\n                await $scope.app.preview();\n            } else {\n                toastr.error(res.data);\n            }\n\n            await $scope.shortcut.bind();\n        }\n\n        $scope.app.tab = {};\n        $scope.app.tab.active = async (tab) => {\n            $scope.app.tab.activetab = tab;\n            await API.timeout();\n        }\n\n        $scope.app.delete = async () => {\n            let app_id = $scope.app.id;\n            await API.delete(app_id);\n            await $scope.browse.load();\n            if ($scope.browse.data[0]) {\n                app_id = $scope.browse.data[0].package.id;\n                location.href = APP_URL + \"editor/\" + app_id;\n            } else {\n                location.href = APP_URL;\n            }\n        }\n\n        $scope.app.clean = async () => {\n            let app_id = $scope.app.id;\n            await API.clean(app_id);\n            $scope.app.preview();\n        }\n\n        $scope.app.load = async (app_id) => {\n            // show loading\n            await $scope.loading.show();\n\n            // load data\n            let res = await API.load(app_id);\n            $scope.app.id = app_id;  // current appid\n            $scope.app.data = res.data;\n            for (let key in $scope.app.data.dic) {\n                $scope.app.data.dic[key] = JSON.stringify($scope.app.data.dic[key], null, 4);\n            }\n\n            await $scope.app.editor.build();\n            await $scope.layout.change($scope.layout.active_layout);\n            await $scope.loading.hide();\n            await $scope.app.preview();\n\n            await API.timeout(500);\n\n            if ($scope.app.tab.activetab && $scope.app.editor.cache[$scope.app.tab.activetab])\n                $scope.app.editor.cache[$scope.app.tab.activetab].focus();\n\n            if ($scope.app.data.package.properties) {\n                for (let key in $scope.app.data.package.properties) {\n                    $scope.$watch('app.data.package.properties.' + key, async (a, b) => {\n                        if (a == b) return;\n                        await PROPERTY_WATCHER($scope, key);\n                    });\n                }\n            }\n\n            location.href = location.pathname + \"#\" + app_id;\n        }\n\n        $scope.app.preview = async () => {\n            let url = $scope.app.data.package.viewuri;\n            if (!$scope.app.data.package.viewuri) {\n                url = await PREVIEW_URL($scope.app.id);\n            }\n\n            if (!url) {\n                return;\n            }\n\n            $scope.app.preview.status = false;\n            await API.timeout();\n\n            $('iframe.preview').attr('src', url);\n            $('iframe.preview').on('load', function () {\n                $scope.app.preview.status = true;\n                $timeout();\n            });\n        }\n    }\n\n    BUILDER.app.editor = async () => {\n        $scope.app.editor = {};\n        $scope.app.editor.cache = {};\n        $scope.app.editor.properties = {};\n        $scope.app.editor.codetypes = CODETYPES;\n        $scope.app.editor.code = {};\n\n        $scope.app.editor.code.list = CODELIST;\n\n        $scope.app.editor.code.dic = {};\n        $scope.app.editor.code.dic.add = async (lang) => {\n            if (!lang || lang.length < 2) {\n                toastr.error(\"at least 2 char\");\n                return;\n            }\n            lang = lang.toLowerCase();\n            $scope.app.data.dic[lang] = \"{}\";\n            $('#modal-add-language').modal('hide');\n            await API.timeout();\n        }\n\n        $scope.app.editor.code.langselect = LANGSELECTOR($scope);\n\n        $scope.app.editor.code.change = async (targettab, view) => {\n            if (view) {\n                $scope.configuration.tab[targettab + '_val'] = view;\n                await API.timeout();\n\n                if (view == 'preview') {\n                    $scope.app.preview();\n                    return;\n                }\n\n                if (view == 'debug') {\n                    return;\n                };\n\n                let language = $scope.app.editor.properties[targettab].language = await $scope.app.editor.code.langselect(targettab);\n\n                if ($scope.app.editor.cache[targettab]) {\n                    let model = $scope.app.editor.cache[targettab].getModel();\n                    monaco.editor.setModelLanguage(model, language);\n\n                    $scope.app.editor.cache[targettab].focus();\n                }\n            } else {\n                if ($scope.app.tab.activetab != targettab) {\n                    $scope.app.tab.activetab = targettab;\n                    await API.timeout();\n                    await API.timeout(500);\n                    $scope.app.editor.cache[targettab].focus();\n                }\n            }\n        }\n\n        $scope.app.editor.code.prev = async () => {\n            if (!$scope.layout.accessable_tab) return;\n            let tab = 'tab1';\n            if ($scope.app.tab.activetab) tab = $scope.app.tab.activetab;\n\n            tab = $scope.layout.accessable_tab.indexOf(tab) - 1;\n            if (tab < 0) tab = $scope.layout.accessable_tab.length - 1;\n            tab = $scope.layout.accessable_tab[tab];\n            let view = $scope.configuration.tab[tab + '_val']\n\n            while (view == 'preview') {\n                tab = $scope.layout.accessable_tab.indexOf(tab) - 1;\n                if (tab < 0) tab = $scope.layout.accessable_tab.length - 1;\n                tab = $scope.layout.accessable_tab[tab];\n                view = $scope.configuration.tab[tab + '_val']\n            }\n\n            $scope.app.editor.code.change(tab);\n            $scope.app.editor.cache[tab].focus();\n        }\n\n        $scope.app.editor.code.next = async () => {\n            if (!$scope.layout.accessable_tab) return;\n            let tab = 'tab1';\n            if ($scope.app.tab.activetab) tab = $scope.app.tab.activetab;\n\n            tab = $scope.layout.accessable_tab.indexOf(tab) + 1;\n            tab = tab % $scope.layout.accessable_tab.length;\n            tab = $scope.layout.accessable_tab[tab];\n            let view = $scope.configuration.tab[tab + '_val']\n\n            while (view == 'preview') {\n                tab = $scope.layout.accessable_tab.indexOf(tab) + 1;\n                tab = tab % $scope.layout.accessable_tab.length;\n                tab = $scope.layout.accessable_tab[tab];\n                view = $scope.configuration.tab[tab + '_val']\n            }\n\n            $scope.app.editor.code.change(tab);\n            $scope.app.editor.cache[tab].focus();\n        }\n\n        $scope.app.editor.build = async () => {\n            $scope.app.editor.viewstate = false;\n            await API.timeout();\n\n            $scope.app.editor.properties.tab1 = $scope.monaco(await $scope.app.editor.code.langselect('tab1'));\n            $scope.app.editor.properties.tab2 = $scope.monaco(await $scope.app.editor.code.langselect('tab2'));\n            $scope.app.editor.properties.tab3 = $scope.monaco(await $scope.app.editor.code.langselect('tab3'));\n\n            let bindonload = async (targettab) => {\n                $scope.app.editor.properties[targettab].onLoad = async (editor) => {\n                    await $scope.plugin.editor.build(targettab, editor);\n                    $scope.app.editor.cache[targettab] = editor;\n                }\n            }\n\n            for (var i = 1; i <= 3; i++)\n                bindonload('tab' + i);\n\n            $scope.app.editor.viewstate = true;\n            await API.timeout();\n        }\n\n        $scope.app.branch = {};\n        $scope.app.branch.change = async (branchname) => {\n            let path = location.pathname.split(\"/\");\n            path = path.splice(0, path.length - 1);\n            path.push($scope.app.id);\n            path = path.join(\"/\") + \"?branch=\" + branchname;\n            location.href = path;\n        }\n    }\n\n    BUILDER.browse = async () => {\n        $scope.browse.load = async () => {\n            let res = await API.search();\n            $scope.browse.data = res.data;\n            $scope.browse.cache = [];\n\n            $scope.browse.data.sort((a, b) => {\n                let comp = 0;\n                comp = a.package.route.localeCompare(b.package.route);\n                return comp;\n            })\n\n            for (var i = 0; i < $scope.browse.data.length; i++) {\n                $scope.browse.cache.push($scope.browse.data[i].package.id);\n                if ($scope.browse.data[i].package.id == $scope.app.id) {\n                    $scope.browse.item = $scope.browse.data[i];\n                }\n            }\n\n            await API.timeout();\n        }\n\n        $scope.browse.select = async (item) => {\n            $scope.browse.item = item;\n            await $scope.app.load(item.package.id);\n        }\n\n        $scope.browse.search = async (val) => {\n            val = val.toLowerCase();\n            for (var i = 0; i < $scope.browse.data.length; i++) {\n                let searchindex = ['title', 'namespace', 'id', 'route'];\n                $scope.browse.data[i].hide = true;\n                for (let j = 0; j < searchindex.length; j++) {\n                    try {\n                        let key = searchindex[j];\n                        let keyv = $scope.browse.data[i].package[key].toLowerCase();\n                        if (keyv.includes(val)) {\n                            $scope.browse.data[i].hide = false;\n                            break;\n                        }\n                    } catch (e) {\n                    }\n                }\n                if (val.length == 0)\n                    $scope.browse.data[i].hide = false;\n            }\n\n            await API.timeout();\n        }\n\n        $scope.browse.next = async () => {\n            let current = $scope.browse.cache.indexOf($scope.app.id);\n            current = current + 1;\n            current = current % $scope.browse.data.length;\n            $scope.browse.select($scope.browse.data[current]);\n        }\n\n        $scope.browse.prev = async () => {\n            let current = $scope.browse.cache.indexOf($scope.app.id);\n            current = current - 1;\n            if (current < 0)\n                current = $scope.browse.data.length - 1;\n            $scope.browse.select($scope.browse.data[current]);\n        }\n    }\n\n\n    BUILDER.history = async () => {\n        $scope.history.load = async () => {\n            $scope.history.data = await API.history();\n            await API.timeout();\n        }\n\n        $scope.history.change = async (item) => {\n            await $scope.viewer.load(item.id);\n        }\n    };\n\n    BUILDER.viewer = async () => {\n        $scope.viewer.editor = {};\n        $scope.viewer.editor.data = {};\n\n        $scope.viewer.editor.configuration = { enableSplitViewResizing: false, fontSize: 14, readOnly: false, originalEditable: false };\n        $scope.viewer.editor.configuration.onLoad = async (editor) => {\n            await $scope.plugin.editor.build(null, editor);\n        }\n\n        $scope.viewer.load = async (commit) => {\n            await $scope.loading.show();\n            let app_id = $scope.app.id;\n            let compare = await API.diff(app_id, commit);\n\n            $scope.viewer.codes = TABS;\n            $scope.viewer.selected = commit;\n            $scope.viewer.compared = compare;\n\n            await $scope.viewer.change('controller');\n        }\n\n        $scope.viewer.change = async (code) => {\n            $scope.viewer.code = code;\n\n            let next = angular.copy($scope.app.data);\n            let prev = angular.copy($scope.viewer.compared);\n\n            for (let key in next.dic)\n                next.dic[key] = JSON.parse(next.dic[key]);\n            next.dic = JSON.stringify(next.dic, null, 4);\n\n            try {\n                next.language = \"json\";\n                if (['controller', 'api', 'socketio'].includes(code)) next.language = \"python\";\n                if (next.package.properties)\n                    if (next.package.properties[code])\n                        next.language = next.package.properties[code];\n            } catch (e) {\n                next.language = \"text\";\n                next[code] = \"\";\n            }\n\n            try {\n                prev.language = \"json\";\n                if (['controller', 'api', 'socketio'].includes(code)) prev.language = \"python\";\n                if ($scope.viewer.mode == 'app') if (prev.properties[code]) prev.language = prev.properties[code];\n                if (prev.language == 'json') prev.code[code] = JSON.stringify(JSON.parse(prev.code[code]), null, 4);\n            } catch (e) {\n                prev.language = \"text\";\n                prev.code[code] = \"\";\n            }\n\n            $scope.viewer.editor.data = {\n                compare: {\n                    code: prev.code[code],\n                    language: prev.language\n                },\n                main: {\n                    code: next[code],\n                    language: next.language\n                }\n            }\n\n            await $scope.loading.hide();\n            await API.timeout();\n        }\n\n        $scope.$watch('viewer.editor.data', function () {\n            let code = $scope.viewer.code;\n            if (!code) return;\n            let codedata = $scope.viewer.editor.data.main.code;\n            if (code == 'dic') {\n                try {\n                    codedata = JSON.parse(codedata);\n                    for (let key in codedata) {\n                        codedata[key] = JSON.stringify(codedata[key], null, 4);\n                    }\n                } catch (e) {\n                    return;\n                }\n            }\n\n            if (codedata != $scope.app.data[code])\n                $scope.app.data[code] = codedata;\n        }, true);\n    };\n\n    BUILDER.shortcuts = async () => {\n        $scope.shortcut.configuration = (monaco) => {\n            return {\n                'tab1': {\n                    key: 'Alt Digit1',\n                    monaco: monaco.KeyMod.Alt | monaco.KeyCode.DIGIT1,\n                    fn: async () => {\n                        await $scope.workspace.list[0].active();\n                    }\n                },\n                'tab2': {\n                    key: 'Alt Digit2',\n                    monaco: monaco.KeyMod.Alt | monaco.KeyCode.DIGIT2,\n                    fn: async () => {\n                        await $scope.workspace.list[1].active();\n                    }\n                },\n                'tab3': {\n                    key: 'Alt Digit3',\n                    monaco: monaco.KeyMod.Alt | monaco.KeyCode.DIGIT3,\n                    fn: async () => {\n                        await $scope.workspace.list[2].active();\n                    }\n                },\n                'editor_prev': {\n                    monaco: monaco.KeyMod.Alt | monaco.KeyCode.KEY_A,\n                    fn: async () => {\n                        let targettab = $scope.app.tab.activetab;\n                        var prev = TABS.indexOf($scope.configuration.tab[targettab + \"_val\"]) - 1;\n                        if (prev < 0) prev = TABS[TABS.length - 1];\n                        else prev = TABS[prev];\n\n                        if (prev == 'preview') {\n                            prev = TABS.indexOf(prev) - 1;\n                            if (prev < 0) prev = TABS[TABS.length - 1];\n                            else prev = TABS[prev];\n                        }\n\n                        await $scope.app.editor.code.change(targettab, prev);\n                        await $scope.shortcut.bind();\n                    }\n                },\n                'editor_next': {\n                    monaco: monaco.KeyMod.Alt | monaco.KeyCode.KEY_S,\n                    fn: async () => {\n                        let targettab = $scope.app.tab.activetab;\n                        var next = TABS[(TABS.indexOf($scope.configuration.tab[targettab + \"_val\"]) + 1) % TABS.length];\n                        if (next == 'preview') {\n                            next = TABS[(TABS.indexOf(next) + 1) % TABS.length];\n                        }\n                        await $scope.app.editor.code.change(targettab, next);\n                        await $scope.shortcut.bind();\n                    }\n                },\n                'app_prev': {\n                    key: 'Alt KeyJ',\n                    monaco: monaco.KeyMod.Alt | monaco.KeyCode.KEY_J,\n                    fn: async () => {\n                        $(window).focus();\n                        await $scope.browse.prev();\n                    }\n                },\n                'app_next': {\n                    key: 'Alt KeyK',\n                    monaco: monaco.KeyMod.Alt | monaco.KeyCode.KEY_K,\n                    fn: async () => {\n                        $(window).focus();\n                        await $scope.browse.next();\n                    }\n                },\n                'workspace_prev': {\n                    key: 'Alt KeyZ',\n                    monaco: monaco.KeyMod.Alt | monaco.KeyCode.KEY_Z,\n                    fn: async () => {\n                        await $scope.app.editor.code.prev();\n                    }\n                },\n                'workspace_next': {\n                    key: 'Alt KeyX',\n                    monaco: monaco.KeyMod.Alt | monaco.KeyCode.KEY_X,\n                    fn: async () => {\n                        await $scope.app.editor.code.next();\n                    }\n                },\n                'search': {\n                    key: 'Alt KeyF',\n                    monaco: monaco.KeyMod.Alt | monaco.KeyCode.KEY_F,\n                    fn: async () => {\n                        await $scope.workspace.list[1].active();\n                        $('#search').focus();\n                    }\n                },\n                'save': {\n                    key: 'Ctrl KeyS',\n                    monaco: monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_S,\n                    fn: async () => {\n                        await $scope.app.save();\n                    }\n                },\n                'clear': {\n                    key: 'Ctrl KeyK',\n                    monaco: monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_K,\n                    fn: async () => {\n                        await $scope.socket.clear();\n                    }\n                }\n            }\n        };\n\n        $scope.shortcut.bind = async () => {\n            if (!window.monaco) return;\n            $(window).unbind();\n\n            let shortcut_opts = {};\n            let shortcuts = $scope.shortcut.configuration(window.monaco);\n            for (let key in shortcuts) {\n                let keycode = shortcuts[key].key;\n                let fn = shortcuts[key].fn;\n                if (!keycode) continue;\n                shortcut_opts[keycode] = async (ev) => {\n                    ev.preventDefault();\n                    await fn();\n                };\n            }\n\n            shortcutjs(window, shortcut_opts);\n        }\n\n        window.addEventListener(\"focus\", $scope.shortcut.bind, false);\n    }\n\n    await BUILDER.loading();\n    await BUILDER.layout();\n    await BUILDER.plugin();\n    await BUILDER.modal();\n    await BUILDER.workspace();\n    await BUILDER.app.base();\n    await BUILDER.app.editor();\n    await BUILDER.browse();\n    await BUILDER.history();\n    await BUILDER.viewer();\n    await BUILDER.shortcuts();\n\n    let init = async () => {\n        await ADDON($scope);\n        await $scope.browse.load();\n        await $scope.history.load();\n        await $scope.app.load(APPID);\n\n        /*\n         * socket.io event binding for trace log\n         */\n        let ansi_up = new AnsiUp();\n        let socket = io(\"/wiz\");\n\n        $scope.socket.log = \"\";\n        $scope.socket.clear = async () => {\n            $scope.socket.log = \"\";\n            await API.timeout();\n        }\n\n        $scope.socket.link = async () => {\n            let layout = $scope.configuration.layout;\n            await $scope.layout.change(layout - 3);\n            window.open(\"/wiz/admin/workspace/logger\", '_blank');\n        }\n\n        socket.on(\"connect\", function (data) {\n            if (!data) return;\n            $scope.socket.id = data.sid;\n        });\n\n        socket.on(\"log\", function (data) {\n            data = data.replace(/ /gim, \"__SEASONWIZPADDING__\");\n            data = ansi_up.ansi_to_html(data).replace(/\\n/gim, '<br>').replace(/__SEASONWIZPADDING__/gim, '<div style=\"width: 6px; display: inline-block;\"></div>');\n            $scope.socket.log = $scope.socket.log + data;\n            $timeout(function () {\n                var element = $('.debug-messages')[0];\n                if (!element) return;\n                element.scrollTop = element.scrollHeight - element.clientHeight;\n            });\n        });\n\n        socket.on(\"message\", function (data) {\n            if (data.type == \"status\") {\n                $scope.socket.users = data.users;\n                $timeout();\n            }\n        });\n\n        $scope.$watch(\"configuration\", async () => {\n            let layout = $scope.configuration.layout;\n            if (layout < 4) {\n                socket.emit(\"leave\", { id: BRANCH });\n            } else {\n                socket.emit(\"join\", { id: BRANCH });\n            }\n        }, true);\n    }\n\n    init();\n}","html":"div(style=\"width: 100%; height: 100%;\")\n    mixin editor_fastmenu()\n        input.form-control.mr-2.text-white.if-desktop(type=\"text\" ng-model=\"app.data.package.route\" style=\"width: 280px; display: inline-block;\" autocomplete='off')\n\n    mixin editor_tab_app()\n        .card.card-sm.mb-3\n            .card-body\n                label.form-label(style=\"font-family: 'MAIN-EB'\") Title\n                input.form-control(type='text' placeholder='App Title' ng-model=\"app.data.package.title\" autocomplete='off')\n\n        .card.card-sm.mb-3\n            .card-body\n                label.form-label(style=\"font-family: 'MAIN-EB'\") Base Controller\n                select.form-select(ng-model=\"app.data.package.controller\")\n                    option(value=\"{{c}}\" ng-repeat=\"c in extdata.controller\") {{c}}\n        \n        .card.card-sm.mb-3\n            .card-body\n                label.form-label(style=\"font-family: 'MAIN-EB'\") Route\n                input.form-control(type='text' placeholder='/board/<category>/list' ng-model=\"app.data.package.route\" autocomplete='off')\n        \n        .card.card-sm.mb-3\n            .card-body\n                label.form-label(style=\"font-family: 'MAIN-EB'\") View URI\n                input.form-control(type='text' placeholder='/board/notice/list' ng-model=\"app.data.package.viewuri\" autocomplete='off')\n\n    mixin editor_tab_browse()\n        .btn-group.w-100.mb-3\n            button.btn.btn-sm(type=\"button\" style=\"width: 50%;\" class=\"{{extdata.browse_active == 'route' ? 'btn-white' : 'btn-dark'}}\" ng-click=\"extdata.change_browse('route')\") Routes\n            button.btn.btn-sm(type=\"button\" style=\"width: 50%;\" class=\"{{extdata.browse_active == 'app' ? 'btn-white' : 'btn-dark'}}\" ng-click=\"extdata.change_browse('app')\") Apps\n\n        div(ng-if=\"extdata.browse_active=='route'\")\n            .input-icon.mb-3\n                input.form-control#search(type=\"text\" placeholder=\"Search…\" style=\"color: #545d6d !important;\" ng-model=\"browse.searchvalue\" ng-change=\"browse.search(browse.searchvalue)\" autocomplete='off')\n                span.input-icon-addon\n                    svg.icon(xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\")\n                        path(stroke=\"none\" d=\"M0 0h24v24H0z\")\n                        circle(cx=\"10\" cy=\"10\" r=\"7\")\n                        line(x1=\"21\" y1=\"21\" x2=\"15\" y2=\"15\")\n\n            .root-tree.mb-1(ng-repeat=\"item in browse.data\" class=\"{{item.package.id == app.id ? 'active' : ''}}\" ng-click=\"browse.select(item)\" ng-if=\"!item.hide\")\n                .root-title\n                    table\n                        tr \n                            td.w-1(style=\"vertical-align: top;\")\n                                i.fas.fa-code.mr-2\n                            td(style=\"line-height: 1;\")\n                                span {{item.package.title}}\n                                br\n                                span.namespace {{item.package.route}}\n\n            a.root-tree.mb-1(href=\"/wiz/admin/workspace/routes/editor/new\")\n                .root-title.text-center.p-1.text-white\n                    i.fas.fa-plus.mr-2\n                    span Create New Route\n\n        div(ng-if=\"extdata.browse_active=='app'\")\n            .input-icon.mb-3\n                input.form-control#search(type=\"text\" placeholder=\"Search\" style=\"color: #545d6d !important;\" ng-model=\"extdata.searchvalue\" ng-change=\"extdata.browse_search(extdata.searchvalue)\" autocomplete='off')\n                span.input-icon-addon\n                    svg.icon(xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\")\n                        path(stroke=\"none\" d=\"M0 0h24v24H0z\")\n                        circle(cx=\"10\" cy=\"10\" r=\"7\")\n                        line(x1=\"21\" y1=\"21\" x2=\"15\" y2=\"15\")\n                    \n            .root-tree.mb-1(ng-repeat=\"item in extdata.apps\" ng-if=\"!item.hide\" ng-click=\"extdata.browse_select(item)\")\n                .root-title\n                    table\n                        tr \n                            td.w-1(style=\"vertical-align: top;\")\n                                i.fas.fa-code.mr-2\n                            td(style=\"line-height: 1;\")\n                                span {{item.package.title}}\n                                br\n                                span.namespace {{item.package.namespace}}\n\n    mixin codearea(tab)\n        div(style=\"overflow: hidden; height: 100%; width: 100%;\" ng-click=\"app.tab.active('{$tab$}')\" ng-if=\"app.editor.viewstate && layout.accessable_tab.includes('{$tab$}')\" ng-cloak)\n            .code-select.bg-dark.d-flex(style=\"margin-top: -2px;\")\n                .btn.btn-square.btn-sm.p-2(ng-repeat=\"code in app.editor.code.list\" ng-click=\"app.editor.code.change('{$tab$}', code.id)\" ng-class=\"configuration.tab.{$tab$}_val == code.id ? 'btn-white' : 'btn-dark'\") {{code.name}}\n\n                select.form-select.form-select-sm.m-1.ml-auto(style=\"width: 120px;\" ng-model=\"app.data.package.properties[configuration.tab.{$tab$}_val]\" ng-if=\"app.editor.codetypes[configuration.tab.{$tab$}_val].length > 0\")\n                    option(ng-repeat=\"code in app.editor.codetypes[configuration.tab.{$tab$}_val]\" value=\"{{code}}\") {{code}}\n                select.form-select.form-select-sm.m-1.mr-0.ml-auto(ng-if=\"configuration.tab.{$tab$}_val == 'dic'\" style=\"width: 60px;\" ng-model=\"configuration.tab.{$tab$}_language\")\n                    option(ng-repeat=\"(key, value) in app.data.dic\" value=\"{{key}}\") {{key}}\n                .btn.btn-square.btn-dark.btn-sm.p-2(ng-if=\"configuration.tab.{$tab$}_val == 'dic'\" ng-click=\"modal.add_language()\")\n                    i.fas.fa-plus\n\n            div(style=\"height: calc(100% - 36px);\")\n                div(ng-if=\"['preview', 'dic'].includes(configuration.tab.{$tab$}_val) == false\" ng-model=\"app.data[configuration.tab.{$tab$}_val]\" ui-monaco-opts=\"app.editor.properties['{$tab$}']\" ui-monaco)\n                div(ng-if=\"configuration.tab.{$tab$}_val == 'dic'\" ng-model=\"app.data[configuration.tab.{$tab$}_val][configuration.tab.{$tab$}_language]\" ui-monaco-opts=\"app.editor.properties['{$tab$}']\" ui-monaco)\n\n                .code-preview(ng-if=\"configuration.tab.{$tab$}_val == 'preview'\" style=\"max-width: none; width: 100%; height: 100%;\")\n                    iframe.preview(style=\"height: 100%;\" ng-show=\"app.preview.status\")\n                    table(ng-if=\"!app.preview.status\" style=\"width: 100%; height: 100%;\")\n                        tr \n                            td(style=\"text-align: center; vertical-align: middle;\")\n                                .spinner-grow.text-dark(style=\"width: 120px; height: 120px;\")\n\n                div(ng-if=\"app.tab.activetab != '{$tab$}' && ['preview'].includes(configuration.tab.{$tab$}_val) == false\" style=\"width: 100%; height: 100%; position: absolute; top: 0; left: 0; background: rgba(0,0,0,.05); z-index: 9999;\")\n\n    .display-none(style=\"display: none;\")\n        input#import-file(type=\"file\" accept=\".json,application/json\")\n\n    .bg-dark.text-center(ng-if=\"loading.status\" style=\"width: 100%; height: 100%; position: absolute; top: 0; left: 0; z-index: 99999; padding-top: 40vh; opacity: .6;\")\n        .spinner-grow.text-white(style=\"width: 60px; height: 60px;\")\n\n    .fixed-top\n        header.navbar.navbar-expand-md.navbar-dark\n            .container(style=\"max-width: none;\")\n                button.navbar-toggler(type='button' data-toggle='collapse' data-target='#navbar-menu')\n                    span.navbar-toggler-icon\n\n                .navbar-brand.navbar-brand-autodark.d-none-navbar-horizontal.pr-0.pr-md-3\n                    table(style='color: #d7e0fd; cursor: pointer;')\n                        tr\n                            td.p-3.pb-0.pt-1.pr-1\n                                img(src='/resources/wiz/plugin/theme/img/wiz-font.png' style='height: 18px; margin-top: 12px;')\n                                img(src='/resources/wiz/plugin/theme/img/logo-sym.png' style='height: 28px; margin-left: 8px;')\n                            td\n                                h3.m-0.p-0(style=\"margin-top: 24px !important;\") Route Editor\n\n                select.form-control.text-white.mr-2(ng-model=\"extdata.branch\" ng-change=\"app.branch.change(extdata.branch)\" style=\"width: 120px;\")\n                    option(ng-repeat=\"branch in extdata.branches\" value=\"{{branch}}\") {{branch}}\n                +editor_fastmenu\n\n                #navbar-menu.navbar.navbar-collapse.collapse\n                    ul.navbar-nav\n                    .navbar-nav.flex-row.order-md-last.mr-2(style=\"align-items: center;\")\n                        li.nav-item.p-0.pr-2\n                            - if IS_DEV\n                                a.nav-link.btn.btn-sm.text-dark.btn-white.btn-pill(href=\"?dev=false\")\n                                    span.nav-link-title(style=\"font-size: 14px;\") development\n                            - else\n                                a.nav-link.btn.btn-sm.text-dark.btn-white.btn-pill(href=\"?dev=true\")\n                                    span.nav-link-title(style=\"font-size: 14px;\") production\n\n                        li.nav-item.p-0.pr-2\n                            a.nav-link.btn.btn-sm.text-dark.btn-white.btn-pill(ng-click=\"app.clean()\")\n                                span.nav-link-title(style=\"font-size: 14px;\") Clean\n                        \n                        li.nav-item.p-0.pr-2\n                            a.nav-link.btn.btn-sm.text-dark.btn-white.btn-pill(ng-click=\"modal.delete()\")\n                                span.nav-link-title(style=\"font-size: 14px;\") Delete\n\n                        li.nav-item.p-0.pr-2\n                            a.nav-link.btn.btn-sm.text-dark.btn-white.btn-pill(ng-click=\"app.save()\")\n                                span.nav-link-title(style=\"font-size: 14px;\") Save\n\n                        li.nav-item.p-0\n                            a.nav-link.btn.btn-sm.text-dark.btn-white.btn-pill(ng-href='/wiz/admin/workspace/{{mode}}s/list')\n                                span.nav-link-title.bold(style=\"font-size: 14px;\")\n                                    i.fas.fa-times\n    \n    div(data-split-pane data-split-pane-properties=\"layout.viewstate.root\")\n        .bg-dark(data-split-pane-component data-width=\"360px\")\n            .menu-layout.p-3\n                .btn-group.w-100.mb-3\n                    button.btn(type=\"button\" ng-repeat=\"item in workspace.list\" style=\"width: 50%;\" class=\"{{workspace.active_workspace == item.id ? 'btn-white' : 'btn-dark'}}\" ng-click=\"item.active()\") {{item.name}}\n\n                .tree-container(ng-show=\"workspace.active_workspace == workspace.list[2].id\")                    \n                    .root-tree.mb-1(ng-repeat=\"item in history.data\" class=\"{{item.id == viewer.selected ? 'active' : ''}}\" ng-click=\"history.change(item)\")\n                        .root-title\n                            table\n                                tr \n                                    td.w-1.pr-2.pt-2.pb-2(style=\"vertical-align: top; font-size: 18px;\")\n                                        i.fas.fa-code-branch\n\n                                    td.pt-2.pb-2(style=\"line-height: 1;\")\n                                        span {{ item.message ? item.message : 'no message' }}\n                                        br\n                                        span.namespace {{item.committer ? item.committer : item.author}} ·\n                                        span.namespace.text-muted.ml-1 {{item.datetime}} · {{ item.id.substring(0, 8) }} \n\n\n                .tree-container(ng-show=\"workspace.active_workspace == workspace.list[1].id\")\n                    +editor_tab_browse\n\n                div(ng-show=\"workspace.active_workspace == workspace.list[0].id\")\n                    +editor_tab_app\n\n                    .hr.bg-white\n    \n                    h3.text-white Code Layout\n\n                    .text-center.mb-4\n                        .layout-selector.p-2(ng-class=\"layout.active_layout == 1 ? 'active' : ''\" ng-click=\"layout.change(1)\")\n                            .layout-icon\n                                .layout-row\n                                    .layout-column\n\n                        .layout-selector.p-2(ng-class=\"layout.active_layout == 2 ? 'active' : ''\" ng-click=\"layout.change(2)\")\n                            .layout-icon\n                                .layout-row\n                                    .layout-column\n                                    .layout-column\n\n                        .layout-selector.p-2(ng-class=\"layout.active_layout == 3 ? 'active' : ''\" ng-click=\"layout.change(3)\")\n                            .layout-icon\n                                .layout-row\n                                    .layout-column\n                                    .layout-column\n                                    .layout-column\n                        br\n                        .layout-selector.p-2(ng-class=\"layout.active_layout == 4 ? 'active' : ''\" ng-click=\"layout.change(4)\")\n                            .layout-icon.rows-2\n                                .layout-row\n                                    .layout-column\n                                .layout-row\n                                    .layout-column\n\n                        .layout-selector.p-2(ng-class=\"layout.active_layout == 5 ? 'active' : ''\" ng-click=\"layout.change(5)\")\n                            .layout-icon.rows-2\n                                .layout-row\n                                    .layout-column\n                                    .layout-column\n                                .layout-row\n                                    .layout-column\n\n                        .layout-selector.p-2(ng-class=\"layout.active_layout == 6 ? 'active' : ''\" ng-click=\"layout.change(6)\")\n                            .layout-icon.rows-2\n                                .layout-row\n                                    .layout-column\n                                    .layout-column\n                                    .layout-column\n                                .layout-row\n                                    .layout-column\n\n                    .hr.bg-white\n\n                    .button-container\n                        button.btn.btn-white.btn-block.mb-3(ng-click=\"modal.keymaps()\") \n                            i.fas.fa-keyboard\n                            span.ml-2 Shortcuts\n\n                        //- button.btn.btn-white.btn-block.mb-3(ng-click=\"event.select_file()\") \n                        //-     i.fas.fa-upload\n                        //-     span.ml-2 Import\n\n                        a.btn.btn-white.btn-block.mb-3(ng-href=\"/wiz/export/{{mode}}/{{ app.id }}\" target=\"_blank\")\n                            i.fas.fa-download\n                            span.ml-2 Export\n\n        div(data-split-pane-divider data-width=\"0px\")\n        \n        #editor-area(data-split-pane-component)\n            div(style=\"width: 100%; height: 100%;\" ng-if=\"workspace.active_workspace == 'history'\")\n                .code-select.bg-dark.d-flex(style=\"margin-top: -2px;\" ng-if=\"viewer.codes.length > 0\")\n                    .btn.btn-square.btn-sm.p-2(ng-repeat=\"code in viewer.codes\" ng-click=\"viewer.change(code)\" ng-class=\"viewer.code == code ? 'btn-white' : 'btn-dark'\" ng-if=\"code != 'preview'\") {{code}}\n                    \n                div(style=\"height: {{ viewer.codes.length > 0 ? 'calc(100% - 36px);' : '100%' }}\")\n                    div(ng-model=\"viewer.editor.data\" ui-monaco-opts=\"viewer.editor.configuration\" ui-monaco-diff)\n\n            div(data-split-pane data-split-pane-properties=\"layout.viewstate.horizonal\" ng-show=\"workspace.active_workspace != 'history'\")\n                div(data-split-pane-component data-height=\"100%\")\n                    div(data-split-pane data-split-pane-properties=\"layout.viewstate.vertical_1_1\")\n                        div(data-split-pane-component data-width=\"34%\")\n                            +codearea('tab1')\n                        div(data-split-pane-divider data-width=\"3px\")\n                        div(data-split-pane-component data-width=\"66%\")\n                            div(data-split-pane data-split-pane-properties=\"layout.viewstate.vertical_1_2\")\n                                div(data-split-pane-component data-width=\"50%\")\n                                    +codearea('tab2')\n                                div(data-split-pane-divider data-width=\"3px\")\n                                div(data-split-pane-component data-width=\"50%\")\n                                    +codearea('tab3')\n\n                div(data-split-pane-divider data-height=\"3px\")\n\n                div(data-split-pane-component data-height=\"0\")\n                    div(style=\"overflow: hidden; height: 100%; width: 100%;\" ng-click=\"app.tab.active('tab4')\" ng-if=\"app.editor.viewstate\" ng-cloak)\n                        .code-select.bg-dark.d-flex(style=\"margin-top: -2px;\")\n                            a.btn.btn-square.btn-sm.p-2(href=\"\" ng-click=\"event.app.tabchange('tab4', 'debug')\" ng-class=\"configuration.tab.tab4_val == 'debug' ? 'btn-white' : 'btn-dark'\") DEBUG\n                            a.btn.btn-square.btn-dark.btn-sm.p-2.ml-auto(href=\"\" ng-if=\"configuration.tab.tab4_val == 'debug'\" ng-click=\"socket.clear()\") CLEAR\n                            button.btn.btn-square.btn-dark.btn-sm.p-2(ng-click=\"socket.link()\" ng-if=\"configuration.tab.tab4_val == 'debug'\")\n                                i.fas.fa-external-link-square-alt\n                        div(style=\"height: calc(100% - 36px);\")\n                            .debug-messages(ng-if=\"configuration.tab.tab4_val == 'debug'\" style=\"overflow: auto; max-width: none; width: 100%; height: 100%; background: #000; color: #fff; padding: 8px; line-height: 1;\" ng-bind-html=\"trustAsHtml(socket.log)\")\n            \n    #modal-add-language.modal.fade(tabindex=\"-1\")\n        .modal-dialog.modal-sm(role='document')\n            .modal-content\n                .modal-body\n                    .modal-title Add Language\n                    .p-4 \n                        input.form-control(type=\"text\" placeholder=\"ko\" ng-model=\"modal.add_language.lang\" autocomplete='off')\n                .modal-footer\n                    button.btn.btn-link.link-secondary.mr-auto(type='button' data-dismiss='modal') Cancel\n                    button.btn.btn-dark(type='button' ng-click=\"app.editor.code.dic.add(modal.add_language.lang)\") Add\n\n    #modal-delete.modal.fade(tabindex=\"-1\")\n        .modal-dialog.modal-sm(role='document')\n            .modal-content\n                .modal-body\n                    .modal-title Delete\n                    div Once deleted, it cannot be restored. Are you sure you want to delete?\n                .modal-footer\n                    button.btn.btn-link.link-secondary.mr-auto(type='button' data-dismiss='modal') Cancel\n                    button.btn.btn-danger(type='button' ng-click=\"app.delete()\") Delete\n\n    #modal-delete-file.modal.fade(tabindex=\"-1\")\n        .modal-dialog.modal-sm(role='document')\n            .modal-content\n                .modal-body\n                    .modal-title Delete\n                    div Once deleted, it cannot be restored. Are you sure you want to delete?\n                .modal-footer\n                    button.btn.btn-link.link-secondary.mr-auto(type='button' data-dismiss='modal') Cancel\n                    button.btn.btn-danger(type='button' ng-click=\"framework.delete()\") Delete\n\n    #modal-keymaps.modal.fade(tabindex=\"-1\")\n        .modal-dialog(role='document' style=\"max-width: 720px;\")\n            .modal-content\n                .modal-header\n                    .modal-title Shortcuts\n                .modal-body.m-0\n                    table.table.table-bordered.table-hover \n                        thead \n                            th.text-center Shortcut\n                            th.text-center Description\n                        tbody\n                            tr \n                                th.text-center\n                                    button.btn.btn-sm.btn-dark Ctrl(CMD)\n                                    i.fas.fa-plus.ml-1.mr-1\n                                    button.btn.btn-sm.btn-dark S\n                                td.text-center Save\n                            tr \n                                th.text-center\n                                    button.btn.btn-sm.btn-dark Alt\n                                    i.fas.fa-plus.ml-1.mr-1\n                                    button.btn.btn-sm.btn-dark Z, X\n                                td.text-center move previous/next tab\n                             tr \n                                th.text-center\n                                    button.btn.btn-sm.btn-dark Alt\n                                    i.fas.fa-plus.ml-1.mr-1\n                                    button.btn.btn-sm.btn-dark A, S\n                                td.text-center move previous/next code view\n                            tr \n                                th.text-center\n                                    button.btn.btn-sm.btn-dark Alt\n                                    i.fas.fa-plus.ml-1.mr-1\n                                    button.btn.btn-sm.btn-dark 1, 2, 3\n                                td.text-center Panel change (config/widget/framework)\n                            tr \n                                th.text-center\n                                    button.btn.btn-sm.btn-dark Alt\n                                    i.fas.fa-plus.ml-1.mr-1\n                                    button.btn.btn-sm.btn-dark J, K\n                                td.text-center Previous/Next wiz component\n                            tr \n                                th.text-center\n                                    button.btn.btn-sm.btn-dark Alt\n                                    i.fas.fa-plus.ml-1.mr-1\n                                    button.btn.btn-sm.btn-dark F\n                                td.text-center Find Widgets (in widgets tab)\n                            \n                .modal-footer\n                    button.btn.btn-link.link-secondary.ml-auto(type='button' data-dismiss='modal') Cancel\n\n","api":"import os\nimport season\nimport json\nwiz = framework.model(\"wiz\")\n\ndef search(framework):\n    rows = wiz.data.rows(mode='route')\n    framework.response.status(200, rows)\n\ndef info(framework):\n    app_id = framework.request.segment.get(0, True)\n    info = wiz.data.get(app_id, mode='route')\n    if info is None:\n        framework.response.status(404)\n    framework.response.status(200, info)\n\ndef update(framework):\n    info = framework.request.query(\"info\", True)\n    info = json.loads(info)\n    wiz.data.update(info, mode='route')\n    framework.response.status(200)\n\ndef delete(framework):\n    app_id = framework.request.segment.get(0, True)\n    wiz.data.delete(app_id, mode='route')\n    framework.response.status(200)\n\ndef history(framework):\n    commits = wiz.workspace.commits(branch=None, max_count=100)\n    framework.response.status(200, commits)\n\ndef diff(framework):\n    app_id = framework.request.segment.get(0, True)\n    commit = framework.request.segment.get(1, True)\n    filepath = f'routes/{app_id}'\n\n    def load_app_files(key):\n        try:\n            appfile = os.path.join(filepath, key)\n            text = wiz.workspace.file(appfile, branch=None, commit=commit)\n            return text\n        except:\n            return \"\"\n\n    appinfo = dict()\n    appinfo = os.path.join(filepath, 'app.json')\n    appinfo = wiz.workspace.file(appinfo, branch=None, commit=commit)\n    appinfo_txt = appinfo\n    appinfo = json.loads(appinfo)\n    appinfo['info'] = appinfo_txt\n    appinfo['code'] = dict()\n    appinfo['code'][\"controller\"] = load_app_files(\"controller.py\")\n    appinfo['code'][\"dic\"] = load_app_files(\"dic.json\")\n\n    framework.response.status(200, appinfo)","controller":"import season\nimport time\nwiz = framework.model(\"wiz\")\nconfig = wiz.config.load(\"wiz\")\n\nWIZ_CONTROLLER = '### wiz.request.query(<KEY>, <DEFAULT_VALUE>)\\n# data = wiz.request.query() # get all queries as dict type\\n# value = wiz.request.query(\"key\", \"test\") # get `key` value, if not exist in query, return default value\\n# value = wiz.request.query(\"key\", True) # if default value is True, this key required\\n\\n### load text from dictionary\\n# hello = dic(\"hello\")\\n# title = dic(\"title.text\")\\n\\n### use selected controller\\n# controller.custom_function()\\n\\n### use segments\\n### Route: /board/<category>/list\\n### View URI: /board/notice/list\\n# segment = framework.request.segment\\n\\n### render app\\n# wiz.response.render(\"main\")\\n# wiz.response.render(\"app_namespace\")\\n# wiz.response.render(\"<url_pattern_1>\", \"<app_namespace>\", key=\"value\", key2=\"value2\")\\n# wiz.response.render(\"<url_pattern_2>\", \"<app_namespace>\", key=\"value\", key2=\"value3\")\\n# wiz.response.status(200)\\n'\n\napp_id = framework.request.segment.app_id\nif app_id is None:\n    framework.response.redirect(\"apps/list\")\n\nif app_id == 'new':\n    pkg = dict()\n    pkg[\"id\"] = framework.lib.util.randomstring(12) + str(int(time.time()))\n    pkg[\"title\"] = \"New Route\"\n    pkg[\"namespace\"] = pkg[\"id\"]\n    pkg[\"route\"] = \"\"\n    pkg[\"viewuri\"] = \"\"\n\n    info = dict()\n    info[\"package\"] = pkg\n    info[\"controller\"] = WIZ_CONTROLLER\n    info[\"dic\"] = dict()\n    info[\"dic\"][\"default\"] = dict()\n    info[\"dic\"][\"default\"][\"hello\"] = \"hello\"\n    info[\"dic\"][\"ko\"] = dict()\n    info[\"dic\"][\"ko\"][\"hello\"] = \"안녕하세요\"\n\n    wiz.data.update(info, mode='route')\n    framework.response.redirect(\"routes/editor/\" + pkg[\"id\"])\n\ninfo = wiz.data.get(app_id, mode='route')\nif info is None:\n    framework.response.redirect(\"list\")\n\nkwargs['IS_DEV'] = wiz.is_dev()\nkwargs['BRANCH'] = wiz.workspace.branch()\nkwargs['BRANCHES'] = wiz.workspace.branches()\nkwargs['CTRLS'] = wiz.controllers()\nkwargs['APPID'] = app_id"},{"dic":{"default":{}},"id":"core.workspace.routes.list","name":"/routes/list","compile":"controller","controller":"","html":".container.pt-4.pb-4(style=\"max-width: 960px;\")\n    .page-header\n        .row.align-items-center\n            .col-auto\n                .page-pretitle SEASON WIZ\n                h2.page-title Routes\n\n            .col-auto.ml-auto.d-print-none\n                .d-flex\n                    input.form-control(type=\"text\" placeholder=\"Search...\" ng-model=\"search.text\" ng-change=\"event.search(search.text)\" style=\"width: 240px;\")\n                    a.btn.btn-light.pr-4.pl-4.ml-2(href='/wiz/admin/workspace/routes/editor/new' style=\"width: 140px;\")\n                        i.mr-2.fas.fa-plus\n                        | Create\n\n    .overflow-x\n        table.table.board-table.table-hover.mb-0\n            thead \n                tr\n                    th.text-left.width-1.pr-2.pl-2 Route\n                    th.text-left.pr-2.pl-2 Title\n                    th.text-center.width-2.pr-2.pl-2 Updated\n\n            tbody\n                tr(ng-if=\"list.length == 0\")\n                    td.text-center(colspan=3) Route is not finded. create Route.\n\n                tr(ng-repeat=\"item in list\" ng-if=\"!item.hide\")\n                    td.text-left.width-1.pr-2.pl-2\n                        a(ng-href=\"/wiz/admin/workspace/routes/editor/{{item.package.id}}\") {{item.package.route}}\n                    td.pr-2.pl-2\n                        a(ng-href=\"/wiz/admin/workspace/routes/editor/{{item.package.id}}\") {{item.package.title}}\n                    td.text-right.width-2.pr-2.pl-2 {{datedisplay(item.package.updated)}}","js":"let wiz_controller = async ($sce, $scope, $timeout) => {\n    $scope.math = Math;\n\n    $scope.list = [];\n    $scope.event = {};\n\n    $scope.datedisplay = function (date) {\n        let targetdate = moment(date);\n        let diff = new Date().getTime() - new Date(targetdate).getTime();\n        diff =  diff / 1000 / 60 / 60;\n        \n        if (diff > 24)  return targetdate.format(\"YYYY-MM-DD hh:mm\");\n        if (diff > 1) return Math.floor(diff) + \" hours ago\"\n\n        diff = diff * 60;\n\n        if (diff < 2) return \"just now\";\n\n        return Math.floor(diff) + \" minutes ago\";\n    }\n\n    $scope.event.load = async () => {\n        let res = await wiz.API.async(\"search\");\n        if (res.code == 200) {\n            $scope.list = res.data;\n            $scope.list.sort((a, b)=> new Date(b.package.updated).getTime() - new Date(a.package.updated).getTime());\n            console.log($scope.list);\n        }\n        $timeout();\n    }\n\n    $scope.event.search = async (val) => {\n        val = val.toLowerCase();\n        for (var i = 0; i < $scope.list.length; i++) {\n            let searchindex = ['title', 'namespace', 'route', 'category'];\n            $scope.list[i].hide = true;\n            for (let j = 0; j < searchindex.length; j++) {\n                try {\n                    let key = searchindex[j];\n                    let keyv = $scope.list[i].package[key].toLowerCase();\n                    if (keyv.includes(val)) {\n                        $scope.list[i].hide = false;\n                        break;\n                    }\n                } catch (e) {\n                }\n            }\n            if (val.length == 0)\n                $scope.list[i].hide = false;\n        }\n\n        $timeout();\n    }\n\n    $scope.event.load();\n}","api":"def search(framework):\n    wiz = framework.model(\"wiz\")\n    rows = wiz.data.rows(mode='route')\n    framework.response.status(200, rows)","css":".main-header {\n    .container {\n        margin: 0 auto;\n        max-width: 720px;\n        padding-top: 88px;\n        padding-bottom: 96px;\n        color: white;\n    }\n\n    .subtitle {\n        font-size: 24px;\n        color: rgba(255, 255, 255, .6);\n    }\n\n    .title {\n        font-size: 40px;\n    }\n\n    .input-group {\n        .form-control {\n            border: 0;\n            // border-radius: 0;\n            padding: 16px;\n            font-size: 16px;\n            color: black;\n        }\n\n        .btn {\n            border: 0;\n            box-shadow: none;\n            border-radius: 0;\n            background: #ff922b;\n            color: white;\n            font-size: 20px;\n        }\n    }\n\n    .icon-menu {\n        padding: 18px 0;\n        color: white;\n\n        &:hover {\n            cursor: pointer;\n            background-color: #ff922b;\n        }\n\n        .main-icon {\n            height: 80px;\n\n        }\n\n        img {\n            width: 80px;\n            height: 80px;\n        }\n    }\n}\n\n.card {\n\n    h2,\n    h3 {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n    }\n}\n\n.card-hover:hover {\n    background: rgba(255, 146, 43, .2);\n    cursor: pointer;\n}\n\n.card-statistic {\n    img {\n        margin-top: 12px;\n        margin-bottom: 12px;\n        width: 36px;\n        height: 36px;\n    }\n}\n\n.page {\n    background: white;\n}\n\n@media all and (min-width:721px) {}\n\n.filetree {\n    .title {\n        cursor: pointer;\n    }\n\n    .title:hover {\n        background: rgba(255, 255, 255, .1);\n    }\n\n    .title.active {\n        background: rgba(255, 255, 255, .2);\n    }\n\n    .sub {\n        padding-left: 16px;\n    }\n}","compile_html":"on","compile_css":"on","compile_js":"on"},{"dic":{"default":{}},"id":"core.workspace.setting","name":"config workspace","compile_html":"on","compile_css":"on","compile_js":"on","html":".p-4.pr-6.pl-6\n    .page-header.mb-0\n        .row.align-items-center\n            .col-auto\n                h2.page-title Workspace Configuration\n            .col-auto.ml-auto.d-print-none\n                button.btn.btn-light.ml-2(ng-click=\"event.update()\") Save\n\n    .info-form.row\n        .col-md-12\n            .text-muted Workspace Keymaps\n    \n    .info-form.row.first-child\n        .col-md-12.pt-3(style=\"height: 70vh; overflow: hidden;\")\n            div(ng-model=\"data.keymap\" ui-monaco-opts=\"monaco_properties\" ui-monaco)","controller":"","js":"let wiz_controller = async ($sce, $scope, $timeout) => {\n    _builder($scope, $timeout);\n    $scope.monaco_properties = $scope.monaco(\"python\");\n}"},{"dic":{"default":{}},"api":"import season\nimport os\nimport shutil\nimport json\n\nSAMPLE = season.stdClass()\nSAMPLE.HEADER = \"\"\"title SEASON WIZ\n\nmeta(charset='utf-8')\nmeta(name='viewport' content='width=device-width, initial-scale=1, viewport-fit=cover')\nmeta(http-equiv='X-UA-Compatible' content='ie=edge')\nmeta(name='msapplication-TileColor' content='#206bc4')\nmeta(name='theme-color' content='#206bc4')\nmeta(name='apple-mobile-web-app-status-bar-style' content='black-translucent')\nmeta(name='apple-mobile-web-app-capable' content='yes')\nmeta(name='mobile-web-app-capable' content='yes')\nmeta(name='HandheldFriendly' content='True')\nmeta(name='MobileOptimized' content='320')\n\nlink(href='/resources/themes/<THEME_NAME>/libs/fontawesome/css/all.min.css' rel='stylesheet')\nscript(src='/resources/themes/<THEME_NAME>/libs/jquery/jquery-3.5.1.min.js')\n\"\"\"\n\nSAMPLE.LAYOUT = \"\"\"doctype 5\n\nhtml(ng-app=\"app\")\n    head\n        {$ wiz.theme('<THEME_NAME>', '<LAYOUT_NAME>', '<LAYOUT_FILE>') $}\n        {$ wiz.theme('default', 'season', 'header.pug') $}\n        \n    body.antialiased\n        script(src='/resources/themes/<themename>/libs/jquery.js')\n\n        .page\n            .preview\n                {$ view $}\n\n            style.\n                html,\n                body {\n                    overflow: auto;\n                }\n\n                body {\n                    padding: 32px;\n                }\n\n                .page {\n                    background: transparent;\n                }\n\"\"\"\n\nrootfs = framework.model(\"wizfs\")\nwiz = framework.model(\"wiz\")\n\nBASEPATH = wiz.branchpath()\nBASEPATH = os.path.join(BASEPATH, \"themes\")\nSEGMENT_BASE = len(BASEPATH.split(\"/\"))\nsupportfiles = framework.config.load(\"wiz\").get(\"supportfiles\", {})\n\ndef upload(framework):\n    files = framework.request.files()\n    path = framework.request.query(\"path\", True)\n    name = framework.request.query(\"name\", True)\n    filepath = framework.request.query(\"filepath\", True)\n    filepath = json.loads(filepath)\n\n    if len(filepath) != len(files):\n        return framework.response.status(400, True)\n\n    fs = rootfs.use(path + \"/\" + name)\n    for i in range(len(files)):\n        try:\n            file = files[i]\n            if len(file.filename) == 0: continue\n            filename = filepath[i]\n            fs.write_file(filename, file)\n        except Exception as e:\n            pass\n\n    return framework.response.status(200, True)\n\ndef delete(framework):\n    path = framework.request.query(\"path\", True)\n    name = framework.request.query(\"name\", True)\n    fs = rootfs.use(path)\n    fs.delete(name)\n    framework.response.status(200, True)\n\ndef delete_bulk(framework):\n    data = framework.request.query(\"data\", True)\n    data = json.loads(data)\n\n    for item in data:\n        path = item['path']\n        name = item['name']\n        fs = rootfs.use(path)\n        fs.delete(name)\n    framework.response.status(200, True)\n\ndef rename(framework):\n    path = framework.request.query(\"path\", True)\n    name = framework.request.query(\"name\", True)\n    rename = framework.request.query(\"rename\", True)\n    ftype = framework.request.query(\"type\", \"folder\")\n    segment = path.split(\"/\")\n\n    fs = rootfs.use(path)\n    if len(name) > 0:\n        if os.path.isfile(fs.abspath(name)) or os.path.isdir(fs.abspath(name)):\n            shutil.move(fs.abspath(name), fs.abspath(rename))\n            framework.response.status(200, True)\n    \n    if len(rename) > 0:\n        newtarget = fs.abspath(rename)\n        if os.path.isfile(newtarget) or os.path.isdir(newtarget):\n            framework.response.status(401, \"Already Exists\")\n\n        if ftype == 'file':\n            ext = os.path.splitext(rename)[1]\n            extmap = supportfiles\n            if ext in extmap:\n                fs.write(rename, \"\")\n            else:\n                framework.response.status(402, \"Not Supported File Name\")\n        else:\n            os.makedirs(newtarget)\n            if len(segment) == SEGMENT_BASE + 2 and segment[-1] == 'layout':\n                fs = rootfs.use(os.path.join(path, rename))\n                if fs.isfile(\"header.pug\") == False: fs.write(\"header.pug\", SAMPLE.HEADER)\n                if fs.isfile(\"layout.pug\") == False: fs.write(\"layout.pug\", SAMPLE.LAYOUT)      \n\n        framework.response.status(200, True)\n\n    framework.response.status(404, \"Error\")\n\ndef update(framework):\n    path = framework.request.query(\"path\", True)\n    name = framework.request.query(\"name\", True)\n    text = framework.request.query(\"text\", True)\n    \n    fs = rootfs.use(path)\n    fs.write(name, text)\n\n    framework.response.status(200, True)\n\ndef tree(framework):\n    path = framework.request.query(\"path\", True)\n    name = framework.request.query(\"name\", True)\n    namespace = os.path.join(path, name)\n    segment = path.split(\"/\")\n\n    def objbuilder(_path, _name, _type, _sub=[]):\n        obj = dict()\n        obj[\"path\"] = _path\n        obj[\"name\"] = _name\n        obj[\"sub\"] = _sub\n        obj[\"type\"] = _type\n        return obj\n\n    if len(segment) == SEGMENT_BASE:\n        rows = []\n        rows.append(objbuilder(namespace, \"layout\", \"layout\"))\n        rows.append(objbuilder(namespace, \"resources\", \"folder\"))\n        framework.response.status(200, rows)\n\n    if len(segment) == SEGMENT_BASE + 1:\n        fs = rootfs.use(path)\n        componentpath = fs.abspath(name)\n        try:\n            os.makedirs(componentpath)\n        except:\n            pass  \n            \n    if path.split(\"/\")[0] == \"_system\":\n        framework.response.status(300, {\"path\": path, \"name\": name})\n\n    _type = framework.request.query(\"type\", \"folder\")\n    if path.startswith(\"/\"):\n        path = path[1:]\n\n    if _type == 'file':\n        ext = os.path.splitext(name)[1].lower()\n\n        # vscode\n        extmap = supportfiles\n        if ext in extmap:\n            fs = rootfs.use(path)\n            framework.response.status(201, {\"text\": fs.read(name), \"path\": path, \"name\": name, \"language\": extmap[ext]})\n        \n        # image view\n        extmap = {}\n        extmap[\".png\"] = \"image\"\n        extmap[\".jpeg\"] = \"image\"\n        extmap[\".jpg\"] = \"image\"\n        extmap[\".ico\"] = \"image\"\n        extmap[\".icon\"] = \"image\"\n        if ext in extmap:\n            target = path + \"/\" + name\n            if target.startswith(\".\"): target = target[1:]\n            framework.response.status(202, {\"path\": path, \"name\": name, \"url\": target})\n\n        framework.response.status(404, \"not support file\")\n\n    fs = rootfs.use(namespace)\n    if os.path.isfile(fs.abspath(\".\")) == False and os.path.isdir(fs.abspath(\".\")) == False:\n        framework.response.status(404, [])\n    files = fs.list()\n    rows = []\n    for file in files:\n        _type = \"folder\"\n        if os.path.isfile(fs.abspath(file)):\n            _type = \"file\"\n        rows.append(objbuilder(namespace, file, _type))\n\n    framework.response.status(200, rows)","id":"core.workspace.themes","name":"/themes","compile_html":"on","compile_css":"off","compile_js":"on","controller":"wiz = framework.model(\"wiz\")\n\nfs = wiz.storage()\nif fs.isdir(\"themes\") == False:\n    fs.makedirs(\"themes\")\n\nkwargs['THEMES'] = fs.files(\"themes\")\nkwargs[\"BRANCHPATH\"] = wiz.branchpath()\n","html":".main-container\n    mixin topbutton()\n        .d-flex(ng-if=\"viewer.mode == 'folder' && viewer.data.type == 'folder' && !viewer.has_parent()\")\n            span.ml-2.if-desktop.text-muted {{ viewer.data.path.substring(10) }}/{{viewer.data.name}}\n            span.mr-auto &nbsp;\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer.mr-1(ng-click=\"modal.delete(viewer.data)\" style=\"height: 20px;\")\n                i.fas.fa-trash\n                span.ml-1.if-desktop Delete Theme\n\n        .d-flex(ng-if=\"viewer.mode == 'folder' && viewer.data.type == 'folder' && viewer.has_parent()\")\n            input.mt-1(type=\"checkbox\" ng-click=\"viewer.check_all(viewer.data)\" ng-model=\"viewer.data.checked\")\n            span.ml-2.if-desktop.text-muted {{ viewer.data.path.substring(10) }}/{{viewer.data.name}}\n            span.mr-auto &nbsp;\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer.mr-1(ng-click=\"modal.delete_bulk(viewer.data)\" style=\"height: 20px;\")\n                i.fas.fa-trash\n                span.ml-1.if-desktop Delete\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer.mr-1(ng-click=\"viewer.create(viewer.data, 'folder')\" style=\"height: 20px;\")\n                i.fas.fa-folder-plus\n                span.ml-1.if-desktop New Folder\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer.mr-1(ng-click=\"viewer.create(viewer.data, 'file')\" style=\"height: 20px;\")\n                i.fas.fa-file\n                span.ml-1.if-desktop New File\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer.mr-1(ng-click=\"viewer.upload()\" style=\"height: 20px;\")\n                i.fas.fa-cloud-upload-alt\n                span.ml-1.if-desktop Upload\n\n        .d-flex(ng-if=\"viewer.mode == 'folder' && viewer.data.type == 'layout'\")\n            input.mt-1(type=\"checkbox\" ng-click=\"viewer.check_all(viewer.data)\" ng-model=\"viewer.data.checked\")\n            span.ml-2.if-desktop.text-muted {{ viewer.data.path.substring(10) }}/{{viewer.data.name}}\n            span.mr-auto &nbsp;\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer.mr-1(ng-click=\"viewer.create(viewer.data, 'folder')\" style=\"height: 20px;\")\n                i.fas.fa-folder-plus\n                span.ml-1.if-desktop Create Layout\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer.mr-1(ng-click=\"modal.delete_bulk(viewer.data)\" style=\"height: 20px;\")\n                i.fas.fa-trash\n                span.ml-1.if-desktop Delete\n\n        .d-flex(ng-if=\"viewer.mode == 'editor'\")\n            span.ml-2.if-desktop.text-muted {{ viewer.data.path.substring(10) }}/{{viewer.data.name}}\n            span.mr-auto &nbsp;\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer.mr-1(ng-click=\"viewer.save()\" style=\"height: 20px;\")\n                i.fas.fa-save\n                span.ml-1.if-desktop Save\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer(ng-click=\"viewer.parent()\" style=\"height: 20px;\" ng-if=\"status.view != 'folder'\")\n                i.fas.fa-times\n\n        .d-flex(ng-if=\"viewer.mode == 'image'\")\n            span.ml-2.if-desktop.text-muted {{ viewer.data.path.substring(10) }}/{{viewer.data.name}}\n            span.mr-auto &nbsp;\n\n            button.btn.btn-sm.btn-light.pt-1.pb-1.cursor-pointer(ng-click=\"viewer.parent()\" style=\"height: 20px;\" ng-if=\"status.view != 'folder'\")\n                i.fas.fa-times\n\n    div(style=\"display: none;\")\n        form#file-form\n            input#file-upload.form-control(type='file' name='file[]' multiple)\n\n    .bg-dark.text-center(ng-if=\"loading.status\" style=\"width: 100%; height: 100%; position: absolute; top: 0; left: 0; z-index: 99999; padding-top: 40vh; opacity: .6;\")\n        .spinner-grow.text-white(style=\"width: 60px; height: 60px;\")\n    \n    .main-panel.container.p-0(style=\"height: calc(100% - 168px);\")\n        div(data-split-pane data-split-pane-properties=\"configuration.root\")\n            div(data-split-pane-component data-width=\"240px\")\n                div(style=\"height: 100%;\")\n                    .card-body.p-3(style=\"height: 100%; overflow: auto;\")\n                        script(type=\"text/ng-template\" id=\"tree.html\").\n                            <div class=\"filetree\">\n                                <div class=\"title d-flex {{viewer.data.name == item.name && viewer.data.path == item.path ? 'active' : '' }}\" ng-click=\"tree.load(item)\">\n                                    <span>\n                                        <i class=\"fas {{item.icon}} mr-1\"></i>\n                                        <span>{{item.display ? item.display : item.name}}</span>\n                                    </span>\n                                </div>\n                                <div class=\"sub\">\n                                    <div ng-repeat=\"item in item.sub\" ng-include=\"'tree.html'\"></div>\n                                </div>\n                            </div>\n                        \n                        .tree-container\n                            .root-tree(ng-repeat=\"item in tree.data\" ng-include=\"'tree.html'\")\n        \n            div(data-split-pane-divider data-width=\"1px\")\n            \n            div(data-split-pane-component style=\"height: 100%; overflow: hidden;\")\n                .panel-header.p-1.pr-0.pl-2\n                    +topbutton\n\n                .panel-editor(ng-if=\"viewer.mode == 'folder'\" style=\"height: 100%; overflow: auto;\" ng-drop=\"viewer.drop\")\n                    div(style=\"margin: 0 -12px;\" ng-if=\"upload.status\")\n                        .progress.progress-sm\n                            .progress-bar.bg-orange(style=\"width: {{upload.process}}%;\" role='progressbar' aria-valuenow='38' aria-valuemin='0' aria-valuemax='100')\n\n                    table.table.table-hover.mb-6\n                        tr(ng-if=\"viewer.has_parent()\" ng-click=\"viewer.parent()\")\n                            td.pt-0.pb-0.cursor-pointer(colspan=3)\n                                span.mr-2\n                                    svg.icon(xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\")\n                                        path(stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\")\n                                        path(d=\"M18 18h-6a3 3 0 0 1 -3 -3v-10l-4 4m8 0l-4 -4\")\n                                span ...\n\n                        tr.target-file(ng-repeat=\"item in viewer.data.sub\" ng-click=\"viewer.check(item)\")\n                            td.w-1.cursor-pointer.pr-2(style=\"white-space: nowrap;\")\n                                input.mr-2(type=\"checkbox\" ng-model=\"item.checked\" ng-if=\"!item.hide_menu\")\n                                i.fas(class=\"{{item.icon}}\")\n\n                            td.pl-0.pr-0(ng-dblclick=\"tree.load(item)\")\n                                span.title(ng-if=\"!item.edit\" ng-click=\"tree.load(item)\") {{item.name}}\n                                input.form-control.form-control-sm.text-dark(ng-if=\"item.edit\" ng-model=\"viewer.selected.rename\" style=\"color: #000 !important; display: inline-block;\" ng-enter=\"viewer.save_name()\")\n\n                            td.w-1.pl-0.text-right(style=\"white-space: nowrap;\" ng-if=\"!item.hide_menu\")\n                                span.text-dark(ng-if=\"item.edit\" style=\"font-size: 12px; width: 14px;\" ng-click=\"viewer.save_name()\")\n                                    i.fas.fa-check-circle\n                                span.text-dark(ng-if=\"!item.edit\" style=\"font-size: 12px; width: 14px;\" ng-click=\"viewer.change_name(item)\")\n                                    i.fas.fa-italic\n                                span.text-dark.ml-1(ng-if=\"!item.edit\" style=\"font-size: 12px; width: 14px;\" ng-click=\"modal.delete(item)\")\n                                    i.fas.fa-trash\n\n                .panel-editor(ng-if=\"viewer.mode == 'image'\" style=\"height: 100%; overflow: auto;\")\n                    img(ng-src=\"{{viewer.data.url}}\" style=\"width: 100%;\")\n\n                .panel-editor(ng-if=\"viewer.mode == 'editor' && viewer.editor.status\" style=\"height: 100%; overflow: hidden;\")\n                    div(ng-model=\"viewer.data.text\" ui-monaco-opts=\"viewer.editor.properties\" ui-monaco)\n\n    #modal-delete.modal.fade(tabindex=\"-1\")\n        .modal-dialog.modal-sm(role='document')\n            .modal-content\n                .modal-body\n                    .modal-title Delete\n                    div Once deleted, it cannot be restored. Are you sure you want to delete?\n                .modal-footer\n                    button.btn.btn-link.link-secondary.mr-auto(type='button' data-dismiss='modal') Cancel\n                    button.btn.btn-danger(type='button' ng-click=\"viewer.delete(modal.data.delete_selected)\") Delete\n\n    #modal-new-theme.modal.fade(tabindex=\"-1\")\n        .modal-dialog.modal-sm(role='document')\n            .modal-content\n                .modal-body\n                    .modal-title New Theme\n                    div\n                        input.form-control(type=\"text\" ng-model=\"modal.data.newtheme.title\" placeholder=\"Theme Name\" ng-enter=\"modal.data.newtheme.create(modal.data.newtheme.title)\")\n                .modal-footer\n                    button.btn.btn-link.link-secondary.mr-auto(type='button' data-dismiss='modal') Cancel\n                    button.btn.btn-dark(type='button' ng-click=\"modal.data.newtheme.create(modal.data.newtheme.title)\") Create","js":"const THEMES = wiz.data.THEMES;\nconst BRANCHPATH = wiz.data.BRANCHPATH;\nlet API_URL = wiz.API.url(\"\");\nAPI_URL = API_URL.substring(0, API_URL.length-1);\n\nconst TREE_DATA = [];\n\nfor (let i = 0; i < THEMES.length; i++) {\n    let theme = THEMES[i];\n    let obj = {\n        path: BRANCHPATH + \"/themes\", name: theme, type: 'folder', icon: 'fa-layer-group',\n        onFolder: async (item) => {\n            item.checked = false;\n            for (var i = 0; i < item.sub.length; i++) {\n                item.sub[i].hide_menu = true;\n                if (item.sub[i].type == 'file') item.sub[i].icon = 'fa-file'\n                else if (item.sub[i].type == 'folder') item.sub[i].icon = 'fa-folder'\n                else if (item.sub[i].type == 'layout') item.sub[i].icon = 'fa-columns'\n                else item.sub[i].icon = 'fa-caret-right'\n            }\n            return item;\n        }\n    };\n    TREE_DATA.push(obj)\n}\n\nTREE_DATA.push({\n    path: '', name: \"New Theme\", icon: 'fa-plus-square', click: async ($scope, item) => {\n        $scope.modal.data.newtheme = {};\n        $scope.modal.data.newtheme.title = \"\";\n        $scope.modal.data.newtheme.create = async (title) => {\n            let data = { path: BRANCHPATH + \"/themes\", name: title, rename: title };\n            await $scope.API.rename(data);\n            $('#modal-new-theme').modal('hide');\n            location.reload();\n        };\n        $('#modal-new-theme').modal('show');\n    }\n});\n\nconst VIEWER_IMAGE_URL = (item) => {\n    let url = item.url;\n    url = url.split(\"/\");\n    let themename = url[4];\n    url = url.splice(6);\n    url = url.join(\"/\");\n    url = \"/resources/themes/\" + themename + \"/\" + url;\n    return url;\n};\n\nconst BUILD_INIT = async ($scope) => {\n    console.log($scope);\n}\n\nlet wiz_controller = async ($sce, $scope, $timeout) => {\n    _builder($scope, $timeout);\n\n    $scope.math = Math;\n    $scope.trustAsHtml = $sce.trustAsHtml;\n\n    $scope.configuration = {};       // state data for maintaining ui\n    $scope.tree = {};\n    $scope.viewer = {};\n    $scope.shortcut = {};\n    $scope.loading = {};\n    $scope.modal = {};\n    $scope.upload = {};\n\n    /*\n     * define variables\n     */\n    let BUILDER = {};\n\n    let API = {\n        load: (item) => new Promise((resolve) => {\n            let url = API_URL + '/tree';\n            $.post(url, { path: item.path, name: item.name, type: item.type }, function (res) {\n                resolve(res);\n            });\n        }),\n        upload: (data) => new Promise((resolve) => {\n            let url = API_URL + '/upload';\n            $.ajax({\n                url: url,\n                type: 'POST',\n                xhr: () => {\n                    let myXhr = $.ajaxSettings.xhr();\n                    if (myXhr.upload) {\n                        myXhr.upload.addEventListener('progress', function (event) {\n                            let percent = 0;\n                            let position = event.loaded || event.position;\n                            let total = event.total;\n                            if (event.lengthComputable) {\n                                percent = Math.round(position / total * 10000) / 100;\n                            }\n                            $scope.upload.process = percent;\n                            $timeout();\n                        }, false);\n                    }\n                    return myXhr;\n                },\n                data: data,\n                cache: false,\n                contentType: false,\n                processData: false\n            }).always(function (res) {\n                resolve(res);\n            });\n        }),\n        update: (data) => new Promise((resolve) => {\n            let url = API_URL + '/update';\n            $.post(url, data, function (res) {\n                resolve(res);\n            });\n        }),\n        delete: (data) => new Promise((resolve) => {\n            let url = API_URL + '/delete';\n            $.post(url, data, function (res) {\n                resolve(res);\n            });\n        }),\n        delete_bulk: (data) => new Promise((resolve) => {\n            let url = API_URL + '/delete_bulk';\n            $.post(url, { data: JSON.stringify(data) }, function (res) {\n                resolve(res);\n            });\n        }),\n        rename: (data) => new Promise((resolve) => {\n            let url = API_URL + '/rename';\n            $.post(url, data, function (res) {\n                resolve(res);\n            });\n        }),\n        timeout: (ts) => new Promise((resolve) => {\n            $timeout(resolve, ts);\n        })\n    };\n\n    $scope.API = API;\n\n    BUILDER.tree = async () => {\n        $scope.tree.data = TREE_DATA;\n        $scope.tree.parents = {};\n        $scope.tree.current = null;\n\n        $scope.tree.init = async () => {\n            for (let i = 0; i < $scope.tree.data.length; i++) {\n                let item = $scope.tree.data[i];\n                if (item.type == \"folder\" && !item.sub) {\n                    await $scope.tree.load(item, i > 0, false);\n                }\n            }\n        }\n\n        $scope.tree.load = async (item, tree, refresh) => {\n            if (!item) {\n                location.reload();\n                return;\n            }\n            $scope.tree.current = item;\n\n            if ($scope.viewer.has_parent(item) && !refresh) {\n                if (item.sub.length > 0) {\n                    item.sub = [];\n                    if (item.path == $scope.viewer.data.path && item.name == $scope.viewer.data.name)\n                        $scope.viewer.parent(true);\n                    await API.timeout();\n                    return;\n                }\n            }\n\n            if (item.click) {\n                await item.click($scope, item);\n                return;\n            }\n\n            let res = await API.load(item);\n\n            // if result is list of files or folder\n            if (res.code == 200) {\n                item.checked = false;\n                item.sub = res.data;\n\n                if (item.onFolder) {\n                    item = await item.onFolder(item);\n                } else {\n                    item.sub.sort(function (a, b) {\n                        if (a.type == 'folder' && b.type != 'folder') return -1;\n                        if (a.type != 'folder' && b.type == 'folder') return 1;\n                        return a.name.localeCompare(b.name);\n                    });\n\n                    for (var i = 0; i < item.sub.length; i++) {\n                        if (item.sub[i].type == 'file') item.sub[i].icon = 'fa-file'\n                        else if (item.sub[i].type == 'folder') item.sub[i].icon = 'fa-folder'\n                        else item.sub[i].icon = 'fa-caret-right'\n                    }\n                }\n\n                for (var i = 0; i < item.sub.length; i++) {\n                    $scope.tree.parents[item.sub[i].path + \"/\" + item.sub[i].name] = item;\n                }\n\n                if (!tree) {\n                    await $scope.viewer.folder(item);\n                }\n\n                await API.timeout();\n                return;\n            }\n\n            if (res.code == 201) {\n                await $scope.viewer.editor.load(res.data);\n                return;\n            }\n\n            if (res.code == 202) {\n                await $scope.viewer.image(res.data);\n                return;\n            }\n        };\n    }\n\n    BUILDER.upload = async () => {\n        $scope.upload.status = false;\n        $scope.upload.process = 0;\n\n        $scope.upload.run = async (data) => {\n            $scope.upload.status = true;\n            $scope.upload.process = 0;\n            await API.timeout();\n            await API.upload(data);\n            $scope.upload.status = false;\n            await API.timeout();\n            $scope.upload.process = 0;\n            await $scope.tree.load($scope.viewer.data, false, true);\n        }\n    }\n\n    BUILDER.viewer = {};\n\n    BUILDER.viewer.base = async () => {\n        $scope.viewer.parent = async (notreload) => {\n            if (!$scope.viewer.data) return;\n            if (!$scope.viewer.has_parent()) return;\n            let parent = $scope.tree.parents[$scope.viewer.data.path + \"/\" + $scope.viewer.data.name];\n            if (!notreload) {\n\n                await $scope.tree.load(parent, false, true);\n            } else if (parent) {\n                $scope.viewer.data = parent;\n            }\n            await API.timeout();\n        }\n\n        $scope.viewer.drop = {};\n        $scope.viewer.drop = {};\n        $scope.viewer.drop.text = \"Drop File Here!\"\n        $scope.viewer.drop.ondrop = async (e, files) => {\n            let fd = new FormData();\n            let filepath = [];\n            fd.append(\"path\", $scope.viewer.data.path);\n            fd.append(\"name\", $scope.viewer.data.name);\n            for (let i = 0; i < files.length; i++) {\n                fd.append('file[]', files[i]);\n                filepath.push(files[i].filepath);\n            }\n\n            fd.append(\"filepath\", JSON.stringify(filepath));\n            await $scope.upload.run(fd);\n        }\n\n        $scope.viewer.upload = function () {\n            $('#file-upload').click();\n        };\n\n        let fileinput = document.getElementById('file-upload');\n        fileinput.onchange = async () => {\n            let fd = new FormData($('#file-form')[0]);\n            fd.append(\"path\", $scope.viewer.data.path);\n            fd.append(\"name\", $scope.viewer.data.name);\n            await $scope.upload.run(fd);\n        };\n    }\n\n    BUILDER.viewer.folder = async () => {\n        $scope.viewer.folder = async (item) => {\n            $scope.viewer.mode = \"folder\";\n            $scope.viewer.data = item;\n            await API.timeout();\n        }\n\n        $scope.viewer.has_parent = (item) => {\n            if (!item) item = $scope.viewer.data;\n            if ($scope.tree.parents[item.path + '/' + item.name])\n                return true;\n            return false;\n        }\n\n        $scope.viewer.check = async (item) => {\n            item.checked = !item.checked;\n            await API.timeout();\n        }\n\n        $scope.viewer.check_all = async (item) => {\n            item.checked = !item.checked;\n            for (let i = 0; i < item.sub.length; i++)\n                item.sub[i].checked = item.checked;\n            await API.timeout();\n        }\n\n        $scope.viewer.create = async (item, ftype) => {\n            let obj = {};\n            obj.path = item.path + \"/\" + item.name;\n            obj.type = ftype;\n            obj.name = \"\";\n            item.sub.push(obj);\n\n            await API.timeout();\n            await $scope.viewer.change_name(item.sub[item.sub.length - 1]);\n        }\n\n        $scope.viewer.save_name = async () => {\n            let data = angular.copy($scope.viewer.selected);\n            let res = await API.rename(data);\n\n            if (res.code == 402) {\n                toastr.error(res.data);\n                return;\n            }\n\n            if (res.code == 401) {\n                toastr.error(res.data);\n                return;\n            }\n\n            if (res.code == 200) {\n                $scope.viewer.selected.edit = false;\n                $scope.viewer.selected.name = $scope.viewer.selected.rename;\n            }\n\n            await $scope.tree.load($scope.viewer.data, false, true);\n            await API.timeout();\n        }\n\n        $scope.viewer.change_name = async (item) => {\n            if ($scope.viewer.selected)\n                $scope.viewer.selected.edit = false;\n\n            item.edit = true;\n            item.rename = item.name + \"\";\n            $scope.viewer.selected = item;\n            await API.timeout();\n        }\n\n        $scope.viewer.delete = async (item) => {\n            let data = angular.copy(item);\n            let parent = $scope.tree.parents[data.path + \"/\" + data.name];\n            if (data.bulk) {\n                parent = data;\n                let sub = [];\n                for (let i = 0; i < data.sub.length; i++) {\n                    if (data.sub[i].checked) {\n                        sub.push(data.sub[i]);\n                    }\n                }\n                await API.delete_bulk(sub);\n            } else {\n                await API.delete(data);\n            }\n            $scope.modal.data.delete_selected = null;\n            await $scope.tree.load(parent, false, true);\n            $('#modal-delete').modal('hide');\n        }\n    }\n\n    BUILDER.viewer.image = async () => {\n        $scope.viewer.image = async (item) => {\n            let url = VIEWER_IMAGE_URL(item);\n            if (!url) return;\n            $scope.viewer.mode = \"image\";\n            $scope.viewer.data = item;\n            item.url = url;\n            await API.timeout();\n        }\n    }\n\n    BUILDER.viewer.editor = async () => {\n        $scope.viewer.editor = {};\n        $scope.viewer.editor.properties = $scope.monaco(\"python\");\n        $scope.viewer.editor.status = false;\n        $scope.viewer.editor.properties.onLoad = async (editor) => {\n            editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_S, function () {\n                $scope.viewer.save();\n                shortcuts();\n            });\n        };\n\n        $scope.viewer.editor.load = async (item) => {\n            $scope.viewer.mode = \"editor\";\n            $scope.viewer.editor.properties.language = item.language;\n            $scope.viewer.editor.status = false;\n            await API.timeout();\n\n            $scope.viewer.data = item;\n            await API.timeout();\n            $scope.viewer.editor.status = true;\n            await API.timeout();\n        }\n\n        $scope.viewer.save = async () => {\n            let data = angular.copy($scope.viewer.data);\n            let res = await API.update(data);\n            if (res.code == 200) toastr.success('Saved');\n            else toastr.error('Error');\n        }\n    }\n\n    /*\n     * define loading\n     */\n    BUILDER.loading = async () => {\n        $scope.loading.status = true;\n        $scope.loading.show = async () => {\n            $scope.loading.status = true;\n            await API.timeout();\n        }\n\n        $scope.loading.hide = async () => {\n            $scope.loading.status = false;\n            await API.timeout();\n        }\n    }\n\n    /*\n     * define modal events\n     */\n\n    BUILDER.modal = async () => {\n        $scope.modal.data = {};\n        $scope.modal.delete = async (item) => {\n            $scope.modal.data.delete_selected = item;\n            $('#modal-delete').modal('show');\n        }\n\n        $scope.modal.delete_bulk = async (item) => {\n            $scope.modal.data.delete_selected = item;\n            $scope.modal.data.delete_selected.bulk = true;\n            $('#modal-delete').modal('show');\n        }\n    }\n\n    BUILDER.init = async () => {\n        await $scope.tree.init();\n        await $scope.loading.hide();\n    }\n\n    BUILDER.upload();\n    BUILDER.viewer.base();\n    BUILDER.viewer.folder();\n    BUILDER.viewer.image();\n    BUILDER.viewer.editor();\n    BUILDER.tree();\n    BUILDER.loading();\n    BUILDER.modal();\n    BUILDER.init();\n\n    // shortcut\n    function shortcuts() {\n        $(window).unbind();\n        shortcutjs(window, {\n            'Ctrl KeyS': function (ev) {\n                ev.preventDefault();\n                $scope.viewer.save();\n            }\n        });\n    }\n\n    shortcuts();\n    window.addEventListener(\"focus\", shortcuts, false);\n\n    if (window.BUILD_INIT) {\n        BUILD_INIT($scope);\n    }\n}","css":"html,\nbody {\n\twidth: 100%;\n\theight: 100%;\n\toverflow: hidden;\n}\n\n.main-panel {\n\twidth: 100%;\n}\n\n.filetree {\n\tposition: relative;\n}\n\n.filetree .title {\n\tcursor: pointer;\n\twhite-space: nowrap;\n\ttext-overflow: ellipsis;\n\toverflow: hidden;\n}\n\n.filetree .title .file-actions {\n\tbackground: white;\n\tdisplay: inline-block;\n\tposition: absolute;\n\tright: 0;\n}\n\n.filetree .title:hover {\n\ttext-decoration: underline;\n}\n\n.filetree .title.active {\n\tfont-family: MAIN-EB;\n}\n\n.filetree .sub {\n\tpadding-left: 16px;\n}\n\n.main-panel {\n\tborder: 1px solid #aaa;\n\tborder-top: none;\n}\n\n.main-panel .panel-header {\n\twidth: 100%;\n\tborder-bottom: 1px solid #aaa;\n}\n\n.split-pane-divider {\n\tbackground: #aaa;\n}\n\n.panel-editor i {\n\twidth: 14px;\n}\n\n.panel-editor span {\n\tcursor: pointer;\n}\n\n.panel-editor .target-file:hover span.title {\n\tborder-bottom: 1px solid #000;\n}\n\n.info-form.row {\n\tmargin: 0;\n}\n\n.main-container {\n\theight: 100%;\n\twidth: 100%;\n}"}]